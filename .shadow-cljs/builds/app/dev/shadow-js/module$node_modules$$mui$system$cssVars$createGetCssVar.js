["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@mui/system/cssVars/createGetCssVar.js"],"~:js","shadow$provide.module$node_modules$$mui$system$cssVars$createGetCssVar=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=function(prefix=\"\"){function appendVar(...vars){if(!vars.length)return\"\";const value=vars[0];return\"string\"!==typeof value||value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)?`, ${value}`:`, var(--${prefix?`${prefix}-`:\"\"}${value}${appendVar(...vars.slice(1))})`}return(field,...fallbacks)=>\n`var(--${prefix?`${prefix}-`:\"\"}${field}${appendVar(...fallbacks)})`}}","~:source","shadow$provide[\"module$node_modules$$mui$system$cssVars$createGetCssVar\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createGetCssVar;\n/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nfunction createGetCssVar(prefix = '') {\n  function appendVar(...vars) {\n    if (!vars.length) {\n      return '';\n    }\n    const value = vars[0];\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)) {\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\n    }\n    return `, ${value}`;\n  }\n\n  // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n  const getCssVar = (field, ...fallbacks) => {\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;\n  };\n  return getCssVar;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","value","default"]],"~:compiled-at",1676375827729,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$mui$system$cssVars$createGetCssVar.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAKAC,QAAwB,CAACC,MAAA,CAAS,EAAV,CAAc,CACpCC,QAASA,UAAS,CAAC,GAAGC,IAAJ,CAAU,CAC1B,GAAI,CAACA,IAAKC,CAAAA,MAAV,CACE,MAAO,EAET,OAAMN,MAAQK,IAAA,CAAK,CAAL,CACd,OAAqB,QAArB,GAAI,MAAOL,MAAX,EAAkCA,KAAMO,CAAAA,KAAN,CAAY,6EAAZ,CAAlC,CAGQ,KAAIP,KAAJ,EAHR,CACU,WAAUG,MAAA,CAAU,GAAEA,MAAF,GAAV,CAAwB,EAAlC,GAAuCH,KAAvC,GAA+CI,SAAA,CAAU,GAAGC,IAAKG,CAAAA,KAAL,CAAW,CAAX,CAAb,CAA/C,GANgB,CAe5B,MAHkB,CAACC,KAAD,CAAQ,GAAGC,SAAX,CAAAC;AACR,SAAQR,MAAA,CAAU,GAAEA,MAAF,GAAV,CAAwB,EAAhC,GAAqCM,KAArC,GAA6CL,SAAA,CAAU,GAAGM,SAAb,CAA7C,GAd0B,CAX8E;\",\n\"sources\":[\"node_modules/@mui/system/cssVars/createGetCssVar.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$mui$system$cssVars$createGetCssVar\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = createGetCssVar;\\n/**\\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\\n * and they does not need to remember the prefix (defined once).\\n */\\nfunction createGetCssVar(prefix = '') {\\n  function appendVar(...vars) {\\n    if (!vars.length) {\\n      return '';\\n    }\\n    const value = vars[0];\\n    if (typeof value === 'string' && !value.match(/(#|\\\\(|\\\\)|(-?(\\\\d*\\\\.)?\\\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)) {\\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\\n    }\\n    return `, ${value}`;\\n  }\\n\\n  // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\\n  const getCssVar = (field, ...fallbacks) => {\\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;\\n  };\\n  return getCssVar;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"default\",\"createGetCssVar\",\"prefix\",\"appendVar\",\"vars\",\"length\",\"match\",\"slice\",\"field\",\"fallbacks\",\"getCssVar\"]\n}\n"]