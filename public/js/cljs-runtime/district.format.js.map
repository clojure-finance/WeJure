{"version":3,"sources":["district/format.cljs"],"mappings":"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","names":["district.format/*default-datetime-formatter*","district.format/*default-local-datetime-formatter*","district.format/*default-date-formatter*","district.format/*default-local-date-formatter*","district.format/*default-locale*","district.format/*default-max-number-fraction-digits*","district.format/*default-max-currency-fraction-digits*","district.format/*default-min-currency-fraction-digits*","district.format/*default-max-token-fraction-digits*","district.format/*default-min-token-fraction-digits*","district.format/get-formatter","fmt","cljs.core/Keyword","cljs-time.format/formatters","cljs_time.format.formatter","var_args","G__12822","district.format/format-datetime","js/Error","date","district.format.format_datetime","formatter","cljs-time.format/unparse","G__12830","district.format/format-local-datetime","district.format.format_local_datetime","cljs-time.format/unparse-local","G__12836","district.format/format-date","district.format.format_date","G__12840","district.format/format-local-date","district.format.format_local_date","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","district.format/format-number","p__12849","vec__12850","map__12853","cljs.core.nth","cljs.core/--destructure-map","locale","cljs.core.get","max-fraction-digits","min-fraction-digits","seq12845","G__12846","cljs.core/first","cljs.core/next","self__5754__auto__","x","district.format/format-currency","p__12862","vec__12863","map__12866","currency","seq12857","G__12859","district.format/format-token","p__12874","vec__12879","map__12882","token","seq12870","G__12871","district.format/format-eth","p__12896","vec__12897","seq12893","G__12894","opts","district.format.format_token","cljs.core.merge","district.format/format-dnt","p__12904","vec__12905","seq12901","G__12902","district.format/format-number-metric","p__12910","vec__12911","seq12908","G__12909","district.format.format_number","G__12915","district.format/etherscan-addr-url","address","root-url","district.format/ensure-trailing-slash","G__12920","district.format/etherscan-tx-url","tx-hash","G__12925","district.format/time-ago","from-time","district.format.time_ago","cljs-time.core/now","to-time","units","diff","cljs-time.core/in-seconds","cljs-time.core/interval","unit","p1__12922#","cljs.core.drop_while","cljs.core/not","js/Math.floor","p1__12923#","district.format/pluralize","p__12929","vec__12930","seq12927","G__12928","n","word","ending1","ending2","plural","G__12933","cljs.core/count","singular","G__12934","cljs.core._EQ_","G__12936","district.format/truncate","string","length","district.format.truncate","suffix","string-len","suffix-len","cljs.core.subs","district.format/format-bool","district.format/time-unit->text","district.format/time-unit->text-short","district.format/format-time-unit","p__12940","vec__12941","map__12944","short?","seq12937","G__12938","G__12939","amount","f","unit-text","and__5043__auto__","clojure.string/ends-with?","district.format.pluralize","district.format/format-time-units","p__12947","p__12948","map__12949","seconds","minutes","hours","days","vec__12950","seq12945","G__12946","cljs.core.reduce","p__12953","vec__12954","acc","district.format.format_time_unit","district.format/format-url","path","query-map","cemerick.url/map->query","district.format/format-namespaced-kw","kw","temp__5804__auto__","cljs.core/namespace","cljs.core/name","district.format/format-percentage","p__12960","vec__12961","seq12957","G__12958","G__12959","portion","total","format-opts","s","district.format/clj->json","coll","js/JSON","cljs.core/clj->js"],"sourcesContent":["(ns district.format\n  (:require\n    [cemerick.url :as url]\n    [cljs-time.core :as t]\n    [cljs-time.format :as time-format]\n    [clojure.string :as string]))\n\n\n(def ^:dynamic *default-datetime-formatter* :rfc822)\n\n(def ^:dynamic *default-local-datetime-formatter* *default-datetime-formatter*)\n\n(def ^:dynamic *default-date-formatter* \"EEE, dd MMM yyyy\")\n\n(def ^:dynamic *default-local-date-formatter* *default-date-formatter*)\n\n(def ^:dynamic *default-locale* \"en-US\")\n\n(def ^:dynamic *default-max-number-fraction-digits* 2)\n\n(def ^:dynamic *default-max-currency-fraction-digits* 2)\n\n(def ^:dynamic *default-min-currency-fraction-digits* nil)\n\n(def ^:dynamic *default-max-token-fraction-digits* 2)\n\n(def ^:dynamic *default-min-token-fraction-digits* nil)\n\n(declare ensure-trailing-slash)\n\n(defn- get-formatter [fmt]\n  (if (keyword? fmt)\n    (time-format/formatters fmt)\n    (time-format/formatter fmt)))\n\n(defn format-datetime\n  ([date]\n   (format-datetime date *default-datetime-formatter*))\n  ([date formatter]\n   (when date\n     (time-format/unparse (get-formatter formatter) date))))\n\n\n(defn format-local-datetime\n  ([date]\n   (format-local-datetime date *default-local-datetime-formatter*))\n  ([date formatter]\n   (when date\n     (time-format/unparse-local (get-formatter formatter) date))))\n\n\n(defn format-date\n  ([date]\n   (format-date date *default-date-formatter*))\n  ([date formatter]\n   (when date\n     (time-format/unparse (get-formatter formatter) date))))\n\n\n(defn format-local-date\n  ([date]\n   (format-local-date date *default-local-date-formatter*))\n  ([date formatter]\n   (when date\n     (time-format/unparse-local (get-formatter formatter) date))))\n\n(defn format-number [x & [{:keys [:locale :max-fraction-digits :min-fraction-digits]\n                           :or {locale *default-locale*\n                                max-fraction-digits *default-max-number-fraction-digits*}}]]\n  (when x\n    (.toLocaleString x locale #js {:maximumFractionDigits max-fraction-digits\n                                   :minimumFractionDigits min-fraction-digits})))\n\n\n(defn format-currency [x & [{:keys [:currency :locale :max-fraction-digits :min-fraction-digits]\n                             :or {locale *default-locale*\n                                  max-fraction-digits *default-max-currency-fraction-digits*\n                                  min-fraction-digits *default-min-currency-fraction-digits*}}]]\n  (when x\n    (.toLocaleString x locale #js {:maximumFractionDigits max-fraction-digits\n                                   :minimumFractionDigits min-fraction-digits\n                                   :style \"currency\"\n                                   :currency currency})))\n\n\n(defn format-token\n  [x & [{:keys [:token :locale :max-fraction-digits :min-fraction-digits]\n         :or {locale *default-locale*\n              max-fraction-digits *default-max-token-fraction-digits*\n              min-fraction-digits *default-min-token-fraction-digits*}}]]\n  (when x\n    (str (.toLocaleString x locale #js {:maximumFractionDigits max-fraction-digits\n                                        :minimumFractionDigits min-fraction-digits})\n         (when token\n           (str \" \" token)))))\n\n\n(defn format-eth [x & [opts]]\n  (format-token x (merge {:token \"ETH\"} opts)))\n\n\n(defn format-dnt [x & [opts]]\n  (format-token x (merge {:token \"DNT\"} opts)))\n\n\n(defn format-number-metric [x & [opts]]\n  (when x\n    (cond\n      (< x 1000) (format-number x opts)\n      (< 999 x 1000000) (str (format-number (/ x 1000) opts) \"K\")\n      (< 999999 x) (str (format-number (/ x 1000000) opts) \"M\"))))\n\n(defn etherscan-addr-url\n  ([address]\n   (str \"https://etherscan.io/address/\" address))\n  ([root-url address]\n   (str (ensure-trailing-slash root-url) \"address/\" address)))\n\n(defn etherscan-tx-url\n  ([tx-hash]\n   (str \"https://etherscan.io/tx/\" tx-hash))\n  ([root-url tx-hash]\n   (str (ensure-trailing-slash root-url) \"tx/\" tx-hash)))\n\n(defn time-ago\n  ([from-time]\n   (time-ago from-time (t/now)))\n  ([from-time to-time]\n   (when to-time\n     (let [units [{:name \"second\" :limit 60 :in-second 1}\n                  {:name \"minute\" :limit 3600 :in-second 60}\n                  {:name \"hour\" :limit 86400 :in-second 3600}\n                  {:name \"day\" :limit 604800 :in-second 86400}\n                  {:name \"week\" :limit 2629743 :in-second 604800}\n                  {:name \"month\" :limit 31556926 :in-second 2629743}\n                  {:name \"year\" :limit nil :in-second 31556926}]\n           diff (t/in-seconds (t/interval from-time to-time))]\n       (if (< diff 5)\n         \"just now\"\n         (let [unit (first (drop-while #(or (>= diff (:limit %))\n                                            (not (:limit %)))\n                                       units))]\n           (-> (/ diff (:in-second unit))\n             js/Math.floor\n             int\n             (#(str % \" \" (:name unit) (when (> % 1) \"s\") \" ago\")))))))))\n\n\n(defn pluralize\n  \"Taken from reagent-utils\n   pluralizes the word based on the number of items\n   (util/pluralize [\\\"John\\\"] \\\"lad\\\")\n   (util/pluralize [\\\"John\\\" \\\"James\\\"] \\\"lad\\\")\n   (util/pluralize [\\\"Alice\\\"] \\\"lad\\\" \\\"y\\\" \\\"ies\\\")\"\n  [n & [word ending1 ending2 :as opts]]\n  (let [plural (case (count opts)\n                 1 \"s\"\n                 2 ending1\n                 3 ending2)\n        singular (case (count opts)\n                   (list 1 2) \"\"\n                   3 ending1)]\n    (str n \" \" word (if (== 1 n) singular plural))))\n\n\n(defn truncate\n  \"Truncate a string with suffix (ellipsis by default) if it is\n   longer than specified length.\"\n  ([string length]\n   (truncate string length \"...\"))\n  ([string length suffix]\n   (let [string-len (count string)\n         suffix-len (count suffix)]\n     (if (<= string-len length)\n       string\n       (str (subs string 0 (- length suffix-len)) suffix)))))\n\n\n(defn format-bool [x]\n  (if x \"true\" \"false\"))\n\n\n(def time-unit->text {:days \"day\" :hours \"hour\" :minutes \"minute\" :seconds \"second\"})\n\n(def time-unit->text-short {:days \"day\" :hours \"hour\" :minutes \"min.\" :seconds \"sec.\"})\n\n\n(defn format-time-unit [unit amount & [{:keys [:short?]}]]\n  (let [f (if short? time-unit->text-short time-unit->text)\n        unit-text (f unit)]\n    (if (and short? (string/ends-with? unit-text \".\"))\n      (pluralize amount unit-text \"\")\n      (pluralize amount unit-text))))\n\n\n(defn format-time-units [{:keys [:seconds :minutes :hours :days]} & [opts]]\n  ;; To ensure proper order\n  (.slice\n    (reduce (fn [acc [unit amount]]\n              (if (pos? amount)\n                (str acc (format-time-unit unit amount opts) \" \")\n                acc))\n            \"\"\n            [[:days days] [:hours hours] [:minutes minutes] [:seconds seconds]])\n    0 -1))\n\n\n(defn format-url [path query-map]\n  (str path \"?\" (url/map->query query-map)))\n\n\n(defn format-namespaced-kw [kw]\n  (when kw\n    (str (when-let [n (namespace kw)] (str n \"/\")) (name kw))))\n\n(defn format-percentage [portion total & [format-opts]]\n  (str (format-number (* (/ portion total) 100.0)\n                      (merge\n                        {:max-fraction-digits 1\n                         :min-fraction-digits 0}\n                        format-opts))\n       \"%\"))\n\n(defn ensure-trailing-slash [s]\n  (str s\n       (when-not (string/ends-with? s \"/\")\n         \"/\")))\n\n(defn clj->json\n  [coll]\n  (.stringify js/JSON (clj->js coll)))\n"]}