shadow$provide.module$node_modules$web3_eth_ens$lib$contracts$Registry=function(global,require,module,exports){function Registry(ens){var self=this;this.ens=ens;this.contract=ens.checkNetwork().then(function(address){address=new Contract(REGISTRY_ABI,address);address.setProvider(self.ens.eth.currentProvider);return address})}var Contract=require("module$node_modules$web3_eth_contract$lib$index"),namehash=require("module$node_modules$eth_ens_namehash$index"),PromiEvent=require("module$node_modules$web3_core_promievent$lib$index"),
formatters=require("module$node_modules$web3_core_helpers$lib$index").formatters,utils=require("module$node_modules$web3_utils$lib$index"),REGISTRY_ABI=require("module$node_modules$web3_eth_ens$lib$resources$ABI$Registry"),RESOLVER_ABI=require("module$node_modules$web3_eth_ens$lib$resources$ABI$Resolver");Registry.prototype.owner=function(name,callback){console.warn('Deprecated: Please use the "getOwner" method instead of "owner".');return this.getOwner(name,callback)};Registry.prototype.getOwner=
function(name,callback){var promiEvent=new PromiEvent(!0);this.contract.then(function(contract){return contract.methods.owner(namehash.hash(name)).call()}).then(function(receipt){"function"===typeof callback?callback(receipt,receipt):promiEvent.resolve(receipt)}).catch(function(error){"function"===typeof callback?callback(error,null):promiEvent.reject(error)});return promiEvent.eventEmitter};Registry.prototype.setOwner=function(name,address,txConfig,callback){var promiEvent=new PromiEvent(!0);this.contract.then(function(contract){return contract.methods.setOwner(namehash.hash(name),
formatters.inputAddressFormatter(address)).send(txConfig)}).then(function(receipt){"function"===typeof callback?callback(receipt,receipt):promiEvent.resolve(receipt)}).catch(function(error){"function"===typeof callback?callback(error,null):promiEvent.reject(error)});return promiEvent.eventEmitter};Registry.prototype.getTTL=function(name,callback){var promiEvent=new PromiEvent(!0);this.contract.then(function(contract){return contract.methods.ttl(namehash.hash(name)).call()}).then(function(receipt){"function"===
typeof callback?callback(receipt,receipt):promiEvent.resolve(receipt)}).catch(function(error){"function"===typeof callback?callback(error,null):promiEvent.reject(error)});return promiEvent.eventEmitter};Registry.prototype.setTTL=function(name,ttl,txConfig,callback){var promiEvent=new PromiEvent(!0);this.contract.then(function(contract){return contract.methods.setTTL(namehash.hash(name),ttl).send(txConfig)}).then(function(receipt){"function"===typeof callback?callback(receipt,receipt):promiEvent.resolve(receipt)}).catch(function(error){"function"===
typeof callback?callback(error,null):promiEvent.reject(error)});return promiEvent.eventEmitter};Registry.prototype.setSubnodeOwner=function(name,label,address,txConfig,callback){var promiEvent=new PromiEvent(!0);utils.isHexStrict(label)||(label=utils.sha3(label));this.contract.then(function(contract){return contract.methods.setSubnodeOwner(namehash.hash(name),label,formatters.inputAddressFormatter(address)).send(txConfig)}).then(function(receipt){"function"===typeof callback?callback(receipt,receipt):
promiEvent.resolve(receipt)}).catch(function(error){"function"===typeof callback?callback(error,null):promiEvent.reject(error)});return promiEvent.eventEmitter};Registry.prototype.setRecord=function(name,owner,resolver,ttl,txConfig,callback){var promiEvent=new PromiEvent(!0);this.contract.then(function(contract){return contract.methods.setRecord(namehash.hash(name),formatters.inputAddressFormatter(owner),formatters.inputAddressFormatter(resolver),ttl).send(txConfig)}).then(function(receipt){"function"===
typeof callback?callback(receipt,receipt):promiEvent.resolve(receipt)}).catch(function(error){"function"===typeof callback?callback(error,null):promiEvent.reject(error)});return promiEvent.eventEmitter};Registry.prototype.setSubnodeRecord=function(name,label,owner,resolver,ttl,txConfig,callback){var promiEvent=new PromiEvent(!0);utils.isHexStrict(label)||(label=utils.sha3(label));this.contract.then(function(contract){return contract.methods.setSubnodeRecord(namehash.hash(name),label,formatters.inputAddressFormatter(owner),
formatters.inputAddressFormatter(resolver),ttl).send(txConfig)}).then(function(receipt){"function"===typeof callback?callback(receipt,receipt):promiEvent.resolve(receipt)}).catch(function(error){"function"===typeof callback?callback(error,null):promiEvent.reject(error)});return promiEvent.eventEmitter};Registry.prototype.setApprovalForAll=function(operator,approved,txConfig,callback){var promiEvent=new PromiEvent(!0);this.contract.then(function(contract){return contract.methods.setApprovalForAll(formatters.inputAddressFormatter(operator),
approved).send(txConfig)}).then(function(receipt){"function"===typeof callback?callback(receipt,receipt):promiEvent.resolve(receipt)}).catch(function(error){"function"===typeof callback?callback(error,null):promiEvent.reject(error)});return promiEvent.eventEmitter};Registry.prototype.isApprovedForAll=function(owner,operator,callback){var promiEvent=new PromiEvent(!0);this.contract.then(function(contract){return contract.methods.isApprovedForAll(formatters.inputAddressFormatter(owner),formatters.inputAddressFormatter(operator)).call()}).then(function(receipt){"function"===
typeof callback?callback(receipt,receipt):promiEvent.resolve(receipt)}).catch(function(error){"function"===typeof callback?callback(error,null):promiEvent.reject(error)});return promiEvent.eventEmitter};Registry.prototype.recordExists=function(name,callback){var promiEvent=new PromiEvent(!0);this.contract.then(function(contract){return contract.methods.recordExists(namehash.hash(name)).call()}).then(function(receipt){"function"===typeof callback?callback(receipt,receipt):promiEvent.resolve(receipt)}).catch(function(error){"function"===
typeof callback?callback(error,null):promiEvent.reject(error)});return promiEvent.eventEmitter};Registry.prototype.resolver=function(name,callback){console.warn('Deprecated: Please use the "getResolver" method instead of "resolver".');return this.getResolver(name,callback)};Registry.prototype.getResolver=function(name,callback){var self=this;return this.contract.then(function(contract){return contract.methods.resolver(namehash.hash(name)).call()}).then(function(address){address=new Contract(RESOLVER_ABI,
address);address.setProvider(self.ens.eth.currentProvider);if("function"===typeof callback)callback(address,address);else return address}).catch(function(error){if("function"===typeof callback)callback(error,null);else throw error;})};Registry.prototype.setResolver=function(name,address,txConfig,callback){var promiEvent=new PromiEvent(!0);this.contract.then(function(contract){return contract.methods.setResolver(namehash.hash(name),formatters.inputAddressFormatter(address)).send(txConfig)}).then(function(receipt){"function"===
typeof callback?callback(receipt,receipt):promiEvent.resolve(receipt)}).catch(function(error){"function"===typeof callback?callback(error,null):promiEvent.reject(error)});return promiEvent.eventEmitter};module.exports=Registry}
//# sourceMappingURL=module$node_modules$web3_eth_ens$lib$contracts$Registry.js.map
