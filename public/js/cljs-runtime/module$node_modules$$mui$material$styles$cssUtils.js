shadow$provide.module$node_modules$$mui$material$styles$cssUtils=function(global,require,module,exports){function getUnit(input){return String(input).match(/[\d.\-+]*\s*(.*)/)[1]||""}Object.defineProperty(exports,"__esModule",{value:!0});exports.isUnitless=function(value){return String(parseFloat(value)).length===String(value).length};exports.getUnit=getUnit;exports.toUnitless=function(length){return parseFloat(length)};exports.convertLength=function(baseFontSize){return(length,toUnit)=>{var fromUnit=
getUnit(length);if(fromUnit===toUnit)return length;let pxLength=parseFloat(length);"px"!==fromUnit&&("em"===fromUnit?pxLength=parseFloat(length)*parseFloat(baseFontSize):"rem"===fromUnit&&(pxLength=parseFloat(length)*parseFloat(baseFontSize)));fromUnit=pxLength;if("px"!==toUnit)if("em"===toUnit)fromUnit=pxLength/parseFloat(baseFontSize);else if("rem"===toUnit)fromUnit=pxLength/parseFloat(baseFontSize);else return length;return parseFloat(fromUnit.toFixed(5))+toUnit}};exports.alignProperty=function({size,
grid}){const sizeBelow=size-size%grid;grid=sizeBelow+grid;return size-sizeBelow<grid-size?sizeBelow:grid};exports.fontGrid=function({lineHeight,pixels,htmlFontSize}){return pixels/(lineHeight*htmlFontSize)};exports.responsiveProperty=function({cssProperty,min,max,unit="rem",breakpoints=[600,900,1200],transform=null}){const output={[cssProperty]:`${min}${unit}`},factor=(max-min)/breakpoints[breakpoints.length-1];breakpoints.forEach(breakpoint=>{let value=min+factor*breakpoint;null!==transform&&(value=
transform(value));output[`@media (min-width:${breakpoint}px)`]={[cssProperty]:`${Math.round(1E4*value)/1E4}${unit}`}});return output}}
//# sourceMappingURL=module$node_modules$$mui$material$styles$cssUtils.js.map
