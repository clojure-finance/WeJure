shadow$provide.module$node_modules$cids$node_modules$multicodec$src$index=function(global,require,module,exports){const {Buffer}=require("module$node_modules$buffer$index"),varint=require("module$node_modules$varint$index"),intTable=require("module$node_modules$cids$node_modules$multicodec$src$int_table"),codecNameToCodeVarint=require("module$node_modules$cids$node_modules$multicodec$src$varint_table"),util=require("module$node_modules$cids$node_modules$multicodec$src$util");exports=module.exports;
exports.addPrefix=(multicodecStrOrCode,data)=>{if(Buffer.isBuffer(multicodecStrOrCode))multicodecStrOrCode=util.varintBufferEncode(multicodecStrOrCode);else if(codecNameToCodeVarint[multicodecStrOrCode])multicodecStrOrCode=codecNameToCodeVarint[multicodecStrOrCode];else throw Error("multicodec not recognized");return Buffer.concat([multicodecStrOrCode,data])};exports.rmPrefix=data=>{varint.decode(data);return data.slice(varint.decode.bytes)};exports.getCodec=prefixedData=>{prefixedData=varint.decode(prefixedData);
const codecName=intTable.get(prefixedData);if(void 0===codecName)throw Error(`Code ${prefixedData} not found`);return codecName};exports.getName=codec=>intTable.get(codec);exports.getNumber=name=>{const code=codecNameToCodeVarint[name];if(void 0===code)throw Error("Codec `"+name+"` not found");return util.varintBufferDecode(code)[0]};exports.getCode=prefixedData=>varint.decode(prefixedData);exports.getCodeVarint=codecName=>{const code=codecNameToCodeVarint[codecName];if(void 0===code)throw Error("Codec `"+
codecName+"` not found");return code};exports.getVarint=code=>varint.encode(code);global=require("module$node_modules$cids$node_modules$multicodec$src$constants");Object.assign(exports,global);exports.print=require("module$node_modules$cids$node_modules$multicodec$src$print")}
//# sourceMappingURL=module$node_modules$cids$node_modules$multicodec$src$index.js.map
