{"version":3,"sources":["emotion/util.cljc"],"mappings":";;;AAIA;;;AAAA,AAAMA,AAEHC;AAFH,AAGE,AAAI,AAAAC,AAAUD;AACZ,AAACE,AAAKF;;AACNA;;;AAEJ;;;;AAAA,AAAMG,AAGHC;AAHH,AAIE,AAAAC,AAA2B,AAAA,AAACQ,AAAaT;AAAzCE,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAAA,AAAA,AAAAI,AAAAJ;AAAAE,AAAOG;AAAPL,AAAoBM;AAApB,AACE,AAAI,AAAI,AAAA,AAACE,AAAEH,AACH,AAAA,AAACG,AAAEH;AACTP;;AACA,AAAI,AAACW,AAAIC,AAAkBJ,AACvB,AAACK,AAAKN,AACNO;;;AAEV;;;;AAAA,AAAMC,AAGHf;AAHH,AAIE,AAAI,AAAAH,AAAUG;AACZ,AAACD,AAAmB,AAACD,AAAKE;;AAC1BA;;;AAEJ;;;AAAA,AAAMgB,AAEHC;AAFH,AAGE,AAAA,AAAAC,AAAAC,AAAAC,AAACC;AAAD,AACE,AAAAH,AAACI,AAAS,AAAAH,AAACJ,AACJ,AAAAK,AAAI,AAAAA,AAACG,AACH,AAAAH,AAAAA,AAACJ,AAAAA,AAAAA;AAHZ,AAMCC","names":["emotion.util/convert-component-name","component-name","cljs.core/Keyword","cljs.core/name","emotion.util/string->camel-case","value","vec__20014","seq__20015","cljs.core/seq","first__20016","cljs.core/first","cljs.core/next","first-word","words","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","clojure.string/capitalize","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.string.join.cljs$core$IFn$_invoke$arity$1","emotion.util/kwd->camel-case","emotion.util/map->camel-map","props","p1__20018#","p2__20020#","p3__20022#","cljs.core/reduce-kv","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/map?"],"sourcesContent":["(ns emotion.util\n  (:require\n   [clojure.string :as string]))\n\n(defn convert-component-name\n  \"Convert keyworded component name to string.\"\n  [component-name]\n  (if (keyword? component-name)\n    (name component-name)\n    component-name))\n\n(defn string->camel-case\n  \"Returns camel case version of the string, e.g. \\\"font-size\\\"\n  becomes \\\"fontSize\\\".\"\n  [value]\n  (let [[first-word & words] (string/split value #\"-\")]\n    (if (or (= first-word \"data\")\n            (= first-word \"area\"))\n      value\n      (-> (map string/capitalize words)\n          (conj first-word)\n          string/join))))\n\n(defn kwd->camel-case\n  \"Returns camel case version of the keyword, e.g. :font-size\n  becomes \\\"fontSize\\\".\"\n  [value]\n  (if (keyword? value)\n    (string->camel-case (name value))\n    value))\n\n(defn map->camel-map\n  \"Convert keys of map to camel case version.\"\n  [props]\n  (reduce-kv\n   #(assoc %1 (kwd->camel-case %2)\n           (if (map? %3)\n             (map->camel-map %3)\n             %3))\n   {}\n   props))\n"]}