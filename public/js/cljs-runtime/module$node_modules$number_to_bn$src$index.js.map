{
"version":3,
"file":"module$node_modules$number_to_bn$src$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,0CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACvG,IAAIC,GAAKH,OAAA,CAAQ,4DAAR,CAAT,CACII,eAAiBJ,OAAA,CAAQ,gDAAR,CAQrBC,OAAOC,CAAAA,OAAP,CAAiBG,QAAmB,CAACC,GAAD,CAAM,CACxC,GAAmB,QAAnB,GAAI,MAAOA,IAAX,EAA8C,QAA9C,GAA+B,MAAOA,IAAtC,CAAwD,CACtD,IAAIC,WAAa,IAAIJ,EAAJ,CAAO,CAAP,CAAjB,CACIK,gBAAkBC,MAAA,CAAOH,GAAP,CAAYI,CAAAA,WAAZ,EAA0BC,CAAAA,IAA1B,EADtB,CAEIC,cAAiD,IAAjDA,GAAgBJ,eAAgBK,CAAAA,MAAhB,CAAuB,CAAvB,CAA0B,CAA1B,CAAhBD,EAA0F,KAA1FA,GAAyDJ,eAAgBK,CAAAA,MAAhB,CAAuB,CAAvB,CAA0B,CAA1B,CACzDC,gBAAAA;AAAYV,cAAA,CAAeI,eAAf,CACe,IAA/B,GAAIM,eAAUD,CAAAA,MAAV,CAAiB,CAAjB,CAAoB,CAApB,CAAJ,GACEC,eACA,CADYV,cAAA,CAAeU,eAAUC,CAAAA,KAAV,CAAgB,CAAhB,CAAf,CACZ,CAAAR,UAAA,CAAa,IAAIJ,EAAJ,CAAO,CAAC,CAAR,CAAW,EAAX,CAFf,CAIAW,gBAAA,CAA0B,EAAd,GAAAA,eAAA,CAAmB,GAAnB,CAAyBA,eAErC,IAAK,CAACA,eAAUE,CAAAA,KAAV,CAAgB,YAAhB,CAAN,EAAuCF,eAAUE,CAAAA,KAAV,CAAgB,gBAAhB,CAAvC,EACKF,eAAUE,CAAAA,KAAV,CAAgB,aAAhB,CADL,EAEwB,CAAA,CAFxB,GAEMJ,aAFN,EAEgCE,eAAUE,CAAAA,KAAV,CAAgB,gBAAhB,CAFhC,CAGE,MAA6BC,CAAtB,IAAId,EAAJ,CAAOW,eAAP,CAAkB,EAAlB,CAAsBG,EAAAA,GAAtB,CAA0BV,UAA1B,CAGT,KAAKO,eAAUE,CAAAA,KAAV,CAAgB,YAAhB,CAAL,EAAoD,EAApD,GAAsCF,eAAtC;AAA6E,CAAA,CAA7E,GAA2DF,aAA3D,CACE,MAA6BK,CAAtB,IAAId,EAAJ,CAAOW,eAAP,CAAkB,EAAlB,CAAsBG,EAAAA,GAAtB,CAA0BV,UAA1B,CAlB6C,CAAxD,IAoBO,IAAmB,QAAnB,GAAI,MAAOD,IAAX,EAA+BA,GAAIY,CAAAA,QAAnC,EAAgD,CAACZ,GAAIa,CAAAA,GAArD,EAA4D,CAACb,GAAIc,CAAAA,IAAjE,EACDd,GAAIY,CAAAA,QAAJ,CAAa,EAAb,CAAiBF,CAAAA,KAAjB,CAAuB,YAAvB,CADC,GACwCV,GAAIW,CAAAA,GAD5C,EACmDX,GAAIe,CAAAA,kBADvD,EAEH,MAAO,KAAIlB,EAAJ,CAAOG,GAAIY,CAAAA,QAAJ,CAAa,EAAb,CAAP,CAAyB,EAAzB,CAIX,MAAUI,MAAJ,CAAU,yCAAV,CAAsDC,IAAKC,CAAAA,SAAL,CAAelB,GAAf,CAAtD,CAA4E,oJAA5E,CAAN,CA3BwC,CAV6D;",
"sources":["node_modules/number-to-bn/src/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$number_to_bn$src$index\"] = function(global,require,module,exports) {\nvar BN = require('bn.js');\nvar stripHexPrefix = require('strip-hex-prefix');\n\n/**\n * Returns a BN object, converts a number value to a BN\n * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object\n * @return {Object} `output` BN object of the number\n * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number\n */\nmodule.exports = function numberToBN(arg) {\n  if (typeof arg === 'string' || typeof arg === 'number') {\n    var multiplier = new BN(1); // eslint-disable-line\n    var formattedString = String(arg).toLowerCase().trim();\n    var isHexPrefixed = formattedString.substr(0, 2) === '0x' || formattedString.substr(0, 3) === '-0x';\n    var stringArg = stripHexPrefix(formattedString); // eslint-disable-line\n    if (stringArg.substr(0, 1) === '-') {\n      stringArg = stripHexPrefix(stringArg.slice(1));\n      multiplier = new BN(-1, 10);\n    }\n    stringArg = stringArg === '' ? '0' : stringArg;\n\n    if ((!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/))\n      || stringArg.match(/^[a-fA-F]+$/)\n      || (isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/))) {\n      return new BN(stringArg, 16).mul(multiplier);\n    }\n\n    if ((stringArg.match(/^-?[0-9]+$/) || stringArg === '') && isHexPrefixed === false) {\n      return new BN(stringArg, 10).mul(multiplier);\n    }\n  } else if (typeof arg === 'object' && arg.toString && (!arg.pop && !arg.push)) {\n    if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {\n      return new BN(arg.toString(10), 10);\n    }\n  }\n\n  throw new Error('[number-to-bn] while converting number ' + JSON.stringify(arg) + ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.');\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","BN","stripHexPrefix","module.exports","arg","multiplier","formattedString","String","toLowerCase","trim","isHexPrefixed","substr","stringArg","slice","match","mul","toString","pop","push","dividedToIntegerBy","Error","JSON","stringify"]
}
