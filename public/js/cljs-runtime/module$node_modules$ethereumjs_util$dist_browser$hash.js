shadow$provide.module$node_modules$ethereumjs_util$dist_browser$hash=function(global,require,module,exports){var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});exports.rlphash=exports.ripemd160FromArray=exports.ripemd160FromString=exports.ripemd160=exports.sha256FromArray=exports.sha256FromString=exports.sha256=exports.keccakFromArray=exports.keccakFromHexString=exports.keccakFromString=exports.keccak256=exports.keccak=
void 0;var keccak_1=require("module$node_modules$ethereum_cryptography$keccak"),createHash=require("module$node_modules$create_hash$browser"),externals_1=require("module$node_modules$ethereumjs_util$dist_browser$externals"),bytes_1=require("module$node_modules$ethereumjs_util$dist_browser$bytes"),helpers_1=require("module$node_modules$ethereumjs_util$dist_browser$helpers");exports.keccak=function(a,bits){void 0===bits&&(bits=256);(0,helpers_1.assertIsBuffer)(a);switch(bits){case 224:return(0,keccak_1.keccak224)(a);
case 256:return(0,keccak_1.keccak256)(a);case 384:return(0,keccak_1.keccak384)(a);case 512:return(0,keccak_1.keccak512)(a);default:throw Error("Invald algorithm: keccak".concat(bits));}};exports.keccak256=function(a){return(0,exports.keccak)(a)};exports.keccakFromString=function(a,bits){void 0===bits&&(bits=256);(0,helpers_1.assertIsString)(a);a=Buffer.from(a,"utf8");return(0,exports.keccak)(a,bits)};exports.keccakFromHexString=function(a,bits){void 0===bits&&(bits=256);(0,helpers_1.assertIsHexString)(a);
return(0,exports.keccak)((0,bytes_1.toBuffer)(a),bits)};exports.keccakFromArray=function(a,bits){void 0===bits&&(bits=256);(0,helpers_1.assertIsArray)(a);return(0,exports.keccak)((0,bytes_1.toBuffer)(a),bits)};var _sha256=function(a){a=(0,bytes_1.toBuffer)(a);return createHash("sha256").update(a).digest()};exports.sha256=function(a){(0,helpers_1.assertIsBuffer)(a);return _sha256(a)};exports.sha256FromString=function(a){(0,helpers_1.assertIsString)(a);return _sha256(a)};exports.sha256FromArray=function(a){(0,helpers_1.assertIsArray)(a);
return _sha256(a)};var _ripemd160=function(a,padded){a=(0,bytes_1.toBuffer)(a);a=createHash("rmd160").update(a).digest();return!0===padded?(0,bytes_1.setLengthLeft)(a,32):a};exports.ripemd160=function(a,padded){(0,helpers_1.assertIsBuffer)(a);return _ripemd160(a,padded)};exports.ripemd160FromString=function(a,padded){(0,helpers_1.assertIsString)(a);return _ripemd160(a,padded)};exports.ripemd160FromArray=function(a,padded){(0,helpers_1.assertIsArray)(a);return _ripemd160(a,padded)};exports.rlphash=
function(a){return(0,exports.keccak)(externals_1.rlp.encode(a))}}
//# sourceMappingURL=module$node_modules$ethereumjs_util$dist_browser$hash.js.map
