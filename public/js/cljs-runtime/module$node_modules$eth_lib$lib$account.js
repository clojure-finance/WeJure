shadow$provide.module$node_modules$eth_lib$lib$account=function(global,require,module,exports){var Buffer=require("module$node_modules$buffer$index").Buffer;const Bytes=require("module$node_modules$eth_lib$lib$bytes"),Nat=require("module$node_modules$eth_lib$lib$nat");global=require("module$node_modules$elliptic$lib$elliptic");require("module$node_modules$eth_lib$lib$rlp");const secp256k1=new global.ec("secp256k1"),{keccak256,keccak256s}=require("module$node_modules$eth_lib$lib$hash"),toChecksum=
address=>{const addressHash=keccak256s(address.slice(2));let checksumAddress="0x";for(let i=0;40>i;i++)checksumAddress+=7<parseInt(addressHash[i+2],16)?address[i+2].toUpperCase():address[i+2];return checksumAddress},fromPrivate=privateKey=>{var buffer=new Buffer(privateKey.slice(2),"hex");buffer="0x"+secp256k1.keyFromPrivate(buffer).getPublic(!1,"hex").slice(2);buffer=keccak256(buffer);return{address:toChecksum("0x"+buffer.slice(-40)),privateKey}},encodeSignature=([v,r,s])=>Bytes.flatten([r,s,v]),
decodeSignature=hex=>[Bytes.slice(64,Bytes.length(hex),hex),Bytes.slice(0,32,hex),Bytes.slice(32,64,hex)];require=addToV=>(hash,privateKey)=>{hash=secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2),"hex")).sign(new Buffer(hash.slice(2),"hex"),{canonical:!0});return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV+hash.recoveryParam)),Bytes.pad(32,Bytes.fromNat("0x"+hash.r.toString(16))),Bytes.pad(32,Bytes.fromNat("0x"+hash.s.toString(16)))])};global=require(27);module.exports={create:entropy=>
{entropy=keccak256(Bytes.concat(Bytes.random(32),entropy||Bytes.random(32)));entropy=Bytes.concat(Bytes.concat(Bytes.random(32),entropy),Bytes.random(32));entropy=keccak256(entropy);return fromPrivate(entropy)},toChecksum,fromPrivate,sign:global,makeSigner:require,recover:(hash,signature)=>{signature=decodeSignature(signature);signature={v:Bytes.toNumber(signature[0]),r:signature[1].slice(2),s:signature[2].slice(2)};hash="0x"+secp256k1.recoverPubKey(new Buffer(hash.slice(2),"hex"),signature,2>signature.v?
signature.v:1-signature.v%2).encode("hex",!1).slice(2);hash=keccak256(hash);return toChecksum("0x"+hash.slice(-40))},encodeSignature,decodeSignature}}
//# sourceMappingURL=module$node_modules$eth_lib$lib$account.js.map
