{
"version":3,
"file":"module$node_modules$web3_core_helpers$lib$formatters.js",
"lineCount":16,
"mappings":"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",
"sources":["node_modules/web3-core-helpers/lib/formatters.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$web3_core_helpers$lib$formatters\"] = function(global,require,module,exports) {\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\"use strict\";\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n/**\n * Will format the given storage key array values to hex strings.\n *\n * @method inputStorageKeysFormatter\n *\n * @param {Array<Number|String|BN|BigNumber>} keys\n *\n * @returns {Array<String>}\n */\nvar inputStorageKeysFormatter = function (keys) {\n    return keys.map(utils.numberToHex);\n};\n/**\n * Will format the given proof response from the node.\n *\n * @method outputProofFormatter\n *\n * @param {object} proof\n *\n * @returns {object}\n */\nvar outputProofFormatter = function (proof) {\n    proof.address = utils.toChecksumAddress(proof.address);\n    proof.nonce = utils.hexToNumberString(proof.nonce);\n    proof.balance = utils.hexToNumberString(proof.balance);\n    return proof;\n};\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n *\n * @param {String|Number|BigNumber|BN} number\n *\n * @returns {BN} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n/**\n * Returns true if the given blockNumber is 'latest', 'pending', or 'earliest.\n *\n * @method isPredefinedBlockNumber\n *\n * @param {String} blockNumber\n *\n * @returns {Boolean}\n */\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n/**\n * Returns the given block number as hex string or does return the defaultBlock property of the current module\n *\n * @method inputDefaultBlockNumberFormatter\n *\n * @param {String|Number|BN|BigNumber} blockNumber\n *\n * @returns {String}\n */\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return inputBlockNumberFormatter(this.defaultBlock);\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n/**\n * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'genesis'\n *\n * @param {String|Number|BN|BigNumber} blockNumber\n *\n * @returns {String}\n */\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    }\n    if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    if (blockNumber === 'genesis') {\n        return '0x0';\n    }\n    return (utils.isHexStrict(blockNumber)) ? ((typeof blockNumber === 'string') ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options) {\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n    if (options.data && !options.data.startsWith('0x')) {\n        options.data = '0x' + options.data;\n    }\n    if (options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n    if (options.maxPriorityFeePerGas || options.maxFeePerGas) {\n        delete options.gasPrice;\n    }\n    ['gasPrice', 'gas', 'value', 'maxPriorityFeePerGas', 'maxFeePerGas', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function (key) {\n        options[key] = utils.numberToHex(options[key]);\n    });\n    return options;\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar inputCallFormatter = function (options) {\n    options = _txInputFormatter(options);\n    var from = options.from || (this ? this.defaultAccount : null);\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n    return options;\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n */\nvar inputTransactionFormatter = function (options) {\n    options = _txInputFormatter(options);\n    // check from, only if not number, or object\n    if (!(typeof options.from === 'number') && !(!!options.from && typeof options.from === 'object')) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n        if (!options.from && !(typeof options.from === 'number')) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n        options.from = inputAddressFormatter(options.from);\n    }\n    return options;\n};\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n */\nvar outputTransactionFormatter = function (tx) {\n    if (tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if (tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    if (tx.gasPrice)\n        tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    if (tx.maxFeePerGas)\n        tx.maxFeePerGas = outputBigNumberFormatter(tx.maxFeePerGas);\n    if (tx.maxPriorityFeePerGas)\n        tx.maxPriorityFeePerGas = outputBigNumberFormatter(tx.maxPriorityFeePerGas);\n    if (tx.type)\n        tx.type = utils.hexToNumber(tx.type);\n    tx.value = outputBigNumberFormatter(tx.value);\n    if (tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    }\n    else {\n        tx.to = null; // set to `null` if invalid address\n    }\n    if (tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n    return tx;\n};\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n */\nvar outputTransactionReceiptFormatter = function (receipt) {\n    if (typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: ' + receipt);\n    }\n    if (receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if (receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n    if (Array.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n    if (receipt.effectiveGasPrice) {\n        receipt.effectiveGasPrice = utils.hexToNumber(receipt.effectiveGasPrice);\n    }\n    if (receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n    if (typeof receipt.status !== 'undefined' && receipt.status !== null) {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n    return receipt;\n};\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n */\nvar outputBlockFormatter = function (block) {\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n    if (block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if (block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n    if (Array.isArray(block.transactions)) {\n        block.transactions.forEach(function (item) {\n            if (!(typeof item === 'string'))\n                return outputTransactionFormatter(item);\n        });\n    }\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n    if (block.baseFeePerGas)\n        block.baseFeePerGas = utils.hexToNumber(block.baseFeePerGas);\n    return block;\n};\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n */\nvar inputLogFormatter = function (options) {\n    var toTopic = function (value) {\n        if (value === null || typeof value === 'undefined')\n            return null;\n        value = String(value);\n        if (value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n    if (options === undefined)\n        options = {};\n    // If options !== undefined, don't blow out existing data\n    if (options.fromBlock === undefined)\n        options = { ...options, fromBlock: 'latest' };\n    if (options.fromBlock || options.fromBlock === 0)\n        options.fromBlock = inputBlockNumberFormatter(options.fromBlock);\n    if (options.toBlock || options.toBlock === 0)\n        options.toBlock = inputBlockNumberFormatter(options.toBlock);\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function (topic) {\n        return (Array.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n    toTopic = null;\n    if (options.address) {\n        options.address = (Array.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n    return options;\n};\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n */\nvar outputLogFormatter = function (log) {\n    // generate a custom log id\n    if (typeof log.blockHash === 'string' &&\n        typeof log.transactionHash === 'string' &&\n        typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x', '') + log.transactionHash.replace('0x', '') + log.logIndex.replace('0x', ''));\n        log.id = 'log_' + shaId.replace('0x', '').substr(0, 8);\n    }\n    else if (!log.id) {\n        log.id = null;\n    }\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n    return log;\n};\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n */\nvar inputPostFormatter = function (post) {\n    // post.payload = utils.toHex(post.payload);\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n    // fallback\n    if (!Array.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n    // format the following options\n    post.topics = post.topics.map(function (topic) {\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n    return post;\n};\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function (post) {\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function (topic) {\n        return utils.toUtf8(topic);\n    });\n    return post;\n};\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    }\n    else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x', '');\n    }\n    throw new Error(`Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`);\n};\nvar outputSyncingFormatter = function (result) {\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n    return result;\n};\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    inputStorageKeysFormatter: inputStorageKeysFormatter,\n    outputProofFormatter: outputProofFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","utils","Iban","outputBigNumberFormatter","number","toBN","toString","inputBlockNumberFormatter","blockNumber","undefined","isHexStrict","toLowerCase","numberToHex","_txInputFormatter","options","to","inputAddressFormatter","data","input","Error","startsWith","isHex","gas","gasLimit","maxPriorityFeePerGas","maxFeePerGas","gasPrice","filter","key","forEach","outputTransactionFormatter","tx","hexToNumber","transactionIndex","nonce","type","value","isAddress","toChecksumAddress","from","outputLogFormatter","log","blockHash","transactionHash","logIndex","shaId","sha3","replace","id","substr","address","iban","isValid","isDirect","toAddress","inputDefaultBlockNumberFormatter","defaultBlock","inputCallFormatter","defaultAccount","inputTransactionFormatter","inputPostFormatter","post","ttl","workToProve","priority","Array","isArray","topics","map","topic","indexOf","fromUtf8","inputLogFormatter","toTopic","String","fromBlock","toBlock","addr","inputSignFormatter","utf8ToHex","inputStorageKeysFormatter","keys","outputProofFormatter","proof","hexToNumberString","balance","outputTransactionReceiptFormatter","receipt","cumulativeGasUsed","gasUsed","logs","effectiveGasPrice","contractAddress","status","parseInt","outputBlockFormatter","block","size","timestamp","difficulty","totalDifficulty","transactions","item","miner","baseFeePerGas","outputPostFormatter","expiry","sent","workProved","toUtf8","outputSyncingFormatter","result","startingBlock","currentBlock","highestBlock","knownStates","pulledStates"]
}
