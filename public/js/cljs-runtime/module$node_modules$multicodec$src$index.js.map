{
"version":3,
"file":"module$node_modules$multicodec$src$index.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,wCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACrG,IAAIC,OAASH,OAAA,CAAQ,kCAAR,CAAkBG,CAAAA,MAY/B,aAEA,OAAMC,OAASJ,OAAA,CAAQ,kCAAR,CAAf,CACMK,SAAWL,OAAA,CAAQ,8CAAR,CADjB,CAEMM,sBAAwBN,OAAA,CAAQ,iDAAR,CAF9B,CAGMO,KAAOP,OAAA,CAAQ,yCAAR,CAEbE,QAAA,CAAUD,MAAOC,CAAAA,OASjBA,QAAQM,CAAAA,SAAR,CAAoB,CAACC,mBAAD,CAAsBC,IAAtB,CAAAC,EAA+B,CAGjD,GAAIR,MAAOS,CAAAA,QAAP,CAAgBH,mBAAhB,CAAJ,CACEI,mBAAA;AAASN,IAAKO,CAAAA,kBAAL,CAAwBL,mBAAxB,CADX,KAGE,IAAIH,qBAAA,CAAsBG,mBAAtB,CAAJ,CACEI,mBAAA,CAASP,qBAAA,CAAsBG,mBAAtB,CADX,KAGE,MAAUM,MAAJ,CAAU,2BAAV,CAAN,CAGJ,MAAOZ,OAAOa,CAAAA,MAAP,CAAc,CAACH,mBAAD,CAASH,IAAT,CAAd,CAZ0C,CAqBnDR,QAAQe,CAAAA,QAAR,CAAoBP,IAADQ,EAAU,CAC3Bd,MAAOe,CAAAA,MAAP,CAAcT,IAAd,CACA,OAAOA,KAAKU,CAAAA,KAAL,CAAWhB,MAAOe,CAAAA,MAAOE,CAAAA,KAAzB,CAFoB,CAU7BnB,QAAQoB,CAAAA,QAAR,CAAoBC,YAADC,EAAkB,CAC7BC,YAAAA,CAAOrB,MAAOe,CAAAA,MAAP,CAAcI,YAAd,CACb,OAAMG,UAAYrB,QAASsB,CAAAA,GAAT,CAAaF,YAAb,CAClB,IAAkBG,IAAAA,EAAlB,GAAIF,SAAJ,CACE,KAAUX,MAAJ,CAAW,QAAOU,YAAP,YAAX,CAAN;AAEF,MAAOC,UAN4B,CAcrCxB,QAAQ2B,CAAAA,OAAR,CAAmBC,KAADC,EACT1B,QAASsB,CAAAA,GAAT,CAAaG,KAAb,CAQT5B,QAAQ8B,CAAAA,SAAR,CAAqBC,IAADC,EAAU,CAC5B,MAAMT,KAAOnB,qBAAA,CAAsB2B,IAAtB,CACb,IAAaL,IAAAA,EAAb,GAAIH,IAAJ,CACE,KAAUV,MAAJ,CAAU,SAAV,CAAsBkB,IAAtB,CAA6B,aAA7B,CAAN,CAEF,MAAO1B,KAAK4B,CAAAA,kBAAL,CAAwBV,IAAxB,CAAA,CAA8B,CAA9B,CALqB,CAa9BvB,QAAQkC,CAAAA,OAAR,CAAmBb,YAADc,EACTjC,MAAOe,CAAAA,MAAP,CAAcI,YAAd,CAQTrB,QAAQoC,CAAAA,aAAR,CAAyBZ,SAADa,EAAe,CACrC,MAAMd,KAAOnB,qBAAA,CAAsBoB,SAAtB,CACb,IAAaE,IAAAA,EAAb,GAAIH,IAAJ,CACE,KAAUV,MAAJ,CAAU,SAAV,CAAsBW,SAAtB,CAAkC,aAAlC,CAAN,CAEF,MAAOD,KAL8B,CAavCvB,QAAQsC,CAAAA,SAAR,CAAqBf,IAADgB,EACXrC,MAAOsC,CAAAA,MAAP,CAAcjB,IAAd,CAIHkB,OAAAA,CAAY3C,OAAA,CAAQ,8CAAR,CAClB4C;MAAOC,CAAAA,MAAP,CAAc3C,OAAd,CAAuByC,MAAvB,CAGAzC,QAAQ4C,CAAAA,KAAR,CAAgB9C,OAAA,CAAQ,0CAAR,CA/HqF;",
"sources":["node_modules/multicodec/src/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$multicodec$src$index\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict'\n\nconst varint = require('varint')\nconst intTable = require('./int-table')\nconst codecNameToCodeVarint = require('./varint-table')\nconst util = require('./util')\n\nexports = module.exports\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {string|number} multicodecStrOrCode\n * @param {Buffer} data\n * @returns {Buffer}\n */\nexports.addPrefix = (multicodecStrOrCode, data) => {\n  let prefix\n\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\n    prefix = util.varintBufferEncode(multicodecStrOrCode)\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode]\n    } else {\n      throw new Error('multicodec not recognized')\n    }\n  }\n  return Buffer.concat([prefix, data])\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Buffer} data\n * @returns {Buffer}\n */\nexports.rmPrefix = (data) => {\n  varint.decode(data)\n  return data.slice(varint.decode.bytes)\n}\n\n/**\n * Get the codec of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {string}\n */\nexports.getCodec = (prefixedData) => {\n  const code = varint.decode(prefixedData)\n  const codecName = intTable.get(code)\n  if (codecName === undefined) {\n    throw new Error(`Code ${code} not found`)\n  }\n  return codecName\n}\n\n/**\n * Get the name of the codec.\n * @param {number} codec\n * @returns {string}\n */\nexports.getName = (codec) => {\n  return intTable.get(codec)\n}\n\n/**\n * Get the code of the codec\n * @param {string} name\n * @returns {number}\n */\nexports.getNumber = (name) => {\n  const code = codecNameToCodeVarint[name]\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found')\n  }\n  return util.varintBufferDecode(code)[0]\n}\n\n/**\n * Get the code of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {number}\n */\nexports.getCode = (prefixedData) => {\n  return varint.decode(prefixedData)\n}\n\n/**\n * Get the code as varint of a codec name.\n * @param {string} codecName\n * @returns {Buffer}\n */\nexports.getCodeVarint = (codecName) => {\n  const code = codecNameToCodeVarint[codecName]\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found')\n  }\n  return code\n}\n\n/**\n * Get the varint of a code.\n * @param {Number} code\n * @returns {Array.<number>}\n */\nexports.getVarint = (code) => {\n  return varint.encode(code)\n}\n\n// Make the constants top-level constants\nconst constants = require('./constants')\nObject.assign(exports, constants)\n\n// Human friendly names for printing, e.g. in error messages\nexports.print = require('./print')\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","varint","intTable","codecNameToCodeVarint","util","addPrefix","multicodecStrOrCode","data","exports.addPrefix","isBuffer","prefix","varintBufferEncode","Error","concat","rmPrefix","exports.rmPrefix","decode","slice","bytes","getCodec","prefixedData","exports.getCodec","code","codecName","get","undefined","getName","codec","exports.getName","getNumber","name","exports.getNumber","varintBufferDecode","getCode","exports.getCode","getCodeVarint","exports.getCodeVarint","getVarint","exports.getVarint","encode","constants","Object","assign","print"]
}
