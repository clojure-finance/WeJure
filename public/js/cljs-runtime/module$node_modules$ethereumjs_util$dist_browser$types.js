shadow$provide.module$node_modules$ethereumjs_util$dist_browser$types=function(global,require,module,exports){function bnToUnpaddedBuffer(value){return(0,bytes_1.unpadBuffer)(value.toArrayLike(Buffer))}var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});exports.toType=exports.TypeOutput=exports.bnToRlp=exports.bnToUnpaddedBuffer=exports.bnToHex=void 0;var externals_1=require("module$node_modules$ethereumjs_util$dist_browser$externals"),
internal_1=require("module$node_modules$ethereumjs_util$dist_browser$internal"),bytes_1=require("module$node_modules$ethereumjs_util$dist_browser$bytes");exports.bnToHex=function(value){return"0x".concat(value.toString(16))};exports.bnToUnpaddedBuffer=bnToUnpaddedBuffer;exports.bnToRlp=function(value){return bnToUnpaddedBuffer(value)};var TypeOutput;(function(TypeOutput){TypeOutput[TypeOutput.Number=0]="Number";TypeOutput[TypeOutput.BN=1]="BN";TypeOutput[TypeOutput.Buffer=2]="Buffer";TypeOutput[TypeOutput.PrefixedHexString=
3]="PrefixedHexString"})(TypeOutput=exports.TypeOutput||(exports.TypeOutput={}));exports.toType=function(input,outputType){if(null===input)return null;if(void 0!==input){if("string"===typeof input&&!(0,internal_1.isHexString)(input))throw Error("A string must be provided with a 0x-prefix, given: ".concat(input));if("number"===typeof input&&!Number.isSafeInteger(input))throw Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");input=(0,bytes_1.toBuffer)(input);
if(outputType===TypeOutput.Buffer)return input;if(outputType===TypeOutput.BN)return new externals_1.BN(input);if(outputType===TypeOutput.Number){outputType=new externals_1.BN(input);input=new externals_1.BN(Number.MAX_SAFE_INTEGER.toString());if(outputType.gt(input))throw Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");return outputType.toNumber()}return"0x".concat(input.toString("hex"))}}}
//# sourceMappingURL=module$node_modules$ethereumjs_util$dist_browser$types.js.map
