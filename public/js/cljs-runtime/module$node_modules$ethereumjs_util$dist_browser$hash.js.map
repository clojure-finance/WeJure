{
"version":3,
"file":"module$node_modules$ethereumjs_util$dist_browser$hash.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/ethereumjs-util/dist.browser/hash.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethereumjs_util$dist_browser$hash\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\nvar createHash = require('create-hash');\nvar externals_1 = require(\"./externals\");\nvar bytes_1 = require(\"./bytes\");\nvar helpers_1 = require(\"./helpers\");\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\nvar keccak = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    (0, helpers_1.assertIsBuffer)(a);\n    switch (bits) {\n        case 224: {\n            return (0, keccak_1.keccak224)(a);\n        }\n        case 256: {\n            return (0, keccak_1.keccak256)(a);\n        }\n        case 384: {\n            return (0, keccak_1.keccak384)(a);\n        }\n        case 512: {\n            return (0, keccak_1.keccak512)(a);\n        }\n        default: {\n            throw new Error(\"Invald algorithm: keccak\".concat(bits));\n        }\n    }\n};\nexports.keccak = keccak;\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\nvar keccak256 = function (a) {\n    return (0, exports.keccak)(a);\n};\nexports.keccak256 = keccak256;\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nvar keccakFromString = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    (0, helpers_1.assertIsString)(a);\n    var buf = Buffer.from(a, 'utf8');\n    return (0, exports.keccak)(buf, bits);\n};\nexports.keccakFromString = keccakFromString;\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nvar keccakFromHexString = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    (0, helpers_1.assertIsHexString)(a);\n    return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\nexports.keccakFromHexString = keccakFromHexString;\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\nvar keccakFromArray = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    (0, helpers_1.assertIsArray)(a);\n    return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\nexports.keccakFromArray = keccakFromArray;\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\nvar _sha256 = function (a) {\n    a = (0, bytes_1.toBuffer)(a);\n    return createHash('sha256').update(a).digest();\n};\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\nvar sha256 = function (a) {\n    (0, helpers_1.assertIsBuffer)(a);\n    return _sha256(a);\n};\nexports.sha256 = sha256;\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\nvar sha256FromString = function (a) {\n    (0, helpers_1.assertIsString)(a);\n    return _sha256(a);\n};\nexports.sha256FromString = sha256FromString;\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\nvar sha256FromArray = function (a) {\n    (0, helpers_1.assertIsArray)(a);\n    return _sha256(a);\n};\nexports.sha256FromArray = sha256FromArray;\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar _ripemd160 = function (a, padded) {\n    a = (0, bytes_1.toBuffer)(a);\n    var hash = createHash('rmd160').update(a).digest();\n    if (padded === true) {\n        return (0, bytes_1.setLengthLeft)(hash, 32);\n    }\n    else {\n        return hash;\n    }\n};\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar ripemd160 = function (a, padded) {\n    (0, helpers_1.assertIsBuffer)(a);\n    return _ripemd160(a, padded);\n};\nexports.ripemd160 = ripemd160;\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar ripemd160FromString = function (a, padded) {\n    (0, helpers_1.assertIsString)(a);\n    return _ripemd160(a, padded);\n};\nexports.ripemd160FromString = ripemd160FromString;\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar ripemd160FromArray = function (a, padded) {\n    (0, helpers_1.assertIsArray)(a);\n    return _ripemd160(a, padded);\n};\nexports.ripemd160FromArray = ripemd160FromArray;\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nvar rlphash = function (a) {\n    return (0, exports.keccak)(externals_1.rlp.encode(a));\n};\nexports.rlphash = rlphash;\n//# sourceMappingURL=hash.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Object","defineProperty","value","rlphash","ripemd160FromArray","ripemd160FromString","ripemd160","sha256FromArray","sha256FromString","sha256","keccakFromArray","keccakFromHexString","keccakFromString","keccak256","keccak","keccak_1","createHash","externals_1","bytes_1","helpers_1","a","bits","assertIsBuffer","keccak224","keccak384","keccak512","Error","concat","assertIsString","buf","from","assertIsHexString","toBuffer","assertIsArray","_sha256","update","digest","_ripemd160","padded","hash","setLengthLeft","rlp","encode"]
}
