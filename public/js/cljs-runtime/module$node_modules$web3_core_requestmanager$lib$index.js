shadow$provide.module$node_modules$web3_core_requestmanager$lib$index=function(global,require,module,exports){const {callbackify}=require("module$node_modules$web3_core_requestmanager$node_modules$util$util");var errors=require("module$node_modules$web3_core_helpers$lib$index").errors,Jsonrpc=require("module$node_modules$web3_core_requestmanager$lib$jsonrpc");global=require("module$node_modules$web3_core_requestmanager$lib$batch");exports=require("module$node_modules$web3_core_requestmanager$lib$givenProvider");
var RequestManager=function RequestManager(provider,net){this.provider=null;this.providers=RequestManager.providers;this.setProvider(provider,net);this.subscriptions=new Map};RequestManager.givenProvider=exports;RequestManager.providers={WebsocketProvider:require("module$node_modules$web3_providers_ws$lib$index"),HttpProvider:require("module$node_modules$web3_providers_http$lib$index"),IpcProvider:require("module$node_modules$web3_providers_ipc$lib$index")};RequestManager.prototype.setProvider=function(provider,
net){var _this=this;if(provider&&"string"===typeof provider&&this.providers)if(/^http(s)?:\/\//i.test(provider))provider=new this.providers.HttpProvider(provider);else if(/^ws(s)?:\/\//i.test(provider))provider=new this.providers.WebsocketProvider(provider);else if(provider&&"object"===typeof net&&"function"===typeof net.connect)provider=new this.providers.IpcProvider(provider,net);else if(provider)throw Error("Can't autodetect provider for \""+provider+'"');this.provider&&this.provider.connected&&
this.clearSubscriptions();if((this.provider=provider||null)&&this.provider.on){if("function"===typeof provider.request)this.provider.on("message",function(payload){payload&&"eth_subscription"===payload.type&&payload.data&&(payload=payload.data,payload.subscription&&_this.subscriptions.has(payload.subscription)&&_this.subscriptions.get(payload.subscription).callback(null,payload.result))});else this.provider.on("data",function(result,deprecatedResult){result=result||deprecatedResult;result.method&&
result.params&&result.params.subscription&&_this.subscriptions.has(result.params.subscription)&&_this.subscriptions.get(result.params.subscription).callback(null,result.params.result)});this.provider.on("connect",function(){_this.subscriptions.forEach(function(subscription){subscription.subscription.resubscribe()})});this.provider.on("error",function error(error){_this.subscriptions.forEach(function(subscription){subscription.callback(error)})});provider=function(event){if(!_this._isCleanCloseEvent(event)||
_this._isIpcCloseError(event))_this.subscriptions.forEach(function(subscription){subscription.callback(errors.ConnectionCloseError(event));_this.subscriptions.delete(subscription.subscription.id)}),_this.provider&&_this.provider.emit&&_this.provider.emit("error",errors.ConnectionCloseError(event));_this.provider&&_this.provider.emit&&_this.provider.emit("end",event)};this.provider.on("close",provider);this.provider.on("disconnect",provider)}};RequestManager.prototype.send=function(data,callback){callback=
callback||function(){};if(!this.provider)return callback(errors.InvalidProvider());const {method,params}=data;data=Jsonrpc.toPayload(method,params);const jsonrpcResultCallback=this._jsonrpcResultCallback(callback,data);if(this.provider.request)callbackify(this.provider.request.bind(this.provider))({method,params},callback);else if(this.provider.sendAsync)this.provider.sendAsync(data,jsonrpcResultCallback);else if(this.provider.send)this.provider.send(data,jsonrpcResultCallback);else throw Error("Provider does not have a request or send method to use.");
};RequestManager.prototype.sendBatch=function(data,callback){if(!this.provider)return callback(errors.InvalidProvider());data=Jsonrpc.toBatchPayload(data);this.provider[this.provider.sendAsync?"sendAsync":"send"](data,function(err,results){if(err)return callback(err);if(!Array.isArray(results))return callback(errors.InvalidResponse(results));callback(null,results)})};RequestManager.prototype.addSubscription=function(subscription,callback){if(this.provider.on)this.subscriptions.set(subscription.id,
{callback,subscription});else throw Error("The provider doesn't support subscriptions: "+this.provider.constructor.name);};RequestManager.prototype.removeSubscription=function(id,callback){if(this.subscriptions.has(id)){var type=this.subscriptions.get(id).subscription.options.type;this.subscriptions.delete(id);this.send({method:type+"_unsubscribe",params:[id]},callback)}else"function"===typeof callback&&callback(null)};RequestManager.prototype.clearSubscriptions=function(keepIsSyncing){try{var _this=
this;0<this.subscriptions.size&&this.subscriptions.forEach(function(value,id){keepIsSyncing&&"syncing"===value.name||_this.removeSubscription(id)});this.provider.reset&&this.provider.reset();return!0}catch(e){throw Error(`Error while clearing subscriptions: ${e}`);}};RequestManager.prototype._isCleanCloseEvent=function(event){return"object"===typeof event&&([1E3].includes(event.code)||!0===event.wasClean)};RequestManager.prototype._isIpcCloseError=function(event){return"boolean"===typeof event&&event};
RequestManager.prototype._jsonrpcResultCallback=function(callback,payload){return function(err,result){if(result&&result.id&&payload.id!==result.id)return callback(Error(`Wrong response id ${result.id} (expected: ${payload.id}) in ${JSON.stringify(payload)}`));if(err)return callback(err);if(result&&result.error)return callback(errors.ErrorResponse(result));if(!Jsonrpc.isValidResponse(result))return callback(errors.InvalidResponse(result));callback(null,result.result)}};module.exports={Manager:RequestManager,
BatchManager:global}}
//# sourceMappingURL=module$node_modules$web3_core_requestmanager$lib$index.js.map
