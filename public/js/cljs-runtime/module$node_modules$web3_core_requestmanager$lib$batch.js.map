{
"version":3,
"file":"module$node_modules$web3_core_requestmanager$lib$batch.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAuBnH,IAAIC,QAAUH,OAAA,CAAQ,0DAAR,CAAd,CACII,OAASJ,OAAA,CAAQ,iDAAR,CAA6BI,CAAAA,MACtCC,OAAAA,CAAQA,QAAS,CAACC,cAAD,CAAiB,CAClC,IAAKA,CAAAA,cAAL,CAAsBA,cACtB,KAAKC,CAAAA,QAAL,CAAgB,EAFkB,CAUtCF,OAAMG,CAAAA,SAAUC,CAAAA,GAAhB,CAAsBC,QAAS,CAACC,OAAD,CAAU,CACrC,IAAKJ,CAAAA,QAASK,CAAAA,IAAd,CAAmBD,OAAnB,CADqC,CAQzCN,OAAMG,CAAAA,SAAUK,CAAAA,OAAhB,CAA0BC,QAAS,EAAG,CAClC,IAAIP,SAAW,IAAKA,CAAAA,QAApB,CACIQ,cAAgB,IAAKC,CAAAA,cAAeC,CAAAA,IAApB,CAAyB,IAAzB,CACpB;IAAKX,CAAAA,cAAeY,CAAAA,SAApB,CAA8BX,QAA9B,CAAwC,QAAS,CAACY,YAAD,CAAMC,OAAN,CAAe,CAC5DA,OAAA,CAAUL,aAAA,CAAcK,OAAd,CACVb,SAASc,CAAAA,GAAT,CAAa,QAAS,CAACV,OAAD,CAAUW,KAAV,CAAiB,CACnC,MAAOF,QAAA,CAAQE,KAAR,CAAP,EAAyB,EADU,CAAvC,CAEGC,CAAAA,OAFH,CAEW,QAAS,CAACC,MAAD,CAASF,KAAT,CAAgB,CAChC,GAAIf,QAAA,CAASe,KAAT,CAAgBG,CAAAA,QAApB,CAA8B,CAC1B,GAAID,MAAJ,EAAcA,MAAOE,CAAAA,KAArB,CACI,MAAOnB,SAAA,CAASe,KAAT,CAAgBG,CAAAA,QAAhB,CAAyBrB,MAAOuB,CAAAA,aAAP,CAAqBH,MAArB,CAAzB,CAEX,IAAI,CAACrB,OAAQyB,CAAAA,eAAR,CAAwBJ,MAAxB,CAAL,CACI,MAAOjB,SAAA,CAASe,KAAT,CAAgBG,CAAAA,QAAhB,CAAyBrB,MAAOyB,CAAAA,eAAP,CAAuBL,MAAvB,CAAzB,CAEX,IAAI,CACAjB,QAAA,CAASe,KAAT,CAAgBG,CAAAA,QAAhB,CAAyB,IAAzB,CAA+BlB,QAAA,CAASe,KAAT,CAAgBQ,CAAAA,MAAhB,CAAyBvB,QAAA,CAASe,KAAT,CAAgBQ,CAAAA,MAAhB,CAAuBN,MAAOA,CAAAA,MAA9B,CAAzB;AAAiEA,MAAOA,CAAAA,MAAvG,CADA,CAGJ,MAAOL,GAAP,CAAY,CACRZ,QAAA,CAASe,KAAT,CAAgBG,CAAAA,QAAhB,CAAyBN,GAAzB,CADQ,CAVc,CADE,CAFpC,CAF4D,CAAhE,CAHkC,CA0BtCd,OAAMG,CAAAA,SAAUQ,CAAAA,cAAhB,CAAiCe,QAAS,CAACC,SAAD,CAAY,CAClD,MAAyBC,CAAjBD,SAAiBC,EAAJ,EAAIA,EAAAA,IAAlB,CAAuB,CAACC,CAAD,CAAIC,CAAJ,CAAA,EAAUD,CAAEE,CAAAA,EAAZ,CAAiBD,CAAEC,CAAAA,EAA1C,CAD2C,CAGtDnC,OAAOC,CAAAA,OAAP,CAAiBG,MAxEkG;",
"sources":["node_modules/web3-core-requestmanager/lib/batch.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$web3_core_requestmanager$lib$batch\"] = function(global,require,module,exports) {\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file batch.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\"use strict\";\nvar Jsonrpc = require('./jsonrpc');\nvar errors = require('web3-core-helpers').errors;\nvar Batch = function (requestManager) {\n    this.requestManager = requestManager;\n    this.requests = [];\n};\n/**\n * Should be called to add create new request to batch request\n *\n * @method add\n * @param {Object} jsonrpc requet object\n */\nBatch.prototype.add = function (request) {\n    this.requests.push(request);\n};\n/**\n * Should be called to execute batch request\n *\n * @method execute\n */\nBatch.prototype.execute = function () {\n    var requests = this.requests;\n    var sortResponses = this._sortResponses.bind(this);\n    this.requestManager.sendBatch(requests, function (err, results) {\n        results = sortResponses(results);\n        requests.map(function (request, index) {\n            return results[index] || {};\n        }).forEach(function (result, index) {\n            if (requests[index].callback) {\n                if (result && result.error) {\n                    return requests[index].callback(errors.ErrorResponse(result));\n                }\n                if (!Jsonrpc.isValidResponse(result)) {\n                    return requests[index].callback(errors.InvalidResponse(result));\n                }\n                try {\n                    requests[index].callback(null, requests[index].format ? requests[index].format(result.result) : result.result);\n                }\n                catch (err) {\n                    requests[index].callback(err);\n                }\n            }\n        });\n    });\n};\n// Sort responses\nBatch.prototype._sortResponses = function (responses) {\n    return (responses || []).sort((a, b) => a.id - b.id);\n};\nmodule.exports = Batch;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Jsonrpc","errors","Batch","requestManager","requests","prototype","add","Batch.prototype.add","request","push","execute","Batch.prototype.execute","sortResponses","_sortResponses","bind","sendBatch","err","results","map","index","forEach","result","callback","error","ErrorResponse","isValidResponse","InvalidResponse","format","Batch.prototype._sortResponses","responses","sort","a","b","id"]
}
