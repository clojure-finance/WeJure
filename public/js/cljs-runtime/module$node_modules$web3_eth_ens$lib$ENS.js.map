{
"version":3,
"file":"module$node_modules$web3_eth_ens$lib$ENS.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/web3-eth-ens/lib/ENS.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$web3_eth_ens$lib$ENS\"] = function(global,require,module,exports) {\n/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file ENS.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */\n\"use strict\";\nvar config = require('./config');\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar Registry = require('./contracts/Registry');\nvar ResolverMethodHandler = require('./lib/ResolverMethodHandler');\nvar contenthash = require('./lib/contentHash');\n/**\n * Constructs a new instance of ENS\n *\n * @param {Eth} eth\n *\n * @constructor\n */\nfunction ENS(eth) {\n    this.eth = eth;\n    var registryAddress = null;\n    this._detectedAddress = null;\n    this._lastSyncCheck = null;\n    Object.defineProperty(this, 'registry', {\n        get: function () {\n            return new Registry(this);\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'resolverMethodHandler', {\n        get: function () {\n            return new ResolverMethodHandler(this.registry);\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'registryAddress', {\n        get: function () {\n            return registryAddress;\n        },\n        set: function (value) {\n            if (value === null) {\n                registryAddress = value;\n                return;\n            }\n            registryAddress = formatters.inputAddressFormatter(value);\n        },\n        enumerable: true\n    });\n}\n/**\n * Returns true if the given interfaceId is supported and otherwise false.\n *\n * @method supportsInterface\n *\n * @param {string} name\n * @param {string} interfaceId\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nENS.prototype.supportsInterface = function (name, interfaceId, callback) {\n    return this.getResolver(name).then(function (resolver) {\n        if (!utils.isHexStrict(interfaceId)) {\n            interfaceId = utils.sha3(interfaceId).slice(0, 10);\n        }\n        return resolver.methods.supportsInterface(interfaceId).call(callback);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        throw error;\n    });\n};\n/**\n * Returns the Resolver by the given address\n *\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\n *\n * @method resolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nENS.prototype.resolver = function (name, callback) {\n    return this.registry.resolver(name, callback);\n};\n/**\n * Returns the Resolver by the given address\n *\n * @method getResolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nENS.prototype.getResolver = function (name, callback) {\n    return this.registry.getResolver(name, callback);\n};\n/**\n * Does set the resolver of the given name\n *\n * @method setResolver\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setResolver = function (name, address, txConfig, callback) {\n    return this.registry.setResolver(name, address, txConfig, callback);\n};\n/**\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\n *\n * @method setRecord\n *\n * @param {string} name\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {\n    return this.registry.setRecord(name, owner, resolver, ttl, txConfig, callback);\n};\n/**\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\n *\n * @method setSubnodeRecord\n *\n * @param {string} name\n * @param {string} label\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {\n    return this.registry.setSubnodeRecord(name, label, owner, resolver, ttl, txConfig, callback);\n};\n/**\n * Sets or clears an approval by the given operator.\n *\n * @method setApprovalForAll\n *\n * @param {string} operator\n * @param {boolean} approved\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {\n    return this.registry.setApprovalForAll(operator, approved, txConfig, callback);\n};\n/**\n * Returns true if the operator is approved\n *\n * @method isApprovedForAll\n *\n * @param {string} owner\n * @param {string} operator\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nENS.prototype.isApprovedForAll = function (owner, operator, callback) {\n    return this.registry.isApprovedForAll(owner, operator, callback);\n};\n/**\n * Returns true if the record exists\n *\n * @method recordExists\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nENS.prototype.recordExists = function (name, callback) {\n    return this.registry.recordExists(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setSubnodeOwner\n *\n * @param {string} name\n * @param {string} label\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {\n    return this.registry.setSubnodeOwner(name, label, address, txConfig, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method getTTL\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getTTL = function (name, callback) {\n    return this.registry.getTTL(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setTTL\n *\n * @param {string} name\n * @param {number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setTTL = function (name, ttl, txConfig, callback) {\n    return this.registry.setTTL(name, ttl, txConfig, callback);\n};\n/**\n * Returns the owner by the given name and current configured or detected Registry\n *\n * @method getOwner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getOwner = function (name, callback) {\n    return this.registry.getOwner(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setOwner\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setOwner = function (name, address, txConfig, callback) {\n    return this.registry.setOwner(name, address, txConfig, callback);\n};\n/**\n * Returns the address record associated with a name.\n *\n * @method getAddress\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getAddress = function (name, callback) {\n    return this.resolverMethodHandler.method(name, 'addr', []).call(callback);\n};\n/**\n * Sets a new address\n *\n * @method setAddress\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setAddress = function (name, address, txConfig, callback) {\n    return this.resolverMethodHandler.method(name, 'setAddr', [address]).send(txConfig, callback);\n};\n/**\n * Returns the public key\n *\n * @method getPubkey\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getPubkey = function (name, callback) {\n    return this.resolverMethodHandler.method(name, 'pubkey', [], null, callback).call(callback);\n};\n/**\n * Set the new public key\n *\n * @method setPubkey\n *\n * @param {string} name\n * @param {string} x\n * @param {string} y\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setPubkey = function (name, x, y, txConfig, callback) {\n    return this.resolverMethodHandler.method(name, 'setPubkey', [x, y]).send(txConfig, callback);\n};\n/**\n * Returns the content\n *\n * @method getContent\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getContent = function (name, callback) {\n    return this.resolverMethodHandler.method(name, 'content', []).call(callback);\n};\n/**\n * Set the content\n *\n * @method setContent\n *\n * @param {string} name\n * @param {string} hash\n * @param {function} callback\n * @param {TransactionConfig} txConfig\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setContent = function (name, hash, txConfig, callback) {\n    return this.resolverMethodHandler.method(name, 'setContent', [hash]).send(txConfig, callback);\n};\n/**\n * Returns the contenthash\n *\n * @method getContenthash\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<ContentHash>}\n */\nENS.prototype.getContenthash = function (name, callback) {\n    return this.resolverMethodHandler.method(name, 'contenthash', [], contenthash.decode).call(callback);\n};\n/**\n * Set the contenthash\n *\n * @method setContent\n *\n * @param {string} name\n * @param {string} hash\n * @param {function} callback\n * @param {TransactionConfig} txConfig\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setContenthash = function (name, hash, txConfig, callback) {\n    var encoded;\n    try {\n        encoded = contenthash.encode(hash);\n    }\n    catch (err) {\n        var error = new Error('Could not encode ' + hash + '. See docs for supported hash protocols.');\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        throw error;\n    }\n    return this.resolverMethodHandler.method(name, 'setContenthash', [encoded]).send(txConfig, callback);\n};\n/**\n * Get the multihash\n *\n * @method getMultihash\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getMultihash = function (name, callback) {\n    return this.resolverMethodHandler.method(name, 'multihash', []).call(callback);\n};\n/**\n * Set the multihash\n *\n * @method setMultihash\n *\n * @param {string} name\n * @param {string} hash\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setMultihash = function (name, hash, txConfig, callback) {\n    return this.resolverMethodHandler.method(name, 'multihash', [hash]).send(txConfig, callback);\n};\n/**\n * Checks if the current used network is synced and looks for ENS support there.\n * Throws an error if not.\n *\n * @returns {Promise<string>}\n */\nENS.prototype.checkNetwork = async function () {\n    var now = new Date() / 1000;\n    if (!this._lastSyncCheck || (now - this._lastSyncCheck) > 3600) {\n        var block = await this.eth.getBlock('latest');\n        var headAge = now - block.timestamp;\n        if (headAge > 3600) {\n            throw new Error(\"Network not synced; last block was \" + headAge + \" seconds ago\");\n        }\n        this._lastSyncCheck = now;\n    }\n    if (this.registryAddress) {\n        return this.registryAddress;\n    }\n    if (!this._detectedAddress) {\n        var networkType = await this.eth.net.getNetworkType();\n        var addr = config.addresses[networkType];\n        if (typeof addr === 'undefined') {\n            throw new Error(\"ENS is not supported on network \" + networkType);\n        }\n        this._detectedAddress = addr;\n        return this._detectedAddress;\n    }\n    return this._detectedAddress;\n};\nmodule.exports = ENS;\n\n};"],
"names":["shadow$provide","global","require","module","exports","ENS","eth","registryAddress","_lastSyncCheck","_detectedAddress","Object","defineProperty","get","Registry","enumerable","ResolverMethodHandler","registry","set","value","formatters","inputAddressFormatter","config","utils","contenthash","prototype","supportsInterface","ENS.prototype.supportsInterface","name","interfaceId","callback","getResolver","then","resolver","isHexStrict","sha3","slice","methods","call","catch","error","ENS.prototype.resolver","ENS.prototype.getResolver","setResolver","ENS.prototype.setResolver","address","txConfig","setRecord","ENS.prototype.setRecord","owner","ttl","setSubnodeRecord","ENS.prototype.setSubnodeRecord","label","setApprovalForAll","ENS.prototype.setApprovalForAll","operator","approved","isApprovedForAll","ENS.prototype.isApprovedForAll","recordExists","ENS.prototype.recordExists","setSubnodeOwner","ENS.prototype.setSubnodeOwner","getTTL","ENS.prototype.getTTL","setTTL","ENS.prototype.setTTL","getOwner","ENS.prototype.getOwner","setOwner","ENS.prototype.setOwner","getAddress","ENS.prototype.getAddress","resolverMethodHandler","method","setAddress","ENS.prototype.setAddress","send","getPubkey","ENS.prototype.getPubkey","setPubkey","ENS.prototype.setPubkey","x","y","getContent","ENS.prototype.getContent","setContent","ENS.prototype.setContent","hash","getContenthash","ENS.prototype.getContenthash","decode","setContenthash","ENS.prototype.setContenthash","encoded","encode","err","Error","getMultihash","ENS.prototype.getMultihash","setMultihash","ENS.prototype.setMultihash","checkNetwork","ENS.prototype.checkNetwork","now","Date","block","getBlock","headAge","timestamp","networkType","net","getNetworkType","addr","addresses"]
}
