{
"version":3,
"file":"module$node_modules$eth_lib$lib$account.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/eth-lib/lib/account.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$eth_lib$lib$account\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\nconst Bytes = require(\"./bytes\");\nconst Nat = require(\"./nat\");\nconst elliptic = require(\"elliptic\");\nconst rlp = require(\"./rlp\");\nconst secp256k1 = new elliptic.ec(\"secp256k1\"); // eslint-disable-line\nconst { keccak256, keccak256s } = require(\"./hash\");\n\nconst create = entropy => {\n  const innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));\n  const middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));\n  const outerHex = keccak256(middleHex);\n  return fromPrivate(outerHex);\n};\n\nconst toChecksum = address => {\n  const addressHash = keccak256s(address.slice(2));\n  let checksumAddress = \"0x\";\n  for (let i = 0; i < 40; i++) checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];\n  return checksumAddress;\n};\n\nconst fromPrivate = privateKey => {\n  const buffer = new Buffer(privateKey.slice(2), \"hex\");\n  const ecKey = secp256k1.keyFromPrivate(buffer);\n  const publicKey = \"0x\" + ecKey.getPublic(false, 'hex').slice(2);\n  const publicHash = keccak256(publicKey);\n  const address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return {\n    address: address,\n    privateKey: privateKey\n  };\n};\n\nconst encodeSignature = ([v, r, s]) => Bytes.flatten([r, s, v]);\n\nconst decodeSignature = hex => [Bytes.slice(64, Bytes.length(hex), hex), Bytes.slice(0, 32, hex), Bytes.slice(32, 64, hex)];\n\nconst makeSigner = addToV => (hash, privateKey) => {\n  const signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), \"hex\")).sign(new Buffer(hash.slice(2), \"hex\"), { canonical: true });\n  return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.r.toString(16))), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.s.toString(16)))]);\n};\n\nconst sign = makeSigner(27); // v=27|28 instead of 0|1...\n\nconst recover = (hash, signature) => {\n  const vals = decodeSignature(signature);\n  const vrs = { v: Bytes.toNumber(vals[0]), r: vals[1].slice(2), s: vals[2].slice(2) };\n  const ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), \"hex\"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that\n  const publicKey = \"0x\" + ecPublicKey.encode(\"hex\", false).slice(2);\n  const publicHash = keccak256(publicKey);\n  const address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return address;\n};\n\nmodule.exports = {\n  create,\n  toChecksum,\n  fromPrivate,\n  sign,\n  makeSigner,\n  recover,\n  encodeSignature,\n  decodeSignature\n};\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Bytes","Nat","elliptic","secp256k1","ec","keccak256","keccak256s","toChecksum","address","addressHash","slice","checksumAddress","i","parseInt","toUpperCase","fromPrivate","privateKey","buffer","publicKey","keyFromPrivate","ecKey","getPublic","publicHash","encodeSignature","v","r","s","flatten","decodeSignature","hex","length","makeSigner","addToV","hash","signature","sign","canonical","fromString","fromNumber","recoveryParam","pad","fromNat","toString","create","entropy","innerHex","concat","random","middleHex","outerHex","recover","vals","vrs","toNumber","recoverPubKey","ecPublicKey","encode"]
}
