shadow$provide.module$node_modules$ethereumjs_util$dist_browser$signature=function(global,require,module,exports){function calculateSigRecovery(v,chainId){v=(0,types_1.toType)(v,types_1.TypeOutput.BN);if(!chainId)return v.subn(27);chainId=(0,types_1.toType)(chainId,types_1.TypeOutput.BN);return v.sub(chainId.muln(2).addn(35))}function isValidSigRecovery(recovery){recovery=new externals_1.BN(recovery);return recovery.eqn(0)||recovery.eqn(1)}var Buffer=require("module$node_modules$buffer$index").Buffer;
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});exports.hashPersonalMessage=exports.isValidSignature=exports.fromRpcSig=exports.toCompactSig=exports.toRpcSig=exports.ecrecover=exports.ecsign=void 0;var secp256k1_1=require("module$node_modules$ethereum_cryptography$secp256k1"),externals_1=require("module$node_modules$ethereumjs_util$dist_browser$externals"),bytes_1=require("module$node_modules$ethereumjs_util$dist_browser$bytes"),hash_1=require("module$node_modules$ethereumjs_util$dist_browser$hash"),
helpers_1=require("module$node_modules$ethereumjs_util$dist_browser$helpers"),types_1=require("module$node_modules$ethereumjs_util$dist_browser$types");exports.ecsign=function(msgHash,privateKey,chainId){msgHash=(0,secp256k1_1.ecdsaSign)(msgHash,privateKey);privateKey=msgHash.signature;var recovery=msgHash.recid;msgHash=Buffer.from(privateKey.slice(0,32));privateKey=Buffer.from(privateKey.slice(32,64));if(!chainId||"number"===typeof chainId){if(chainId&&!Number.isSafeInteger(chainId))throw Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
return{r:msgHash,s:privateKey,v:chainId?recovery+(2*chainId+35):recovery+27}}chainId=(0,types_1.toType)(chainId,types_1.TypeOutput.BN).muln(2).addn(35).addn(recovery).toArrayLike(Buffer);return{r:msgHash,s:privateKey,v:chainId}};exports.ecrecover=function(msgHash,v,r,s,chainId){r=Buffer.concat([(0,bytes_1.setLengthLeft)(r,32),(0,bytes_1.setLengthLeft)(s,32)],64);v=calculateSigRecovery(v,chainId);if(!isValidSigRecovery(v))throw Error("Invalid signature v value");msgHash=(0,secp256k1_1.ecdsaRecover)(r,
v.toNumber(),msgHash);return Buffer.from((0,secp256k1_1.publicKeyConvert)(msgHash,!1).slice(1))};exports.toRpcSig=function(v,r,s,chainId){chainId=calculateSigRecovery(v,chainId);if(!isValidSigRecovery(chainId))throw Error("Invalid signature v value");return(0,bytes_1.bufferToHex)(Buffer.concat([(0,bytes_1.setLengthLeft)(r,32),(0,bytes_1.setLengthLeft)(s,32),(0,bytes_1.toBuffer)(v)]))};exports.toCompactSig=function(v,r,s,chainId){chainId=calculateSigRecovery(v,chainId);if(!isValidSigRecovery(chainId))throw Error("Invalid signature v value");
v=(0,types_1.toType)(v,types_1.TypeOutput.Number);chainId=s;if(28<v&&1===v%2||1===v||28===v)chainId=Buffer.from(s),chainId[0]|=128;return(0,bytes_1.bufferToHex)(Buffer.concat([(0,bytes_1.setLengthLeft)(r,32),(0,bytes_1.setLengthLeft)(chainId,32)]))};exports.fromRpcSig=function(sig){var buf=(0,bytes_1.toBuffer)(sig);if(65<=buf.length){sig=buf.slice(0,32);var s=buf.slice(32,64);buf=(0,bytes_1.bufferToInt)(buf.slice(64))}else if(64===buf.length)sig=buf.slice(0,32),s=buf.slice(32,64),buf=(0,bytes_1.bufferToInt)(buf.slice(32,
33))>>7,s[0]&=127;else throw Error("Invalid signature length");27>buf&&(buf+=27);return{v:buf,r:sig,s}};exports.isValidSignature=function(v,r,s,homesteadOrLater,chainId){void 0===homesteadOrLater&&(homesteadOrLater=!0);var SECP256K1_N_DIV_2=new externals_1.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),SECP256K1_N=new externals_1.BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",16);if(32!==r.length||32!==s.length||!isValidSigRecovery(calculateSigRecovery(v,
chainId)))return!1;v=new externals_1.BN(r);s=new externals_1.BN(s);return v.isZero()||v.gt(SECP256K1_N)||s.isZero()||s.gt(SECP256K1_N)||homesteadOrLater&&1===s.cmp(SECP256K1_N_DIV_2)?!1:!0};exports.hashPersonalMessage=function(message){(0,helpers_1.assertIsBuffer)(message);var prefix=Buffer.from("Ethereum Signed Message:\n".concat(message.length),"utf-8");return(0,hash_1.keccak)(Buffer.concat([prefix,message]))}}
//# sourceMappingURL=module$node_modules$ethereumjs_util$dist_browser$signature.js.map
