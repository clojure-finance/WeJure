{
"version":3,
"file":"module$node_modules$swarm_js$lib$swarm.js",
"lineCount":20,
"mappings":"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",
"sources":["node_modules/swarm-js/lib/swarm.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$swarm_js$lib$swarm\"] = function(global,require,module,exports) {\n// TODO: this is a temporary fix to hide those libraries from the browser. A\n// slightly better long-term solution would be to split this file into two,\n// separating the functions that are used on Node.js from the functions that\n// are used only on the browser.\nmodule.exports = function (_ref) {\n  var fs = _ref.fs,\n      files = _ref.files,\n      os = _ref.os,\n      path = _ref.path,\n      child_process = _ref.child_process,\n      mimetype = _ref.mimetype,\n      defaultArchives = _ref.defaultArchives,\n      request = _ref.request,\n      downloadUrl = _ref.downloadUrl,\n      bytes = _ref.bytes,\n      hash = _ref.hash,\n      pick = _ref.pick;\n\n  // \u2200 a . String -> JSON -> Map String a -o Map String a\n  //   Inserts a key/val pair in an object impurely.\n  var impureInsert = function impureInsert(key) {\n    return function (val) {\n      return function (map) {\n        return map[key] = val, map;\n      };\n    };\n  }; // String -> JSON -> Map String JSON\n  //   Merges an array of keys and an array of vals into an object.\n\n\n  var toMap = function toMap(keys) {\n    return function (vals) {\n      var map = {};\n\n      for (var i = 0, l = keys.length; i < l; ++i) {\n        map[keys[i]] = vals[i];\n      }\n\n      return map;\n    };\n  }; // \u2200 a . Map String a -> Map String a -> Map String a\n  //   Merges two maps into one.\n\n\n  var merge = function merge(a) {\n    return function (b) {\n      var map = {};\n\n      for (var key in a) {\n        map[key] = a[key];\n      }\n\n      for (var _key in b) {\n        map[_key] = b[_key];\n      }\n\n      return map;\n    };\n  }; // \u2200 a . [a] -> [a] -> Bool\n\n\n  var equals = function equals(a) {\n    return function (b) {\n      if (a.length !== b.length) {\n        return false;\n      } else {\n        for (var i = 0, l = a.length; i < l; ++i) {\n          if (a[i] !== b[i]) return false;\n        }\n      }\n\n      return true;\n    };\n  }; // String -> String -> String\n\n\n  var rawUrl = function rawUrl(swarmUrl) {\n    return function (hash) {\n      return \"\".concat(swarmUrl, \"/bzz-raw:/\").concat(hash);\n    };\n  }; // String -> String -> Promise Uint8Array\n  //   Gets the raw contents of a Swarm hash address.\n\n\n  var downloadData = function downloadData(swarmUrl) {\n    return function (hash) {\n      return new Promise(function (resolve, reject) {\n        request(rawUrl(swarmUrl)(hash), {\n          responseType: \"arraybuffer\"\n        }, function (err, arrayBuffer, response) {\n          if (err) {\n            return reject(err);\n          }\n\n          if (response.statusCode >= 400) {\n            return reject(new Error(\"Error \".concat(response.statusCode, \".\")));\n          }\n\n          return resolve(new Uint8Array(arrayBuffer));\n        });\n      });\n    };\n  }; // type Entry = {\"type\": String, \"hash\": String}\n  // type File = {\"type\": String, \"data\": Uint8Array}\n  // String -> String -> Promise (Map String Entry)\n  //   Solves the manifest of a Swarm address recursively.\n  //   Returns a map from full paths to entries.\n\n\n  var downloadEntries = function downloadEntries(swarmUrl) {\n    return function (hash) {\n      var search = function search(hash) {\n        return function (path) {\n          return function (routes) {\n            // Formats an entry to the Swarm.js type.\n            var format = function format(entry) {\n              return {\n                type: entry.contentType,\n                hash: entry.hash\n              };\n            }; // To download a single entry:\n            //   if type is bzz-manifest, go deeper\n            //   if not, add it to the routing table\n\n\n            var downloadEntry = function downloadEntry(entry) {\n              if (entry.path === undefined) {\n                return Promise.resolve();\n              } else {\n                return entry.contentType === \"application/bzz-manifest+json\" ? search(entry.hash)(path + entry.path)(routes) : Promise.resolve(impureInsert(path + entry.path)(format(entry))(routes));\n              }\n            }; // Downloads the initial manifest and then each entry.\n\n\n            return downloadData(swarmUrl)(hash).then(function (text) {\n              return JSON.parse(toString(text)).entries;\n            }).then(function (entries) {\n              return Promise.all(entries.map(downloadEntry));\n            }).then(function () {\n              return routes;\n            });\n          };\n        };\n      };\n\n      return search(hash)(\"\")({});\n    };\n  }; // String -> String -> Promise (Map String String)\n  //   Same as `downloadEntries`, but returns only hashes (no types).\n\n\n  var downloadRoutes = function downloadRoutes(swarmUrl) {\n    return function (hash) {\n      return downloadEntries(swarmUrl)(hash).then(function (entries) {\n        return toMap(Object.keys(entries))(Object.keys(entries).map(function (route) {\n          return entries[route].hash;\n        }));\n      });\n    };\n  }; // String -> String -> Promise (Map String File)\n  //   Gets the entire directory tree in a Swarm address.\n  //   Returns a promise mapping paths to file contents.\n\n\n  var downloadDirectory = function downloadDirectory(swarmUrl) {\n    return function (hash) {\n      return downloadEntries(swarmUrl)(hash).then(function (entries) {\n        var paths = Object.keys(entries);\n        var hashs = paths.map(function (path) {\n          return entries[path].hash;\n        });\n        var types = paths.map(function (path) {\n          return entries[path].type;\n        });\n        var datas = hashs.map(downloadData(swarmUrl));\n\n        var files = function files(datas) {\n          return datas.map(function (data, i) {\n            return {\n              type: types[i],\n              data: data\n            };\n          });\n        };\n\n        return Promise.all(datas).then(function (datas) {\n          return toMap(paths)(files(datas));\n        });\n      });\n    };\n  }; // String -> String -> String -> Promise String\n  //   Gets the raw contents of a Swarm hash address.\n  //   Returns a promise with the downloaded file path.\n\n\n  var downloadDataToDisk = function downloadDataToDisk(swarmUrl) {\n    return function (hash) {\n      return function (filePath) {\n        return files.download(rawUrl(swarmUrl)(hash))(filePath);\n      };\n    };\n  }; // String -> String -> String -> Promise (Map String String)\n  //   Gets the entire directory tree in a Swarm address.\n  //   Returns a promise mapping paths to file contents.\n\n\n  var downloadDirectoryToDisk = function downloadDirectoryToDisk(swarmUrl) {\n    return function (hash) {\n      return function (dirPath) {\n        return downloadRoutes(swarmUrl)(hash).then(function (routingTable) {\n          var downloads = [];\n\n          for (var route in routingTable) {\n            if (route.length > 0) {\n              var filePath = path.join(dirPath, route);\n              downloads.push(downloadDataToDisk(swarmUrl)(routingTable[route])(filePath));\n            }\n\n            ;\n          }\n\n          ;\n          return Promise.all(downloads).then(function () {\n            return dirPath;\n          });\n        });\n      };\n    };\n  }; // String -> Uint8Array -> Promise String\n  //   Uploads raw data to Swarm.\n  //   Returns a promise with the uploaded hash.\n\n\n  var uploadData = function uploadData(swarmUrl) {\n    return function (data) {\n      return new Promise(function (resolve, reject) {\n        var params = {\n          body: typeof data === \"string\" ? fromString(data) : data,\n          method: \"POST\"\n        };\n        request(\"\".concat(swarmUrl, \"/bzz-raw:/\"), params, function (err, data) {\n          if (err) {\n            return reject(err);\n          }\n\n          return resolve(data);\n        });\n      });\n    };\n  }; // String -> String -> String -> File -> Promise String\n  //   Uploads a file to the Swarm manifest at a given hash, under a specific\n  //   route. Returns a promise containing the uploaded hash.\n  //   FIXME: for some reasons Swarm-Gateways is sometimes returning\n  //   error 404\u00a0(bad request), so we retry up to 3 times. Why?\n\n\n  var uploadToManifest = function uploadToManifest(swarmUrl) {\n    return function (hash) {\n      return function (route) {\n        return function (file) {\n          var attempt = function attempt(n) {\n            var slashRoute = route[0] === \"/\" ? route : \"/\" + route;\n            var url = \"\".concat(swarmUrl, \"/bzz:/\").concat(hash).concat(slashRoute);\n            var opt = {\n              method: \"PUT\",\n              headers: {\n                \"Content-Type\": file.type\n              },\n              body: file.data\n            };\n            return new Promise(function (resolve, reject) {\n              request(url, opt, function (err, data) {\n                if (err) {\n                  return reject(err);\n                }\n\n                if (data.indexOf(\"error\") !== -1) {\n                  return reject(data);\n                }\n\n                return resolve(data);\n              });\n            })[\"catch\"](function (e) {\n              return n > 0 && attempt(n - 1);\n            });\n          };\n\n          return attempt(3);\n        };\n      };\n    };\n  }; // String -> {type: String, data: Uint8Array} -> Promise String\n\n\n  var uploadFile = function uploadFile(swarmUrl) {\n    return function (file) {\n      return uploadDirectory(swarmUrl)({\n        \"\": file\n      });\n    };\n  }; // String -> String -> Promise String\n\n\n  var uploadFileFromDisk = function uploadFileFromDisk(swarmUrl) {\n    return function (filePath) {\n      return fs.readFile(filePath).then(function (data) {\n        return uploadFile(swarmUrl)({\n          type: mimetype.lookup(filePath),\n          data: data\n        });\n      });\n    };\n  }; // String -> Map String File -> Promise String\n  //   Uploads a directory to Swarm. The directory is\n  //   represented as a map of routes and files.\n  //   A default path is encoded by having a \"\" route.\n\n\n  var uploadDirectory = function uploadDirectory(swarmUrl) {\n    return function (directory) {\n      return uploadData(swarmUrl)(\"{}\").then(function (hash) {\n        var uploadRoute = function uploadRoute(route) {\n          return function (hash) {\n            return uploadToManifest(swarmUrl)(hash)(route)(directory[route]);\n          };\n        };\n\n        var uploadToHash = function uploadToHash(hash, route) {\n          return hash.then(uploadRoute(route));\n        };\n\n        return Object.keys(directory).reduce(uploadToHash, Promise.resolve(hash));\n      });\n    };\n  }; // String -> Promise String\n\n\n  var uploadDataFromDisk = function uploadDataFromDisk(swarmUrl) {\n    return function (filePath) {\n      return fs.readFile(filePath).then(uploadData(swarmUrl));\n    };\n  }; // String -> Nullable String -> String -> Promise String\n\n\n  var uploadDirectoryFromDisk = function uploadDirectoryFromDisk(swarmUrl) {\n    return function (defaultPath) {\n      return function (dirPath) {\n        return files.directoryTree(dirPath).then(function (fullPaths) {\n          return Promise.all(fullPaths.map(function (path) {\n            return fs.readFile(path);\n          })).then(function (datas) {\n            var paths = fullPaths.map(function (path) {\n              return path.slice(dirPath.length);\n            });\n            var types = fullPaths.map(function (path) {\n              return mimetype.lookup(path) || \"text/plain\";\n            });\n            return toMap(paths)(datas.map(function (data, i) {\n              return {\n                type: types[i],\n                data: data\n              };\n            }));\n          });\n        }).then(function (directory) {\n          return merge(defaultPath ? {\n            \"\": directory[defaultPath]\n          } : {})(directory);\n        }).then(uploadDirectory(swarmUrl));\n      };\n    };\n  }; // String -> UploadInfo -> Promise String\n  //   Simplified multi-type upload which calls the correct\n  //   one based on the type of the argument given.\n\n\n  var _upload = function upload(swarmUrl) {\n    return function (arg) {\n      // Upload raw data from browser\n      if (arg.pick === \"data\") {\n        return pick.data().then(uploadData(swarmUrl)); // Upload a file from browser\n      } else if (arg.pick === \"file\") {\n        return pick.file().then(uploadFile(swarmUrl)); // Upload a directory from browser\n      } else if (arg.pick === \"directory\") {\n        return pick.directory().then(uploadDirectory(swarmUrl)); // Upload directory/file from disk\n      } else if (arg.path) {\n        switch (arg.kind) {\n          case \"data\":\n            return uploadDataFromDisk(swarmUrl)(arg.path);\n\n          case \"file\":\n            return uploadFileFromDisk(swarmUrl)(arg.path);\n\n          case \"directory\":\n            return uploadDirectoryFromDisk(swarmUrl)(arg.defaultFile)(arg.path);\n        }\n\n        ; // Upload UTF-8 string or raw data (buffer)\n      } else if (arg.length || typeof arg === \"string\") {\n        return uploadData(swarmUrl)(arg); // Upload directory with JSON\n      } else if (arg instanceof Object) {\n        return uploadDirectory(swarmUrl)(arg);\n      }\n\n      return Promise.reject(new Error(\"Bad arguments\"));\n    };\n  }; // String -> String -> Nullable String -> Promise (String | Uint8Array | Map String Uint8Array)\n  //   Simplified multi-type download which calls the correct function based on\n  //   the type of the argument given, and on whether the Swwarm address has a\n  //   directory or a file.\n\n\n  var _download = function download(swarmUrl) {\n    return function (hash) {\n      return function (path) {\n        return isDirectory(swarmUrl)(hash).then(function (isDir) {\n          if (isDir) {\n            return path ? downloadDirectoryToDisk(swarmUrl)(hash)(path) : downloadDirectory(swarmUrl)(hash);\n          } else {\n            return path ? downloadDataToDisk(swarmUrl)(hash)(path) : downloadData(swarmUrl)(hash);\n          }\n        });\n      };\n    };\n  }; // String -> Promise String\n  //   Downloads the Swarm binaries into a path. Returns a promise that only\n  //   resolves when the exact Swarm file is there, and verified to be correct.\n  //   If it was already there to begin with, skips the download.\n\n\n  var downloadBinary = function downloadBinary(path, archives) {\n    var system = os.platform().replace(\"win32\", \"windows\") + \"-\" + (os.arch() === \"x64\" ? \"amd64\" : \"386\");\n    var archive = (archives || defaultArchives)[system];\n    var archiveUrl = downloadUrl + archive.archive + \".tar.gz\";\n    var archiveMD5 = archive.archiveMD5;\n    var binaryMD5 = archive.binaryMD5;\n    return files.safeDownloadArchived(archiveUrl)(archiveMD5)(binaryMD5)(path);\n  }; // type SwarmSetup = {\n  //   account : String,\n  //   password : String,\n  //   dataDir : String,\n  //   binPath : String,\n  //   ensApi : String,\n  //   onDownloadProgress : Number ~> (),\n  //   archives : [{\n  //     archive: String,\n  //     binaryMD5: String,\n  //     archiveMD5: String\n  //   }]\n  // }\n  // SwarmSetup ~> Promise Process\n  //   Starts the Swarm process.\n\n\n  var startProcess = function startProcess(swarmSetup) {\n    return new Promise(function (resolve, reject) {\n      var spawn = child_process.spawn;\n\n      var hasString = function hasString(str) {\n        return function (buffer) {\n          return ('' + buffer).indexOf(str) !== -1;\n        };\n      };\n\n      var account = swarmSetup.account,\n          password = swarmSetup.password,\n          dataDir = swarmSetup.dataDir,\n          ensApi = swarmSetup.ensApi,\n          privateKey = swarmSetup.privateKey;\n      var STARTUP_TIMEOUT_SECS = 3;\n      var WAITING_PASSWORD = 0;\n      var STARTING = 1;\n      var LISTENING = 2;\n      var PASSWORD_PROMPT_HOOK = \"Passphrase\";\n      var LISTENING_HOOK = \"Swarm http proxy started\";\n      var state = WAITING_PASSWORD;\n      var swarmProcess = spawn(swarmSetup.binPath, ['--bzzaccount', account || privateKey, '--datadir', dataDir, '--ens-api', ensApi]);\n\n      var handleProcessOutput = function handleProcessOutput(data) {\n        if (state === WAITING_PASSWORD && hasString(PASSWORD_PROMPT_HOOK)(data)) {\n          setTimeout(function () {\n            state = STARTING;\n            swarmProcess.stdin.write(password + '\\n');\n          }, 500);\n        } else if (hasString(LISTENING_HOOK)(data)) {\n          state = LISTENING;\n          clearTimeout(timeout);\n          resolve(swarmProcess);\n        }\n      };\n\n      swarmProcess.stdout.on('data', handleProcessOutput);\n      swarmProcess.stderr.on('data', handleProcessOutput); //swarmProcess.on('close', () => setTimeout(restart, 2000));\n\n      var restart = function restart() {\n        return startProcess(swarmSetup).then(resolve)[\"catch\"](reject);\n      };\n\n      var error = function error() {\n        return reject(new Error(\"Couldn't start swarm process.\"));\n      };\n\n      var timeout = setTimeout(error, 20000);\n    });\n  }; // Process ~> Promise ()\n  //   Stops the Swarm process.\n\n\n  var stopProcess = function stopProcess(process) {\n    return new Promise(function (resolve, reject) {\n      process.stderr.removeAllListeners('data');\n      process.stdout.removeAllListeners('data');\n      process.stdin.removeAllListeners('error');\n      process.removeAllListeners('error');\n      process.removeAllListeners('exit');\n      process.kill('SIGINT');\n      var killTimeout = setTimeout(function () {\n        return process.kill('SIGKILL');\n      }, 8000);\n      process.once('close', function () {\n        clearTimeout(killTimeout);\n        resolve();\n      });\n    });\n  }; // SwarmSetup -> (SwarmAPI -> Promise ()) -> Promise ()\n  //   Receives a Swarm configuration object and a callback function. It then\n  //   checks if a local Swarm node is running. If no local Swarm is found, it\n  //   downloads the Swarm binaries to the dataDir (if not there), checksums,\n  //   starts the Swarm process and calls the callback function with an API\n  //   object using the local node. That callback must return a promise which\n  //   will resolve when it is done using the API, so that this function can\n  //   close the Swarm process properly. Returns a promise that resolves when the\n  //   user is done with the API and the Swarm process is closed.\n  //   TODO: check if Swarm process is already running (improve `isAvailable`)\n\n\n  var local = function local(swarmSetup) {\n    return function (useAPI) {\n      return _isAvailable(\"http://localhost:8500\").then(function (isAvailable) {\n        return isAvailable ? useAPI(at(\"http://localhost:8500\")).then(function () {}) : downloadBinary(swarmSetup.binPath, swarmSetup.archives).onData(function (data) {\n          return (swarmSetup.onProgress || function () {})(data.length);\n        }).then(function () {\n          return startProcess(swarmSetup);\n        }).then(function (process) {\n          return useAPI(at(\"http://localhost:8500\")).then(function () {\n            return process;\n          });\n        }).then(stopProcess);\n      });\n    };\n  }; // String ~> Promise Bool\n  //   Returns true if Swarm is available on `url`.\n  //   Perfoms a test upload to determine that.\n  //   TODO: improve this?\n\n\n  var _isAvailable = function isAvailable(swarmUrl) {\n    var testFile = \"test\";\n    var testHash = \"c9a99c7d326dcc6316f32fe2625b311f6dc49a175e6877681ded93137d3569e7\";\n    return uploadData(swarmUrl)(testFile).then(function (hash) {\n      return hash === testHash;\n    })[\"catch\"](function () {\n      return false;\n    });\n  }; // String -> String ~> Promise Bool\n  //   Returns a Promise which is true if that Swarm address is a directory.\n  //   Determines that by checking that it (i) is a JSON, (ii) has a .entries.\n  //   TODO: improve this?\n\n\n  var isDirectory = function isDirectory(swarmUrl) {\n    return function (hash) {\n      return downloadData(swarmUrl)(hash).then(function (data) {\n        try {\n          return !!JSON.parse(toString(data)).entries;\n        } catch (e) {\n          return false;\n        }\n      });\n    };\n  }; // Uncurries a function; used to allow the f(x,y,z) style on exports.\n\n\n  var uncurry = function uncurry(f) {\n    return function (a, b, c, d, e) {\n      var p; // Hardcoded because efficiency (`arguments` is very slow).\n\n      if (typeof a !== \"undefined\") p = f(a);\n      if (typeof b !== \"undefined\") p = f(b);\n      if (typeof c !== \"undefined\") p = f(c);\n      if (typeof d !== \"undefined\") p = f(d);\n      if (typeof e !== \"undefined\") p = f(e);\n      return p;\n    };\n  }; // () -> Promise Bool\n  //   Not sure how to mock Swarm to test it properly. Ideas?\n\n\n  var test = function test() {\n    return Promise.resolve(true);\n  }; // Uint8Array -> String\n\n\n  var toString = function toString(uint8Array) {\n    return bytes.toString(bytes.fromUint8Array(uint8Array));\n  }; // String -> Uint8Array\n\n\n  var fromString = function fromString(string) {\n    return bytes.toUint8Array(bytes.fromString(string));\n  }; // String -> SwarmAPI\n  //   Fixes the `swarmUrl`, returning an API where you don't have to pass it.\n\n\n  var at = function at(swarmUrl) {\n    return {\n      download: function download(hash, path) {\n        return _download(swarmUrl)(hash)(path);\n      },\n      downloadData: uncurry(downloadData(swarmUrl)),\n      downloadDataToDisk: uncurry(downloadDataToDisk(swarmUrl)),\n      downloadDirectory: uncurry(downloadDirectory(swarmUrl)),\n      downloadDirectoryToDisk: uncurry(downloadDirectoryToDisk(swarmUrl)),\n      downloadEntries: uncurry(downloadEntries(swarmUrl)),\n      downloadRoutes: uncurry(downloadRoutes(swarmUrl)),\n      isAvailable: function isAvailable() {\n        return _isAvailable(swarmUrl);\n      },\n      upload: function upload(arg) {\n        return _upload(swarmUrl)(arg);\n      },\n      uploadData: uncurry(uploadData(swarmUrl)),\n      uploadFile: uncurry(uploadFile(swarmUrl)),\n      uploadFileFromDisk: uncurry(uploadFile(swarmUrl)),\n      uploadDataFromDisk: uncurry(uploadDataFromDisk(swarmUrl)),\n      uploadDirectory: uncurry(uploadDirectory(swarmUrl)),\n      uploadDirectoryFromDisk: uncurry(uploadDirectoryFromDisk(swarmUrl)),\n      uploadToManifest: uncurry(uploadToManifest(swarmUrl)),\n      pick: pick,\n      hash: hash,\n      fromString: fromString,\n      toString: toString\n    };\n  };\n\n  return {\n    at: at,\n    local: local,\n    download: _download,\n    downloadBinary: downloadBinary,\n    downloadData: downloadData,\n    downloadDataToDisk: downloadDataToDisk,\n    downloadDirectory: downloadDirectory,\n    downloadDirectoryToDisk: downloadDirectoryToDisk,\n    downloadEntries: downloadEntries,\n    downloadRoutes: downloadRoutes,\n    isAvailable: _isAvailable,\n    startProcess: startProcess,\n    stopProcess: stopProcess,\n    upload: _upload,\n    uploadData: uploadData,\n    uploadDataFromDisk: uploadDataFromDisk,\n    uploadFile: uploadFile,\n    uploadFileFromDisk: uploadFileFromDisk,\n    uploadDirectory: uploadDirectory,\n    uploadDirectoryFromDisk: uploadDirectoryFromDisk,\n    uploadToManifest: uploadToManifest,\n    pick: pick,\n    hash: hash,\n    fromString: fromString,\n    toString: toString\n  };\n};\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","_ref","fs","files","os","path","child_process","mimetype","defaultArchives","request","downloadUrl","bytes","hash","pick","impureInsert","key","val","map","toMap","keys","vals","i","l","length","merge","a","b","_key","rawUrl","swarmUrl","concat","downloadData","Promise","resolve","reject","responseType","err","arrayBuffer","response","statusCode","Error","Uint8Array","downloadEntries","search","routes","downloadEntry","entry","undefined","contentType","type","then","text","JSON","parse","toString","entries","all","downloadRoutes","Object","route","downloadDirectory","paths","hashs","types","datas","data","downloadDataToDisk","filePath","download","downloadDirectoryToDisk","dirPath","routingTable","downloads","join","push","uploadData","params","body","fromString","method","uploadToManifest","file","attempt","n","slashRoute","url","opt","headers","indexOf","e","uploadFile","uploadDirectory","uploadFileFromDisk","readFile","lookup","directory","uploadRoute","reduce","uploadToHash","uploadDataFromDisk","uploadDirectoryFromDisk","defaultPath","directoryTree","fullPaths","slice","_upload","arg","kind","defaultFile","_download","isDirectory","isDir","downloadBinary","archives","system","platform","replace","arch","archive","archiveMD5","binaryMD5","safeDownloadArchived","startProcess","swarmSetup","spawn","hasString","str","buffer","password","privateKey","state","WAITING_PASSWORD","swarmProcess","binPath","account","dataDir","ensApi","handleProcessOutput","PASSWORD_PROMPT_HOOK","setTimeout","STARTING","stdin","write","LISTENING_HOOK","LISTENING","clearTimeout","timeout","stdout","on","stderr","error","stopProcess","process","removeAllListeners","kill","killTimeout","once","_isAvailable","testFile","testHash","uncurry","f","c","d","p","uint8Array","fromUint8Array","string","toUint8Array","at","isAvailable","upload","local","useAPI","onData","onProgress"]
}
