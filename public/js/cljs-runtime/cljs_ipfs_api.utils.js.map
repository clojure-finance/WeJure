{"version":3,"sources":["cljs_ipfs_api/utils.cljs"],"mappings":"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","names":["cljs-ipfs-api.utils/safe-case","case-f","x","G__13063","cljs.core.subs","cljs.core/name","clojure.string/replace","cljs.core/first","cljs.core/Keyword","cljs.core.keyword","cljs-ipfs-api.utils/camel-case","camel-snake-kebab.core/->camelCase","cljs-ipfs-api.utils/kebab-case","camel-snake-kebab.core/->kebab-case","p1__13064#","cljs-ipfs-api.utils/js->cljk","cljs.core.js__GT_clj","cljs-ipfs-api.utils/js->cljkk","cljs.core.comp","cljs.core.partial","camel-snake-kebab.extras/transform-keys","cljs-ipfs-api.utils/cljkk->js","cljs.core/clj->js","cljs-ipfs-api.utils/callback-js->clj","cljs.core/fn?","err","res","and__5043__auto__","G__13065","G__13066","cljs-ipfs-api.utils/args-cljkk->js","args","cljs.core.map","var_args","G__13068","cljs-ipfs-api.utils/js-apply","js/Error","this","method-name","cljs_ipfs_api.utils.js_apply","cljs.core.apply","cljs.core/js-invoke","cljs-ipfs-api.utils/js-prototype-apply","js-obj","cljs-ipfs-api.utils/wrap-callback","f-n","callback","cljs.core.async.impl.channels/ManyToManyChannel","c__11255__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__11256__auto__","switch__11138__auto__","state_13077","state_val_13078","inst_13069","cljs.core/PersistentVector","inst_13070","inst_13071","inst_13072","inst_13073","cljs.core.async.impl.ioc-helpers/put!","inst_13075","cljs.core.async.impl.ioc-helpers/return-chan","statearr-13079","state-machine__11139__auto__","ret-value__11140__auto__","result__11141__auto__","cljs.core/keyword-identical?","ex__11142__auto__","e13080","statearr-13081","cljs.core/seq","statearr-13082","state__11257__auto__","statearr-13083","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","G__13084","G__13085","cljs-ipfs-api.utils/is-blob?","js/Blob","cljs.core._EQ_","cljs.core/type","cljs-ipfs-api.utils/last-response","cljs.core.atom","p__13086","map__13087","cljs.core/--destructure-map","opts","cljs.core.get","cljs-ipfs-api.utils/web-http-call","url","params","cljs.core.dissoc","blobless-args","cljs.core.remove","basic-opts","cljs.core/empty?","clojure.string.join","url-extra-opts","cljs.core.merge","url-with-params","district.format/format-url","possible-blob","cljs.core.filter","request-body","G__13088","js/FormData","update-response-run-callback","response","cljs.core/reset!","G__13089","G__13090","request-settings","ajax.core/raw-response-format","ajax.core.POST","cljs-ipfs-api.utils/node-http-call","temp__5802__auto__","cb","rm","js/require","fs","on-done","oresp","obody","resp","cljs.core.get_in","G__13091","G__13092","e13093","js/JSON","js/SyntaxError","e","G__13094","G__13095","form","temp__5804__auto__","b","req-options","req","out","cljs-ipfs-api.utils/http-call","cljs.core/*target*","p__13096","map__13097","options","cljs-ipfs-api.utils/api-call","inst","func","G__13098","G__13099","G__13100","or__5045__auto__"],"sourcesContent":["(ns cljs-ipfs-api.utils\n  (:require [ajax.core :as ajax :refer [POST]]\n            [camel-snake-kebab.core :as cs :include-macros true]\n            [camel-snake-kebab.extras :refer [transform-keys]]\n            [cljs.core.async :as async :refer [<! >! chan]]\n            [clojure.string :as string]\n            [district.format :as format])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n(defn safe-case [case-f]\n  (fn [x]\n    (cond-> (subs (name x) 1)\n      true (string/replace \"_\" \"*\")\n      true case-f\n      true (string/replace \"*\" \"_\")\n      true (->> (str (first (name x))))\n      (keyword? x) keyword)))\n\n(def camel-case (safe-case cs/->camelCase))\n(def kebab-case (safe-case cs/->kebab-case))\n\n(def js->cljk #(js->clj % :keywordize-keys true))\n\n(def js->cljkk\n  \"From JavaScript to Clojure with kekab-cased keywords.\"\n  (comp (partial transform-keys kebab-case) js->cljk))\n\n(def cljkk->js\n  \"From Clojure with kebab-cased keywords to JavaScript.\"\n  (comp clj->js (partial transform-keys camel-case)))\n\n(defn callback-js->clj [x]\n  (if (fn? x)\n    (fn [err res]\n      (when (and res (aget res \"v\"))\n        (aset res \"v\" (aget res \"v\")))                      ;; Prevent weird bug in advanced optimisations\n      (x err (js->cljkk res)))\n    x))\n\n(defn args-cljkk->js [args]\n  (map (comp cljkk->js callback-js->clj) args))\n\n(defn js-apply\n  ([this method-name]\n   (js-apply this method-name nil))\n  ([this method-name args]\n   (if (aget this method-name)\n     (js->cljkk (apply js-invoke this method-name (args-cljkk->js args)))\n     (throw (str \"Method: \" method-name \" was not found in object.\")))))\n\n(defn js-prototype-apply [js-obj method-name args]\n  (js-apply (aget js-obj \"prototype\") method-name args))\n\n(defn wrap-callback [f-n]\n  (let [callback (fn callback [err res]\n                   (if (instance? cljs.core.async.impl.channels/ManyToManyChannel f-n)\n                     (go (>! f-n [(js->cljkk err)\n                                  (js->cljkk res)]))\n                     (if (fn? f-n)\n                       (f-n (js->cljkk err)\n                            (js->cljkk res))\n                       f-n)))]\n    callback))\n\n(defn is-blob? [x]\n  \"Checks if the argument x is a Blob (https://developer.mozilla.org/en-US/docs/Web/API/Blob)\n\n  In older Node.js versions Blob might not be defined, so it uses name of prototype instead\"\n  (if (exists? js/Blob)\n               (= (type x) js/Blob)\n               (= (. (type x) -name) \"Blob\")))\n\n(def last-response (atom nil))\n\n(defn web-http-call [url args {:keys [:opts :callback] :as params}]\n  (let [opts (dissoc opts :req-opts) ; req-opts are used on Node.js platform (back-end) AJAX library\n        blobless-args (remove is-blob? args)\n        basic-opts (when-not (empty? blobless-args) {\"arg\" (clojure.string/join \" \" blobless-args)})\n        url-extra-opts (merge basic-opts opts)\n        url-with-params (format/format-url url url-extra-opts)\n        possible-blob (first (filter is-blob? args))\n        request-body (when possible-blob (doto (js/FormData.) (.append \"file\" possible-blob)))\n        update-response-run-callback (fn [response]\n                  (reset! last-response response)\n                  (callback nil (js->cljkk response)))\n        request-settings {:handler update-response-run-callback\n                          :error-handler (fn [err] (callback err nil))\n                          :response-format (ajax/raw-response-format)\n                          :body request-body}]\n    (POST url-with-params request-settings)))\n\n(defn node-http-call [url args params]\n  (if-let [cb (:callback params)]\n    (let [rm (js/require \"request\")\n          fs (js/require \"fs\")\n          on-done (fn [err oresp obody]\n                    (let [err (js->cljkk err)\n                          resp (js->cljkk oresp)]\n\n                      (cond\n                        err\n                        (cb err nil)\n\n                        (= (.-statusCode resp) 200)\n                        (if (get-in params [:opts :binary?])\n                          ;; if :binary? option is set, then obody will be a Buffer with binary data\n                          ;; so just return it as it is\n                          (cb nil obody)\n\n                          ;; response body is going to be json\n                          (cb nil\n                             (try\n                               (.parse js/JSON (js->cljkk obody))\n                               (catch js/SyntaxError e\n                                 (js->cljkk obody)))))\n\n                        :else (cb (.-statusMessage resp) nil))))\n          form (when-let [b (first (filter is-blob? args))]\n                 {:formData\n                  {:file b}})\n          req-options (clj->js (merge {:url url\n                                       :qs (merge {:arg (clojure.string/join \" \" (remove is-blob? args))}\n                                                  (get-in params [:opts :req-opts]))}\n                                      ;; if we have :binary? option lets set encoding nil\n                                      ;; nodejs doc says that a post with encoding nil will return\n                                      ;; the response body in a Buffer instead of a string\n                                      (when (get-in params [:opts :binary?]) {:encoding nil})\n                                      form))\n          req (.post rm req-options on-done)]\n      (when-let [out (get-in params [:opts :pipe-to])]\n        (.pipe req out)))))\n\n(def http-call\n  (if (= cljs.core/*target* \"nodejs\")\n    node-http-call\n    web-http-call))\n\n(defn api-call [inst func args {:keys [:options :opts] :as params}]\n  (http-call (str (:host inst)\n                  (:endpoint inst) \"/\" func)\n             args\n             (merge inst\n                    {:opts (or opts options)\n                     :callback (:callback params)})))\n"]}