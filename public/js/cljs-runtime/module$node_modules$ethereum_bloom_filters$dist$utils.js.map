{
"version":3,
"file":"module$node_modules$ethereum_bloom_filters$dist$utils.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/ethereum-bloom-filters/dist/utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethereum_bloom_filters$dist$utils\"] = function(global,require,module,exports) {\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst sha3 = require(\"js-sha3\");\r\n/**\r\n * Keccak256 hash\r\n * @param data The data\r\n */\r\nfunction keccak256(data) {\r\n    return '0x' + sha3.keccak_256(toByteArray(data));\r\n}\r\nexports.keccak256 = keccak256;\r\n/**\r\n * Adding padding to string on the left\r\n * @param value The value\r\n * @param chars The chars\r\n */\r\nexports.padLeft = (value, chars) => {\r\n    const hasPrefix = /^0x/i.test(value) || typeof value === 'number';\r\n    value = value.toString().replace(/^0x/i, '');\r\n    const padding = chars - value.length + 1 >= 0 ? chars - value.length + 1 : 0;\r\n    return (hasPrefix ? '0x' : '') + new Array(padding).join('0') + value;\r\n};\r\n/**\r\n * Convert bytes to hex\r\n * @param bytes The bytes\r\n */\r\nfunction bytesToHex(bytes) {\r\n    const hex = [];\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        hex.push((bytes[i] >>> 4).toString(16));\r\n        hex.push((bytes[i] & 0xf).toString(16));\r\n    }\r\n    return `0x${hex.join('').replace(/^0+/, '')}`;\r\n}\r\nexports.bytesToHex = bytesToHex;\r\n/**\r\n * To byte array\r\n * @param value The value\r\n */\r\nfunction toByteArray(value) {\r\n    if (value == null) {\r\n        throw new Error('cannot convert null value to array');\r\n    }\r\n    if (typeof value === 'string') {\r\n        const match = value.match(/^(0x)?[0-9a-fA-F]*$/);\r\n        if (!match) {\r\n            throw new Error('invalid hexidecimal string');\r\n        }\r\n        if (match[1] !== '0x') {\r\n            throw new Error('hex string must have 0x prefix');\r\n        }\r\n        value = value.substring(2);\r\n        if (value.length % 2) {\r\n            value = '0' + value;\r\n        }\r\n        const result = [];\r\n        for (let i = 0; i < value.length; i += 2) {\r\n            result.push(parseInt(value.substr(i, 2), 16));\r\n        }\r\n        return addSlice(new Uint8Array(result));\r\n    }\r\n    if (isByteArray(value)) {\r\n        return addSlice(new Uint8Array(value));\r\n    }\r\n    throw new Error('invalid arrayify value');\r\n}\r\nexports.toByteArray = toByteArray;\r\n/**\r\n * Is byte array\r\n * @param value The value\r\n */\r\nfunction isByteArray(value) {\r\n    if (!value ||\r\n        // tslint:disable-next-line: radix\r\n        parseInt(String(value.length)) != value.length ||\r\n        typeof value === 'string') {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < value.length; i++) {\r\n        const v = value[i];\r\n        // tslint:disable-next-line: radix\r\n        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Add slice to array\r\n * @param array The array\r\n */\r\nfunction addSlice(array) {\r\n    if (array.slice !== undefined) {\r\n        return array;\r\n    }\r\n    array.slice = () => {\r\n        const args = Array.prototype.slice.call(arguments);\r\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\r\n    };\r\n    return array;\r\n}\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","toByteArray","value","Error","match","substring","length","result","i","push","parseInt","substr","addSlice","Uint8Array","String","v","array","undefined","slice","array.slice","args","Array","prototype","call","arguments","apply","Object","defineProperty","sha3","keccak256","data","keccak_256","padLeft","chars","exports.padLeft","hasPrefix","test","toString","replace","padding","join","bytesToHex","bytes","hex"]
}
