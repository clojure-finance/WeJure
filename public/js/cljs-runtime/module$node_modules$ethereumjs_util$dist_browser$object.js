shadow$provide.module$node_modules$ethereumjs_util$dist_browser$object=function(global,require,module,exports){var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";global=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod}};Object.defineProperty(exports,"__esModule",{value:!0});exports.defineProperties=void 0;var assert_1=global(require("module$node_modules$assert$assert")),internal_1=require("module$node_modules$ethereumjs_util$dist_browser$internal"),
externals_1=require("module$node_modules$ethereumjs_util$dist_browser$externals"),bytes_1=require("module$node_modules$ethereumjs_util$dist_browser$bytes");exports.defineProperties=function(self,fields,data){self.raw=[];self._fields=[];self.toJSON=function(label){void 0===label&&(label=!1);if(label){var obj_1={};self._fields.forEach(function(field){obj_1[field]="0x".concat(self[field].toString("hex"))});return obj_1}return(0,bytes_1.baToJSON)(self.raw)};self.serialize=function(){return externals_1.rlp.encode(self.raw)};
fields.forEach(function(field,i){function getter(){return self.raw[i]}function setter(v){v=(0,bytes_1.toBuffer)(v);"00"!==v.toString("hex")||field.allowZero||(v=Buffer.allocUnsafe(0));field.allowLess&&field.length?(v=(0,bytes_1.unpadBuffer)(v),(0,assert_1.default)(field.length>=v.length,"The field ".concat(field.name," must not have more ").concat(field.length," bytes"))):field.allowZero&&0===v.length||!field.length||(0,assert_1.default)(field.length===v.length,"The field ".concat(field.name," must have byte length of ").concat(field.length));
self.raw[i]=v}self._fields.push(field.name);Object.defineProperty(self,field.name,{enumerable:!0,configurable:!0,get:getter,set:setter});field.default&&(self[field.name]=field.default);field.alias&&Object.defineProperty(self,field.alias,{enumerable:!1,configurable:!0,set:setter,get:getter})});if(data)if("string"===typeof data&&(data=Buffer.from((0,internal_1.stripHexPrefix)(data),"hex")),Buffer.isBuffer(data)&&(data=externals_1.rlp.decode(data)),Array.isArray(data)){if(data.length>self._fields.length)throw Error("wrong number of fields in data");
data.forEach(function(d,i){self[self._fields[i]]=(0,bytes_1.toBuffer)(d)})}else if("object"===typeof data){var keys_1=Object.keys(data);fields.forEach(function(field){-1!==keys_1.indexOf(field.name)&&(self[field.name]=data[field.name]);-1!==keys_1.indexOf(field.alias)&&(self[field.alias]=data[field.alias])})}else throw Error("invalid data");}}
//# sourceMappingURL=module$node_modules$ethereumjs_util$dist_browser$object.js.map
