{
"version":3,
"file":"module$node_modules$ethereumjs_util$dist_browser$account.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/ethereumjs-util/dist.browser/account.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethereumjs_util$dist_browser$account\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\nvar assert_1 = __importDefault(require(\"assert\"));\nvar externals_1 = require(\"./externals\");\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nvar internal_1 = require(\"./internal\");\nvar constants_1 = require(\"./constants\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\nvar helpers_1 = require(\"./helpers\");\nvar types_1 = require(\"./types\");\nvar Account = /** @class */ (function () {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating an Account from varying data types.\n     */\n    function Account(nonce, balance, stateRoot, codeHash) {\n        if (nonce === void 0) { nonce = new externals_1.BN(0); }\n        if (balance === void 0) { balance = new externals_1.BN(0); }\n        if (stateRoot === void 0) { stateRoot = constants_1.KECCAK256_RLP; }\n        if (codeHash === void 0) { codeHash = constants_1.KECCAK256_NULL; }\n        this.nonce = nonce;\n        this.balance = balance;\n        this.stateRoot = stateRoot;\n        this.codeHash = codeHash;\n        this._validate();\n    }\n    Account.fromAccountData = function (accountData) {\n        var nonce = accountData.nonce, balance = accountData.balance, stateRoot = accountData.stateRoot, codeHash = accountData.codeHash;\n        return new Account(nonce ? new externals_1.BN((0, bytes_1.toBuffer)(nonce)) : undefined, balance ? new externals_1.BN((0, bytes_1.toBuffer)(balance)) : undefined, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : undefined, codeHash ? (0, bytes_1.toBuffer)(codeHash) : undefined);\n    };\n    Account.fromRlpSerializedAccount = function (serialized) {\n        var values = externals_1.rlp.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized account input. Must be array');\n        }\n        return this.fromValuesArray(values);\n    };\n    Account.fromValuesArray = function (values) {\n        var _a = __read(values, 4), nonce = _a[0], balance = _a[1], stateRoot = _a[2], codeHash = _a[3];\n        return new Account(new externals_1.BN(nonce), new externals_1.BN(balance), stateRoot, codeHash);\n    };\n    Account.prototype._validate = function () {\n        if (this.nonce.lt(new externals_1.BN(0))) {\n            throw new Error('nonce must be greater than zero');\n        }\n        if (this.balance.lt(new externals_1.BN(0))) {\n            throw new Error('balance must be greater than zero');\n        }\n        if (this.stateRoot.length !== 32) {\n            throw new Error('stateRoot must have a length of 32');\n        }\n        if (this.codeHash.length !== 32) {\n            throw new Error('codeHash must have a length of 32');\n        }\n    };\n    /**\n     * Returns a Buffer Array of the raw Buffers for the account, in order.\n     */\n    Account.prototype.raw = function () {\n        return [\n            (0, types_1.bnToUnpaddedBuffer)(this.nonce),\n            (0, types_1.bnToUnpaddedBuffer)(this.balance),\n            this.stateRoot,\n            this.codeHash,\n        ];\n    };\n    /**\n     * Returns the RLP serialization of the account as a `Buffer`.\n     */\n    Account.prototype.serialize = function () {\n        return externals_1.rlp.encode(this.raw());\n    };\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */\n    Account.prototype.isContract = function () {\n        return !this.codeHash.equals(constants_1.KECCAK256_NULL);\n    };\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */\n    Account.prototype.isEmpty = function () {\n        return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);\n    };\n    return Account;\n}());\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nvar isValidAddress = function (hexAddress) {\n    try {\n        (0, helpers_1.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\nexports.isValidAddress = isValidAddress;\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\nvar toChecksumAddress = function (hexAddress, eip1191ChainId) {\n    (0, helpers_1.assertIsHexString)(hexAddress);\n    var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();\n    var prefix = '';\n    if (eip1191ChainId) {\n        var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);\n        prefix = chainId.toString() + '0x';\n    }\n    var hash = (0, hash_1.keccakFromString)(prefix + address).toString('hex');\n    var ret = '0x';\n    for (var i = 0; i < address.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        }\n        else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\nexports.toChecksumAddress = toChecksumAddress;\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nvar isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n    return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;\n};\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nvar generateAddress = function (from, nonce) {\n    (0, helpers_1.assertIsBuffer)(from);\n    (0, helpers_1.assertIsBuffer)(nonce);\n    var nonceBN = new externals_1.BN(nonce);\n    if (nonceBN.isZero()) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return (0, hash_1.rlphash)([from, null]).slice(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return (0, hash_1.rlphash)([from, Buffer.from(nonceBN.toArray())]).slice(-20);\n};\nexports.generateAddress = generateAddress;\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nvar generateAddress2 = function (from, salt, initCode) {\n    (0, helpers_1.assertIsBuffer)(from);\n    (0, helpers_1.assertIsBuffer)(salt);\n    (0, helpers_1.assertIsBuffer)(initCode);\n    (0, assert_1.default)(from.length === 20);\n    (0, assert_1.default)(salt.length === 32);\n    var address = (0, hash_1.keccak256)(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, (0, hash_1.keccak256)(initCode)]));\n    return address.slice(-20);\n};\nexports.generateAddress2 = generateAddress2;\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nvar isValidPrivate = function (privateKey) {\n    return (0, secp256k1_1.privateKeyVerify)(privateKey);\n};\nexports.isValidPrivate = isValidPrivate;\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nvar isValidPublic = function (publicKey, sanitize) {\n    if (sanitize === void 0) { sanitize = false; }\n    (0, helpers_1.assertIsBuffer)(publicKey);\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        return (0, secp256k1_1.publicKeyVerify)(Buffer.concat([Buffer.from([4]), publicKey]));\n    }\n    if (!sanitize) {\n        return false;\n    }\n    return (0, secp256k1_1.publicKeyVerify)(publicKey);\n};\nexports.isValidPublic = isValidPublic;\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nvar pubToAddress = function (pubKey, sanitize) {\n    if (sanitize === void 0) { sanitize = false; }\n    (0, helpers_1.assertIsBuffer)(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));\n    }\n    (0, assert_1.default)(pubKey.length === 64);\n    // Only take the lower 160bits of the hash\n    return (0, hash_1.keccak)(pubKey).slice(-20);\n};\nexports.pubToAddress = pubToAddress;\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nvar privateToPublic = function (privateKey) {\n    (0, helpers_1.assertIsBuffer)(privateKey);\n    // skip the type flag and use the X, Y points\n    return Buffer.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);\n};\nexports.privateToPublic = privateToPublic;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nvar privateToAddress = function (privateKey) {\n    return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));\n};\nexports.privateToAddress = privateToAddress;\n/**\n * Converts a public key to the Ethereum format.\n */\nvar importPublic = function (publicKey) {\n    (0, helpers_1.assertIsBuffer)(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));\n    }\n    return publicKey;\n};\nexports.importPublic = importPublic;\n/**\n * Returns the zero address.\n */\nvar zeroAddress = function () {\n    var addressLength = 20;\n    var addr = (0, bytes_1.zeros)(addressLength);\n    return (0, bytes_1.bufferToHex)(addr);\n};\nexports.zeroAddress = zeroAddress;\n/**\n * Checks if a given address is the zero address.\n */\nvar isZeroAddress = function (hexAddress) {\n    try {\n        (0, helpers_1.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    var zeroAddr = (0, exports.zeroAddress)();\n    return zeroAddr === hexAddress;\n};\nexports.isZeroAddress = isZeroAddress;\n//# sourceMappingURL=account.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","__read","o","n","m","Symbol","iterator","i","call","r","ar","done","next","push","value","error","e","__importDefault","mod","__esModule","Object","defineProperty","isZeroAddress","zeroAddress","importPublic","privateToAddress","privateToPublic","publicToAddress","pubToAddress","isValidPublic","isValidPrivate","generateAddress2","generateAddress","isValidChecksumAddress","toChecksumAddress","isValidAddress","Account","assert_1","externals_1","secp256k1_1","internal_1","constants_1","bytes_1","hash_1","helpers_1","types_1","nonce","balance","stateRoot","codeHash","BN","KECCAK256_RLP","KECCAK256_NULL","_validate","fromAccountData","Account.fromAccountData","accountData","toBuffer","undefined","fromRlpSerializedAccount","Account.fromRlpSerializedAccount","serialized","values","rlp","decode","Array","isArray","Error","fromValuesArray","Account.fromValuesArray","_a","prototype","Account.prototype._validate","lt","length","raw","Account.prototype.raw","bnToUnpaddedBuffer","serialize","Account.prototype.serialize","encode","isContract","Account.prototype.isContract","equals","isEmpty","Account.prototype.isEmpty","isZero","hexAddress","assertIsString","test","eip1191ChainId","assertIsHexString","address","stripHexPrefix","toLowerCase","prefix","chainId","toType","TypeOutput","toString","hash","keccakFromString","ret","parseInt","toUpperCase","from","assertIsBuffer","nonceBN","rlphash","slice","toArray","salt","initCode","default","keccak256","concat","privateKey","privateKeyVerify","publicKey","sanitize","publicKeyVerify","pubKey","publicKeyConvert","keccak","publicKeyCreate","addr","zeros","addressLength","bufferToHex","zeroAddr"]
}
