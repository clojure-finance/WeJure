{
"version":3,
"file":"module$node_modules$web3_core_method$lib$index.js",
"lineCount":32,
"mappings":"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",
"sources":["node_modules/web3-core-method/lib/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$web3_core_method$lib$index\"] = function(global,require,module,exports) {\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n'use strict';\nvar errors = require('web3-core-helpers').errors;\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar promiEvent = require('web3-core-promievent');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\nvar EthersTransactionUtils = require('@ethersproject/transactions');\nvar Method = function Method(options) {\n    if (!options.call || !options.name) {\n        throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n    }\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.transformPayload = options.transformPayload;\n    this.extraFormatters = options.extraFormatters;\n    this.abiCoder = options.abiCoder; // Will be used to encode the revert reason string\n    this.requestManager = options.requestManager;\n    // reference to eth.accounts\n    this.accounts = options.accounts;\n    this.defaultBlock = options.defaultBlock || 'latest';\n    this.defaultAccount = options.defaultAccount || null;\n    this.transactionBlockTimeout = options.transactionBlockTimeout || 50;\n    this.transactionConfirmationBlocks = options.transactionConfirmationBlocks || 24;\n    this.transactionPollingTimeout = options.transactionPollingTimeout || 750;\n    this.transactionPollingInterval = options.transactionPollingInterval || 1000;\n    this.blockHeaderTimeout = options.blockHeaderTimeout || 10; // 10 seconds\n    this.defaultCommon = options.defaultCommon;\n    this.defaultChain = options.defaultChain;\n    this.defaultHardfork = options.defaultHardfork;\n    this.handleRevert = options.handleRevert;\n};\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n    this.requestManager = requestManager;\n    // reference to eth.accounts\n    if (accounts) {\n        this.accounts = accounts;\n    }\n};\nMethod.prototype.createFunction = function (requestManager, accounts) {\n    var func = this.buildCall();\n    func.call = this.call;\n    this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n    return func;\n};\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call;\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    }\n    else {\n        obj[name[0]] = func;\n    }\n};\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return typeof this.call === 'function' ? this.call(args) : this.call;\n};\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (typeof (args[args.length - 1]) === 'function') {\n        return args.pop(); // modify the args array!\n    }\n};\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n    }\n};\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    var _this = this;\n    if (!this.inputFormatter) {\n        return args;\n    }\n    return this.inputFormatter.map(function (formatter, index) {\n        // bind this for defaultBlock, and defaultAccount\n        return formatter ? formatter.call(_this, args[index]) : args[index];\n    });\n};\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    var _this = this;\n    if (Array.isArray(result)) {\n        return result.map(function (res) {\n            return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n        });\n    }\n    else {\n        return this.outputFormatter && result ? this.outputFormatter(result) : result;\n    }\n};\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n    var payload = {\n        method: call,\n        params: params,\n        callback: callback\n    };\n    if (this.transformPayload) {\n        payload = this.transformPayload(payload);\n    }\n    return payload;\n};\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n    var method = this, promiseResolved = false, canUnsubscribe = true, timeoutCount = 0, confirmationCount = 0, intervalId = null, blockHeaderTimeoutId = null, lastBlock = null, receiptJSON = '', gasProvided = ((!!payload.params[0] && typeof payload.params[0] === 'object') && payload.params[0].gas) ? payload.params[0].gas : null, isContractDeployment = (!!payload.params[0] && typeof payload.params[0] === 'object') &&\n        payload.params[0].data &&\n        payload.params[0].from &&\n        !payload.params[0].to, hasBytecode = isContractDeployment && payload.params[0].data.length > 2;\n    // add custom send Methods\n    var _ethereumCalls = [\n        new Method({\n            name: 'getBlockByNumber',\n            call: 'eth_getBlockByNumber',\n            params: 2,\n            inputFormatter: [formatters.inputBlockNumberFormatter, function (val) {\n                    return !!val;\n                }],\n            outputFormatter: formatters.outputBlockFormatter\n        }),\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getTransactionByHash',\n            call: 'eth_getTransactionByHash',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionFormatter\n        }),\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    subscriptionName: 'newHeads',\n                    params: 0,\n                    outputFormatter: formatters.outputBlockFormatter\n                }\n            }\n        })\n    ];\n    // attach methods to this._ethereumCall\n    var _ethereumCall = {};\n    _ethereumCalls.forEach(mthd => {\n        mthd.attachToObject(_ethereumCall);\n        mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n    });\n    // fire \"receipt\" and confirmation events and resolve after\n    var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {\n        if (!err) {\n            // create fake unsubscribe\n            if (!sub) {\n                sub = {\n                    unsubscribe: function () {\n                        clearInterval(intervalId);\n                        clearTimeout(blockHeaderTimeoutId);\n                    }\n                };\n            }\n            // if we have a valid receipt we don't need to send a request\n            return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))\n                // catch error from requesting receipt\n                .catch(function (err) {\n                sub.unsubscribe();\n                promiseResolved = true;\n                utils._fireError({\n                    message: 'Failed to check for transaction receipt:',\n                    data: err\n                }, defer.eventEmitter, defer.reject);\n            })\n                // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n                .then(async function (receipt) {\n                if (!receipt || !receipt.blockHash) {\n                    throw new Error('Receipt missing or blockHash null');\n                }\n                // apply extra formatters\n                if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n                    receipt = method.extraFormatters.receiptFormatter(receipt);\n                }\n                // check if confirmation listener exists\n                if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                    var block;\n                    // If there was an immediately retrieved receipt, it's already\n                    // been confirmed by the direct call to checkConfirmation needed\n                    // for parity instant-seal\n                    if (existingReceipt === undefined || confirmationCount !== 0) {\n                        // Get latest block to emit with confirmation\n                        var latestBlock = await _ethereumCall.getBlockByNumber('latest');\n                        var latestBlockHash = latestBlock ? latestBlock.hash : null;\n                        if (isPolling) { // Check if actually a new block is existing on polling\n                            if (lastBlock) {\n                                block = await _ethereumCall.getBlockByNumber(lastBlock.number + 1);\n                                if (block) {\n                                    lastBlock = block;\n                                    defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                                }\n                            }\n                            else {\n                                block = await _ethereumCall.getBlockByNumber(receipt.blockNumber);\n                                lastBlock = block;\n                                defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                            }\n                        }\n                        else {\n                            defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                        }\n                    }\n                    if ((isPolling && block) || !isPolling) {\n                        confirmationCount++;\n                    }\n                    canUnsubscribe = false;\n                    if (confirmationCount === method.transactionConfirmationBlocks + 1) { // add 1 so we account for conf 0\n                        sub.unsubscribe();\n                        defer.eventEmitter.removeAllListeners();\n                    }\n                }\n                return receipt;\n            })\n                // CHECK for CONTRACT DEPLOYMENT\n                .then(async function (receipt) {\n                if (isContractDeployment && !promiseResolved) {\n                    if (!receipt.contractAddress) {\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                            promiseResolved = true;\n                        }\n                        utils._fireError(errors.NoContractAddressFoundError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                        return;\n                    }\n                    var code;\n                    try {\n                        code = await _ethereumCall.getCode(receipt.contractAddress);\n                    }\n                    catch (err) {\n                        // ignore;\n                    }\n                    if (!code) {\n                        return;\n                    }\n                    // If deployment is status.true and there was a real\n                    // bytecode string, assume it was successful.\n                    var deploymentSuccess = receipt.status === true && hasBytecode;\n                    if (deploymentSuccess || code.length > 2) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        // if contract, return instance instead of receipt\n                        if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n                            defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n                        }\n                        else {\n                            defer.resolve(receipt);\n                        }\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n                    }\n                    else {\n                        utils._fireError(errors.ContractCodeNotStoredError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                    }\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n                return receipt;\n            })\n                // CHECK for normal tx check for receipt only\n                .then(async function (receipt) {\n                if (!isContractDeployment && !promiseResolved) {\n                    if (!receipt.outOfGas &&\n                        (!gasProvided || gasProvided !== receipt.gasUsed) &&\n                        (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        defer.resolve(receipt);\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n                    }\n                    else {\n                        receiptJSON = JSON.stringify(receipt, null, 2);\n                        if (receipt.status === false || receipt.status === '0x0') {\n                            try {\n                                var revertMessage = null;\n                                if (method.handleRevert &&\n                                    (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction')) {\n                                    var txReplayOptions = payload.params[0];\n                                    // If send was raw, fetch the transaction and reconstitute the\n                                    // original params so they can be replayed with `eth_call`\n                                    if (method.call === 'eth_sendRawTransaction') {\n                                        var rawTransactionHex = payload.params[0];\n                                        var parsedTx = EthersTransactionUtils.parse(rawTransactionHex);\n                                        txReplayOptions = formatters.inputTransactionFormatter({\n                                            data: parsedTx.data,\n                                            to: parsedTx.to,\n                                            from: parsedTx.from,\n                                            gas: parsedTx.gasLimit.toHexString(),\n                                            gasPrice: parsedTx.gasPrice.toHexString(),\n                                            value: parsedTx.value.toHexString()\n                                        });\n                                    }\n                                    // Get revert reason string with eth_call\n                                    revertMessage = await method.getRevertReason(txReplayOptions, receipt.blockNumber);\n                                    if (revertMessage) { // Only throw a revert error if a revert reason is existing\n                                        utils._fireError(errors.TransactionRevertInstructionError(revertMessage.reason, revertMessage.signature, receipt), defer.eventEmitter, defer.reject, null, receipt);\n                                    }\n                                    else {\n                                        throw false; // Throw false and let the try/catch statement handle the error correctly after\n                                    }\n                                }\n                                else {\n                                    throw false; // Throw false and let the try/catch statement handle the error correctly after\n                                }\n                            }\n                            catch (error) {\n                                // Throw an normal revert error if no revert reason is given or the detection of it is disabled\n                                utils._fireError(errors.TransactionRevertedWithoutReasonError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                            }\n                        }\n                        else {\n                            // Throw OOG if status is not existing and provided gas and used gas are equal\n                            utils._fireError(errors.TransactionOutOfGasError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                        }\n                    }\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n            })\n                // time out the transaction if not mined after 50 blocks\n                .catch(function () {\n                timeoutCount++;\n                // check to see if we are http polling\n                if (!!isPolling) {\n                    // polling timeout is different than transactionBlockTimeout blocks since we are triggering every second\n                    if (timeoutCount - 1 >= method.transactionPollingTimeout) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionPollingTimeout + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n                else {\n                    if (timeoutCount - 1 >= method.transactionBlockTimeout) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionBlockTimeout + ' blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n            });\n        }\n        else {\n            sub.unsubscribe();\n            promiseResolved = true;\n            utils._fireError({\n                message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.',\n                data: err\n            }, defer.eventEmitter, defer.reject);\n        }\n    };\n    // start watching for confirmation depending on the support features of the provider\n    var startWatching = function (existingReceipt) {\n        let blockHeaderArrived = false;\n        const startInterval = () => {\n            intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), method.transactionPollingInterval);\n        };\n        // If provider do not support event subscription use polling\n        if (!this.requestManager.provider.on) {\n            return startInterval();\n        }\n        // Subscribe to new block headers to look for tx receipt\n        _ethereumCall.subscribe('newBlockHeaders', function (err, blockHeader, sub) {\n            blockHeaderArrived = true;\n            if (err || !blockHeader) {\n                // fall back to polling\n                return startInterval();\n            }\n            checkConfirmation(existingReceipt, false, err, blockHeader, sub);\n        });\n        // Fallback to polling if tx receipt didn't arrived in \"blockHeaderTimeout\" [10 seconds]\n        blockHeaderTimeoutId = setTimeout(() => {\n            if (!blockHeaderArrived) {\n                startInterval();\n            }\n        }, this.blockHeaderTimeout * 1000);\n    }.bind(this);\n    // first check if we already have a confirmed transaction\n    _ethereumCall.getTransactionReceipt(result)\n        .then(function (receipt) {\n        if (receipt && receipt.blockHash) {\n            if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                // We must keep on watching for new Blocks, if a confirmation listener is present\n                startWatching(receipt);\n            }\n            checkConfirmation(receipt, false);\n        }\n        else if (!promiseResolved) {\n            startWatching();\n        }\n    })\n        .catch(function () {\n        if (!promiseResolved)\n            startWatching();\n    });\n};\nvar getWallet = function (from, accounts) {\n    var wallet = null;\n    // is index given\n    if (typeof from === 'number') {\n        wallet = accounts.wallet[from];\n        // is account given\n    }\n    else if (!!from && typeof from === 'object' && from.address && from.privateKey) {\n        wallet = from;\n        // search in wallet for address\n    }\n    else {\n        wallet = accounts.wallet[from.toLowerCase()];\n    }\n    return wallet;\n};\nMethod.prototype.buildCall = function () {\n    var method = this, isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'), // || method.call === 'personal_sendTransaction'\n    isCall = (method.call === 'eth_call');\n    // actual send function\n    var send = function () {\n        var defer = promiEvent(!isSendTx), payload = method.toPayload(Array.prototype.slice.call(arguments));\n        // CALLBACK function\n        var sendTxCallback = function (err, result) {\n            if (method.handleRevert && isCall && method.abiCoder) {\n                var reasonData;\n                // Ganache / Geth <= 1.9.13 return the reason data as a successful eth_call response\n                // Geth >= 1.9.15 attaches the reason data to an error object.\n                // Geth 1.9.14 is missing revert reason (https://github.com/ethereum/web3.js/issues/3520)\n                if (!err && method.isRevertReasonString(result)) {\n                    reasonData = result.substring(10);\n                }\n                else if (err && err.data) {\n                    reasonData = err.data.substring(10);\n                }\n                if (reasonData) {\n                    var reason = method.abiCoder.decodeParameter('string', '0x' + reasonData);\n                    var signature = 'Error(String)';\n                    utils._fireError(errors.RevertInstructionError(reason, signature), defer.eventEmitter, defer.reject, payload.callback, {\n                        reason: reason,\n                        signature: signature\n                    });\n                    return;\n                }\n            }\n            try {\n                result = method.formatOutput(result);\n            }\n            catch (e) {\n                err = e;\n            }\n            if (result instanceof Error) {\n                err = result;\n            }\n            if (!err) {\n                if (payload.callback) {\n                    payload.callback(null, result);\n                }\n            }\n            else {\n                if (err.error) {\n                    err = err.error;\n                }\n                return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n            }\n            // return PROMISE\n            if (!isSendTx) {\n                if (!err) {\n                    defer.resolve(result);\n                }\n                // return PROMIEVENT\n            }\n            else {\n                defer.eventEmitter.emit('transactionHash', result);\n                method._confirmTransaction(defer, result, payload);\n            }\n        };\n        // SENDS the SIGNED SIGNATURE\n        var sendSignedTx = function (sign) {\n            var signedPayload = { ...payload,\n                method: 'eth_sendRawTransaction',\n                params: [sign.rawTransaction]\n            };\n            method.requestManager.send(signedPayload, sendTxCallback);\n        };\n        var sendRequest = function (payload, method) {\n            if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n                var wallet;\n                // ETH_SENDTRANSACTION\n                if (payload.method === 'eth_sendTransaction') {\n                    var tx = payload.params[0];\n                    wallet = getWallet((!!tx && typeof tx === 'object') ? tx.from : null, method.accounts);\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var tx = JSON.parse(JSON.stringify(tx));\n                        delete tx.from;\n                        if (method.defaultChain && !tx.chain) {\n                            tx.chain = method.defaultChain;\n                        }\n                        if (method.defaultHardfork && !tx.hardfork) {\n                            tx.hardfork = method.defaultHardfork;\n                        }\n                        if (method.defaultCommon && !tx.common) {\n                            tx.common = method.defaultCommon;\n                        }\n                        method.accounts.signTransaction(tx, wallet.privateKey)\n                            .then(sendSignedTx)\n                            .catch(function (err) {\n                            if (typeof defer.eventEmitter.listeners === 'function' && defer.eventEmitter.listeners('error').length) {\n                                try {\n                                    defer.eventEmitter.emit('error', err);\n                                }\n                                catch (err) {\n                                    // Ignore userland error prevent it to bubble up within web3.\n                                }\n                                defer.eventEmitter.removeAllListeners();\n                                defer.eventEmitter.catch(function () {\n                                });\n                            }\n                            defer.reject(err);\n                        });\n                        return;\n                    }\n                    // ETH_SIGN\n                }\n                else if (payload.method === 'eth_sign') {\n                    var data = payload.params[1];\n                    wallet = getWallet(payload.params[0], method.accounts);\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var sign = method.accounts.sign(data, wallet.privateKey);\n                        if (payload.callback) {\n                            payload.callback(null, sign.signature);\n                        }\n                        defer.resolve(sign.signature);\n                        return;\n                    }\n                }\n            }\n            return method.requestManager.send(payload, sendTxCallback);\n        };\n        // Send the actual transaction\n        if (isSendTx\n            && !!payload.params[0]\n            && typeof payload.params[0] === 'object'\n            && (typeof payload.params[0].gasPrice === 'undefined'\n                && (typeof payload.params[0].maxPriorityFeePerGas === 'undefined'\n                    || typeof payload.params[0].maxFeePerGas === 'undefined'))) {\n            _handleTxPricing(method, payload.params[0]).then(txPricing => {\n                if (txPricing.gasPrice !== undefined) {\n                    payload.params[0].gasPrice = txPricing.gasPrice;\n                }\n                else if (txPricing.maxPriorityFeePerGas !== undefined\n                    && txPricing.maxFeePerGas !== undefined) {\n                    payload.params[0].maxPriorityFeePerGas = txPricing.maxPriorityFeePerGas;\n                    payload.params[0].maxFeePerGas = txPricing.maxFeePerGas;\n                }\n                if (isSendTx) {\n                    setTimeout(() => {\n                        defer.eventEmitter.emit('sending', payload);\n                    }, 0);\n                }\n                sendRequest(payload, method);\n            });\n        }\n        else {\n            if (isSendTx) {\n                setTimeout(() => {\n                    defer.eventEmitter.emit('sending', payload);\n                }, 0);\n            }\n            sendRequest(payload, method);\n        }\n        if (isSendTx) {\n            setTimeout(() => {\n                defer.eventEmitter.emit('sent', payload);\n            }, 0);\n        }\n        return defer.eventEmitter;\n    };\n    // necessary to attach things to the method\n    send.method = method;\n    // necessary for batch requests\n    send.request = this.request.bind(this);\n    return send;\n};\nfunction _handleTxPricing(method, tx) {\n    return new Promise((resolve, reject) => {\n        try {\n            var getBlockByNumber = (new Method({\n                name: 'getBlockByNumber',\n                call: 'eth_getBlockByNumber',\n                params: 2,\n                inputFormatter: [function (blockNumber) {\n                        return blockNumber ? utils.toHex(blockNumber) : 'latest';\n                    }, function () {\n                        return false;\n                    }]\n            })).createFunction(method.requestManager);\n            var getGasPrice = (new Method({\n                name: 'getGasPrice',\n                call: 'eth_gasPrice',\n                params: 0\n            })).createFunction(method.requestManager);\n            Promise.all([\n                getBlockByNumber(),\n                getGasPrice()\n            ]).then(responses => {\n                const [block, gasPrice] = responses;\n                if ((tx.type === '0x2' || tx.type === undefined) &&\n                    (block && block.baseFeePerGas)) {\n                    // The network supports EIP-1559\n                    // Taken from https://github.com/ethers-io/ethers.js/blob/ba6854bdd5a912fe873d5da494cb5c62c190adde/packages/abstract-provider/src.ts/index.ts#L230\n                    let maxPriorityFeePerGas, maxFeePerGas;\n                    if (tx.gasPrice) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        maxPriorityFeePerGas = tx.gasPrice;\n                        maxFeePerGas = tx.gasPrice;\n                        delete tx.gasPrice;\n                    }\n                    else {\n                        maxPriorityFeePerGas = tx.maxPriorityFeePerGas || '0x9502F900'; // 2.5 Gwei\n                        maxFeePerGas = tx.maxFeePerGas ||\n                            utils.toHex(utils.toBN(block.baseFeePerGas)\n                                .mul(utils.toBN(2))\n                                .add(utils.toBN(maxPriorityFeePerGas)));\n                    }\n                    resolve({ maxFeePerGas, maxPriorityFeePerGas });\n                }\n                else {\n                    if (tx.maxPriorityFeePerGas || tx.maxFeePerGas)\n                        throw Error(\"Network doesn't support eip-1559\");\n                    resolve({ gasPrice });\n                }\n            });\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n}\n/**\n * Returns the revert reason string if existing or otherwise false.\n *\n * @method getRevertReason\n *\n * @param {Object} txOptions\n * @param {Number} blockNumber\n *\n * @returns {Promise<Boolean|String>}\n */\nMethod.prototype.getRevertReason = function (txOptions, blockNumber) {\n    var self = this;\n    return new Promise(function (resolve, reject) {\n        (new Method({\n            name: 'call',\n            call: 'eth_call',\n            params: 2,\n            abiCoder: self.abiCoder,\n            handleRevert: true\n        }))\n            .createFunction(self.requestManager)(txOptions, utils.numberToHex(blockNumber))\n            .then(function () {\n            resolve(false);\n        })\n            .catch(function (error) {\n            if (error.reason) {\n                resolve({\n                    reason: error.reason,\n                    signature: error.signature\n                });\n            }\n            else {\n                reject(error);\n            }\n        });\n    });\n};\n/**\n * Checks if the given hex string is a revert message from the EVM\n *\n * @method isRevertReasonString\n *\n * @param {String} data - Hex string prefixed with 0x\n *\n * @returns {Boolean}\n */\nMethod.prototype.isRevertReasonString = function (data) {\n    return typeof data === 'string' && ((data.length - 2) / 2) % 32 === 4 && data.substring(0, 10) === '0x08c379a0';\n};\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\nmodule.exports = Method;\n\n};"],
"names":["shadow$provide","global","require","module","exports","_handleTxPricing","method","tx","Promise","resolve","reject","getBlockByNumber","createFunction","Method","name","call","params","inputFormatter","blockNumber","utils","toHex","requestManager","getGasPrice","all","then","responses","block","gasPrice","type","undefined","baseFeePerGas","maxFeePerGas","maxPriorityFeePerGas","toBN","mul","add","Error","error","errors","formatters","promiEvent","Subscriptions","subscriptions","EthersTransactionUtils","options","outputFormatter","transformPayload","extraFormatters","abiCoder","accounts","defaultBlock","defaultAccount","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","transactionPollingInterval","blockHeaderTimeout","defaultCommon","defaultChain","defaultHardfork","handleRevert","prototype","setRequestManager","Method.prototype.setRequestManager","Method.prototype.createFunction","func","buildCall","attachToObject","Method.prototype.attachToObject","obj","split","length","getCall","Method.prototype.getCall","args","extractCallback","Method.prototype.extractCallback","pop","validateArgs","Method.prototype.validateArgs","InvalidNumberOfParams","formatInput","Method.prototype.formatInput","_this","map","formatter","index","formatOutput","Method.prototype.formatOutput","result","Array","isArray","res","toPayload","Method.prototype.toPayload","callback","payload","_confirmTransaction","Method.prototype._confirmTransaction","defer","promiseResolved","canUnsubscribe","timeoutCount","confirmationCount","intervalId","blockHeaderTimeoutId","lastBlock","gasProvided","gas","isContractDeployment","data","from","to","hasBytecode","_ethereumCall","_ethereumCalls","inputBlockNumberFormatter","val","outputBlockFormatter","outputTransactionReceiptFormatter","inputAddressFormatter","inputDefaultBlockNumberFormatter","outputTransactionFormatter","subscriptionName","forEach","mthd","checkConfirmation","existingReceipt","isPolling","err","blockHeader","sub","unsubscribe","_fireError","message","eventEmitter","clearInterval","clearTimeout","catch","getTransactionReceipt","receipt","blockHash","receiptFormatter","listeners","latestBlock","latestBlockHash","hash","number","emit","removeAllListeners","contractAddress","NoContractAddressFoundError","code","getCode","status","contractDeployFormatter","ContractCodeNotStoredError","outOfGas","gasUsed","JSON","stringify","revertMessage","txReplayOptions","parsedTx","parse","rawTransactionHex","inputTransactionFormatter","gasLimit","toHexString","value","getRevertReason","TransactionRevertInstructionError","reason","signature","TransactionRevertedWithoutReasonError","TransactionOutOfGasError","TransactionError","startWatching","blockHeaderArrived","startInterval","setInterval","bind","provider","on","subscribe","setTimeout","getWallet","wallet","address","privateKey","toLowerCase","Method.prototype.buildCall","isSendTx","isCall","send","slice","arguments","sendTxCallback","reasonData","isRevertReasonString","substring","decodeParameter","RevertInstructionError","e","sendSignedTx","sign","signedPayload","rawTransaction","sendRequest","chain","hardfork","common","signTransaction","txPricing","request","Method.prototype.getRevertReason","txOptions","self","numberToHex","Method.prototype.isRevertReasonString","Method.prototype.request","format"]
}
