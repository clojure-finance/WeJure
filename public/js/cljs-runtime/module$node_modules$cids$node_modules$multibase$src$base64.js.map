{
"version":3,
"file":"module$node_modules$cids$node_modules$multibase$src$base64.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEvH,MAAM,CAAEC,MAAF,CAAA,CAAaH,OAAA,CAAQ,kCAAR,CAEnBC,OAAOC,CAAAA,OAAP,CAAiBE,QAAgB,CAACC,QAAD,CAAW,CAM1C,MAAMC,QAAkC,CAAC,CAAnCA,CAAUD,QAASE,CAAAA,OAAT,CAAiB,MAAjB,CAAhB,CACMC,IAA8B,CAAC,CAA/BA,CAAMH,QAASE,CAAAA,OAAT,CAAiB,GAAjB,CAANC,EAA4D,CAAC,CAA7DA,CAAoCH,QAASE,CAAAA,OAAT,CAAiB,GAAjB,CAE1C,OAAO,CACLE,MAAO,CAACC,KAAD,CAAQ,CAIXC,KAAA,CADmB,QAArB,GAAI,MAAOD,MAAX,CACWP,MAAOS,CAAAA,IAAP,CAAYF,KAAZ,CAAmBG,CAAAA,QAAnB,CAA4B,QAA5B,CADX,CAGWH,KAAMG,CAAAA,QAAN,CAAe,QAAf,CAGPL,IAAJ,GACEG,KADF,CACWA,KAAOG,CAAAA,OAAP,CAAe,KAAf,CAAsB,GAAtB,CAA2BA,CAAAA,OAA3B,CAAmC,KAAnC,CAA0C,GAA1C,CADX,CAIA,OAAMC,IAAMJ,KAAOJ,CAAAA,OAAP,CAAe,MAAf,CACF;CAAV,CAAIQ,GAAJ,EAAe,CAACT,OAAhB,GACEK,KADF,CACWA,KAAOK,CAAAA,SAAP,CAAiB,CAAjB,CAAoBD,GAApB,CADX,CAIA,OAAOJ,MAlBM,CADV,CAqBLM,MAAO,CAACP,KAAD,CAAQ,CACb,IAAK,MAAMQ,IAAX,GAAmBR,MAAnB,CACE,GAA6B,CAA7B,CAAIL,QAASE,CAAAA,OAAT,CAAiBW,IAAjB,CAAJ,CACE,KAAUC,MAAJ,CAAU,0BAAV,CAAN,CAIJ,MAAOhB,OAAOS,CAAAA,IAAP,CAAYF,KAAZ,CAAmB,QAAnB,CAPM,CArBV,CATmC,CAJ2E;",
"sources":["node_modules/cids/node_modules/multibase/src/base64.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$cids$node_modules$multibase$src$base64\"] = function(global,require,module,exports) {\n'use strict'\nconst { Buffer } = require('buffer')\n\nmodule.exports = function base64 (alphabet) {\n  // The alphabet is only used to know:\n  //   1. If padding is enabled (must contain '=')\n  //   2. If the output must be url-safe (must contain '-' and '_')\n  //   3. If the input of the output function is valid\n  // The alphabets from RFC 4648 are always used.\n  const padding = alphabet.indexOf('=') > -1\n  const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1\n\n  return {\n    encode (input) {\n      let output = ''\n\n      if (typeof input === 'string') {\n        output = Buffer.from(input).toString('base64')\n      } else {\n        output = input.toString('base64')\n      }\n\n      if (url) {\n        output = output.replace(/\\+/g, '-').replace(/\\//g, '_')\n      }\n\n      const pad = output.indexOf('=')\n      if (pad > 0 && !padding) {\n        output = output.substring(0, pad)\n      }\n\n      return output\n    },\n    decode (input) {\n      for (const char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base64 character')\n        }\n      }\n\n      return Buffer.from(input, 'base64')\n    }\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","module.exports","alphabet","padding","indexOf","url","encode","input","output","from","toString","replace","pad","substring","decode","char","Error"]
}
