{
"version":3,
"file":"module$node_modules$$ethersproject$address$lib$index.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/@ethersproject/address/lib/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$ethersproject$address$lib$index\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.isAddress = exports.getAddress = void 0;\nvar bytes_1 = require(\"@ethersproject/bytes\");\nvar bignumber_1 = require(\"@ethersproject/bignumber\");\nvar keccak256_1 = require(\"@ethersproject/keccak256\");\nvar rlp_1 = require(\"@ethersproject/rlp\");\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"./_version\");\nvar logger = new logger_1.Logger(_version_1.version);\nfunction getChecksumAddress(address) {\n    if (!(0, bytes_1.isHexString)(address, 20)) {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    address = address.toLowerCase();\n    var chars = address.substring(2).split(\"\");\n    var expanded = new Uint8Array(40);\n    for (var i = 0; i < 40; i++) {\n        expanded[i] = chars[i].charCodeAt(0);\n    }\n    var hashed = (0, bytes_1.arrayify)((0, keccak256_1.keccak256)(expanded));\n    for (var i = 0; i < 40; i += 2) {\n        if ((hashed[i >> 1] >> 4) >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n    return \"0x\" + chars.join(\"\");\n}\n// Shims for environments that are missing some required constants and functions\nvar MAX_SAFE_INTEGER = 0x1fffffffffffff;\nfunction log10(x) {\n    if (Math.log10) {\n        return Math.log10(x);\n    }\n    return Math.log(x) / Math.LN10;\n}\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\nvar ibanLookup = {};\nfor (var i = 0; i < 10; i++) {\n    ibanLookup[String(i)] = String(i);\n}\nfor (var i = 0; i < 26; i++) {\n    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n}\n// How many decimal digits can we process? (for 64-bit float, this is 15)\nvar safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\nfunction ibanChecksum(address) {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n    var expanded = address.split(\"\").map(function (c) { return ibanLookup[c]; }).join(\"\");\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while (expanded.length >= safeDigits) {\n        var block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n    var checksum = String(98 - (parseInt(expanded, 10) % 97));\n    while (checksum.length < 2) {\n        checksum = \"0\" + checksum;\n    }\n    return checksum;\n}\n;\nfunction getAddress(address) {\n    var result = null;\n    if (typeof (address) !== \"string\") {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n        // Missing the 0x prefix\n        if (address.substring(0, 2) !== \"0x\") {\n            address = \"0x\" + address;\n        }\n        result = getChecksumAddress(address);\n        // It is a checksummed address with a bad checksum\n        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n            logger.throwArgumentError(\"bad address checksum\", \"address\", address);\n        }\n        // Maybe ICAP? (we only support direct mode)\n    }\n    else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        // It is an ICAP address with a bad checksum\n        if (address.substring(2, 4) !== ibanChecksum(address)) {\n            logger.throwArgumentError(\"bad icap checksum\", \"address\", address);\n        }\n        result = (0, bignumber_1._base36To16)(address.substring(4));\n        while (result.length < 40) {\n            result = \"0\" + result;\n        }\n        result = getChecksumAddress(\"0x\" + result);\n    }\n    else {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    return result;\n}\nexports.getAddress = getAddress;\nfunction isAddress(address) {\n    try {\n        getAddress(address);\n        return true;\n    }\n    catch (error) { }\n    return false;\n}\nexports.isAddress = isAddress;\nfunction getIcapAddress(address) {\n    var base36 = (0, bignumber_1._base16To36)(getAddress(address).substring(2)).toUpperCase();\n    while (base36.length < 30) {\n        base36 = \"0\" + base36;\n    }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\nexports.getIcapAddress = getIcapAddress;\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\nfunction getContractAddress(transaction) {\n    var from = null;\n    try {\n        from = getAddress(transaction.from);\n    }\n    catch (error) {\n        logger.throwArgumentError(\"missing from address\", \"transaction\", transaction);\n    }\n    var nonce = (0, bytes_1.stripZeros)((0, bytes_1.arrayify)(bignumber_1.BigNumber.from(transaction.nonce).toHexString()));\n    return getAddress((0, bytes_1.hexDataSlice)((0, keccak256_1.keccak256)((0, rlp_1.encode)([from, nonce])), 12));\n}\nexports.getContractAddress = getContractAddress;\nfunction getCreate2Address(from, salt, initCodeHash) {\n    if ((0, bytes_1.hexDataLength)(salt) !== 32) {\n        logger.throwArgumentError(\"salt must be 32 bytes\", \"salt\", salt);\n    }\n    if ((0, bytes_1.hexDataLength)(initCodeHash) !== 32) {\n        logger.throwArgumentError(\"initCodeHash must be 32 bytes\", \"initCodeHash\", initCodeHash);\n    }\n    return getAddress((0, bytes_1.hexDataSlice)((0, keccak256_1.keccak256)((0, bytes_1.concat)([\"0xff\", getAddress(from), salt, initCodeHash])), 12));\n}\nexports.getCreate2Address = getCreate2Address;\n//# sourceMappingURL=index.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","getChecksumAddress","address","bytes_1","isHexString","logger","throwArgumentError","toLowerCase","chars","substring","split","expanded","Uint8Array","i","charCodeAt","hashed","arrayify","keccak256_1","keccak256","toUpperCase","join","ibanChecksum","map","c","ibanLookup","length","safeDigits","block","parseInt","checksum","String","getAddress","result","match","bignumber_1","_base36To16","Object","defineProperty","value","getCreate2Address","getContractAddress","getIcapAddress","isAddress","rlp_1","logger_1","_version_1","Logger","version","fromCharCode","Math","floor","log10","MAX_SAFE_INTEGER","log","LN10","error","base36","_base16To36","transaction","from","nonce","stripZeros","BigNumber","toHexString","hexDataSlice","encode","salt","initCodeHash","hexDataLength","concat"]
}
