{
"version":3,
"file":"module$node_modules$ethereumjs_util$dist_browser$bytes.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/ethereumjs-util/dist.browser/bytes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethereumjs_util$dist_browser$bytes\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\nvar externals_1 = require(\"./externals\");\nvar internal_1 = require(\"./internal\");\nvar helpers_1 = require(\"./helpers\");\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nvar intToHex = function (i) {\n    if (!Number.isSafeInteger(i) || i < 0) {\n        throw new Error(\"Received an invalid integer type: \".concat(i));\n    }\n    return \"0x\".concat(i.toString(16));\n};\nexports.intToHex = intToHex;\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nvar intToBuffer = function (i) {\n    var hex = (0, exports.intToHex)(i);\n    return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\n};\nexports.intToBuffer = intToBuffer;\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nvar zeros = function (bytes) {\n    return Buffer.allocUnsafe(bytes).fill(0);\n};\nexports.zeros = zeros;\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nvar setLength = function (msg, length, right) {\n    var buf = (0, exports.zeros)(length);\n    if (right) {\n        if (msg.length < length) {\n            msg.copy(buf);\n            return buf;\n        }\n        return msg.slice(0, length);\n    }\n    else {\n        if (msg.length < length) {\n            msg.copy(buf, length - msg.length);\n            return buf;\n        }\n        return msg.slice(-length);\n    }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nvar setLengthLeft = function (msg, length) {\n    (0, helpers_1.assertIsBuffer)(msg);\n    return setLength(msg, length, false);\n};\nexports.setLengthLeft = setLengthLeft;\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nvar setLengthRight = function (msg, length) {\n    (0, helpers_1.assertIsBuffer)(msg);\n    return setLength(msg, length, true);\n};\nexports.setLengthRight = setLengthRight;\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nvar stripZeros = function (a) {\n    var first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nvar unpadBuffer = function (a) {\n    (0, helpers_1.assertIsBuffer)(a);\n    return stripZeros(a);\n};\nexports.unpadBuffer = unpadBuffer;\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nvar unpadArray = function (a) {\n    (0, helpers_1.assertIsArray)(a);\n    return stripZeros(a);\n};\nexports.unpadArray = unpadArray;\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nvar unpadHexString = function (a) {\n    (0, helpers_1.assertIsHexString)(a);\n    a = (0, internal_1.stripHexPrefix)(a);\n    return stripZeros(a);\n};\nexports.unpadHexString = unpadHexString;\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nvar toBuffer = function (v) {\n    if (v === null || v === undefined) {\n        return Buffer.allocUnsafe(0);\n    }\n    if (Buffer.isBuffer(v)) {\n        return Buffer.from(v);\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Buffer.from(v);\n    }\n    if (typeof v === 'string') {\n        if (!(0, internal_1.isHexString)(v)) {\n            throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \".concat(v));\n        }\n        return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\n    }\n    if (typeof v === 'number') {\n        return (0, exports.intToBuffer)(v);\n    }\n    if (externals_1.BN.isBN(v)) {\n        if (v.isNeg()) {\n            throw new Error(\"Cannot convert negative BN to buffer. Given: \".concat(v));\n        }\n        return v.toArrayLike(Buffer);\n    }\n    if (v.toArray) {\n        // converts a BN to a Buffer\n        return Buffer.from(v.toArray());\n    }\n    if (v.toBuffer) {\n        return Buffer.from(v.toBuffer());\n    }\n    throw new Error('invalid type');\n};\nexports.toBuffer = toBuffer;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nvar bufferToInt = function (buf) {\n    return new externals_1.BN((0, exports.toBuffer)(buf)).toNumber();\n};\nexports.bufferToInt = bufferToInt;\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nvar bufferToHex = function (buf) {\n    buf = (0, exports.toBuffer)(buf);\n    return '0x' + buf.toString('hex');\n};\nexports.bufferToHex = bufferToHex;\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nvar fromSigned = function (num) {\n    return new externals_1.BN(num).fromTwos(256);\n};\nexports.fromSigned = fromSigned;\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nvar toUnsigned = function (num) {\n    return Buffer.from(num.toTwos(256).toArray());\n};\nexports.toUnsigned = toUnsigned;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nvar addHexPrefix = function (str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\n};\nexports.addHexPrefix = addHexPrefix;\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\nvar toUtf8 = function (hex) {\n    var zerosRegexp = /^(00)+|(00)+$/g;\n    hex = (0, internal_1.stripHexPrefix)(hex);\n    if (hex.length % 2 !== 0) {\n        throw new Error('Invalid non-even hex string input for toUtf8() provided');\n    }\n    var bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\n    return bufferVal.toString('utf8');\n};\nexports.toUtf8 = toUtf8;\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nvar baToJSON = function (ba) {\n    if (Buffer.isBuffer(ba)) {\n        return \"0x\".concat(ba.toString('hex'));\n    }\n    else if (ba instanceof Array) {\n        var array = [];\n        for (var i = 0; i < ba.length; i++) {\n            array.push((0, exports.baToJSON)(ba[i]));\n        }\n        return array;\n    }\n};\nexports.baToJSON = baToJSON;\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\nvar validateNoLeadingZeroes = function (values) {\n    var e_1, _a;\n    try {\n        for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var _d = __read(_c.value, 2), k = _d[0], v = _d[1];\n            if (v !== undefined && v.length > 0 && v[0] === 0) {\n                throw new Error(\"\".concat(k, \" cannot have leading zeroes, received: \").concat(v.toString('hex')));\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n};\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\nfunction arrToBufArr(arr) {\n    if (!Array.isArray(arr)) {\n        return Buffer.from(arr);\n    }\n    return arr.map(function (a) { return arrToBufArr(a); });\n}\nexports.arrToBufArr = arrToBufArr;\nfunction bufArrToArr(arr) {\n    if (!Array.isArray(arr)) {\n        return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);\n    }\n    return arr.map(function (a) { return bufArrToArr(a); });\n}\nexports.bufArrToArr = bufArrToArr;\n//# sourceMappingURL=bytes.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","arrToBufArr","arr","Array","isArray","map","a","Buffer","from","bufArrToArr","Uint8Array","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","ar","push","error","e","Object","defineProperty","validateNoLeadingZeroes","baToJSON","toUtf8","addHexPrefix","toUnsigned","fromSigned","bufferToHex","bufferToInt","toBuffer","unpadHexString","unpadArray","unpadBuffer","setLengthRight","setLengthLeft","zeros","intToBuffer","intToHex","externals_1","internal_1","helpers_1","Number","isSafeInteger","Error","concat","toString","hex","padToEven","slice","bytes","allocUnsafe","fill","setLength","msg","right","buf","copy","assertIsBuffer","stripZeros","first","assertIsArray","assertIsHexString","stripHexPrefix","v","undefined","isBuffer","isHexString","BN","isBN","isNeg","toArrayLike","toArray","toNumber","num","fromTwos","toTwos","str","isHexPrefixed","bufferVal","replace","zerosRegexp","ba","array","values","_a","_b","entries","_c","_d","k","e_1_1","e_1","return"]
}
