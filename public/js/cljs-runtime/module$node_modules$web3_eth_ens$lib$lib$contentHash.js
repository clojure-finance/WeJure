shadow$provide.module$node_modules$web3_eth_ens$lib$lib$contentHash=function(global,require,module,exports){var contentHash=require("module$node_modules$content_hash$src$index");module.exports={decode:function(encoded){var decoded=null,protocolType=null,error=null;if(encoded&&encoded.error)return{protocolType:null,decoded:encoded.error};if(encoded)try{decoded=contentHash.decode(encoded);var codec=contentHash.getCodec(encoded);"ipfs-ns"===codec?protocolType="ipfs":"swarm-ns"===codec?protocolType="bzz":
"onion"===codec?protocolType="onion":"onion3"===codec?protocolType="onion3":decoded=encoded}catch(e){error=e.message}return{protocolType,decoded,error}},encode:function(text){var encoded=!1;if(text){if(text=text.match(/^(ipfs|bzz|onion|onion3):\/\/(.*)/)||text.match(/\/(ipfs)\/(.*)/)){var contentType=text[1];var content=text[2]}try{if("ipfs"===contentType)4<=content.length&&(encoded="0x"+contentHash.fromIpfs(content));else if("bzz"===contentType)4<=content.length&&(encoded="0x"+contentHash.fromSwarm(content));
else if("onion"===contentType)16===content.length&&(encoded="0x"+contentHash.encode("onion",content));else if("onion3"===contentType)56===content.length&&(encoded="0x"+contentHash.encode("onion3",content));else throw Error("Could not encode content hash: unsupported content type");}catch(err){throw err;}}return encoded}}}
//# sourceMappingURL=module$node_modules$web3_eth_ens$lib$lib$contentHash.js.map
