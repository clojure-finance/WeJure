{"version":3,"sources":["camel_snake_kebab/extras.cljc"],"mappings":";AAGA;;;0CAAA,1CAAMA,4FAEHC,EAAEC;AAFL,AAGE,gBAAA,8DAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAqBE;QAArB,AAAAD,4CAAAD,WAAA,IAAA,/DAAuBG;AAAvB,AAAA,0FAA4B,CAACN,kCAAAA,qCAAAA,LAAEK,iBAAAA,IAAGC;;AAAlC,AACE,OAACC,sBAAS,WAAKC;AAAL,AAAQ,GAAI,AAACC,qBAAKD;AAAG,oDAAA,7CAACE,gFAAQ,AAACC,4CAAIC,UAAUJ;;AAAIA;;GAAIP","names":["camel-snake-kebab.extras/transform-keys","t","coll","p__11930","vec__11932","cljs.core.nth","k","v","clojure.walk/postwalk","x","cljs.core/map?","cljs.core.into","cljs.core.map","transform"],"sourcesContent":["(ns camel-snake-kebab.extras\n  (:require [clojure.walk :refer [postwalk]]))\n\n(defn transform-keys\n  \"Recursively transforms all map keys in coll with t.\"\n  [t coll]\n  (letfn [(transform [[k v]] [(t k) v])]\n    (postwalk (fn [x] (if (map? x) (into {} (map transform x)) x)) coll)))\n"]}