{
"version":3,
"file":"module$node_modules$ethereumjs_util$dist_browser$helpers.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACrH,IAAIC,OAASH,OAAA,CAAQ,kCAAR,CAAkBG,CAAAA,MAC/B,aACAC,OAAOC,CAAAA,cAAP,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAAEI,MAAO,CAAA,CAAT,CAA7C,CACAJ,QAAQK,CAAAA,cAAR,CAAyBL,OAAQM,CAAAA,aAAjC,CAAiDN,OAAQO,CAAAA,cAAzD,CAA0EP,OAAQQ,CAAAA,iBAAlF,CAAsG,IAAK,EAC3G,KAAIC,WAAaX,OAAA,CAAQ,2DAAR,CAWjBE,QAAQQ,CAAAA,iBAAR,CANwBA,QAAS,CAACE,KAAD,CAAQ,CACrC,GAAI,CAAC,GAAID,UAAWE,CAAAA,WAAf,EAA4BD,KAA5B,CAAL,CAEI,KADIE,MACE;AADI,mEAAoEC,CAAAA,MAApE,CAA2EH,KAA3E,CACJ,CAAII,KAAJ,CAAUF,KAAV,CAAN,CAHiC,CAiBzCZ,QAAQO,CAAAA,cAAR,CANqBA,QAAS,CAACG,KAAD,CAAQ,CAClC,GAAI,CAACT,MAAOc,CAAAA,QAAP,CAAgBL,KAAhB,CAAL,CAEI,KADIE,MACE,CADI,kDAAmDC,CAAAA,MAAnD,CAA0DH,KAA1D,CACJ,CAAII,KAAJ,CAAUF,KAAV,CAAN,CAH8B,CAiBtCZ,QAAQM,CAAAA,aAAR,CANoBA,QAAS,CAACI,KAAD,CAAQ,CACjC,GAAI,CAACM,KAAMC,CAAAA,OAAN,CAAcP,KAAd,CAAL,CAEI,KADIE,MACE,CADI,yDAA0DC,CAAAA,MAA1D,CAAiEH,KAAjE,CACJ,CAAII,KAAJ,CAAUF,KAAV,CAAN,CAH6B,CAiBrCZ,QAAQK,CAAAA,cAAR,CANqBA,QAAS,CAACK,KAAD,CAAQ,CAClC,GAAqB,QAArB,GAAI,MAAOA,MAAX,CAEI,KADIE,MACE,CADI,mDAAoDC,CAAAA,MAApD,CAA2DH,KAA3D,CACJ;AAAII,KAAJ,CAAUF,KAAV,CAAN,CAH8B,CA3C+E;",
"sources":["node_modules/ethereumjs-util/dist.browser/helpers.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethereumjs_util$dist_browser$helpers\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\nvar internal_1 = require(\"./internal\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nvar assertIsHexString = function (input) {\n    if (!(0, internal_1.isHexString)(input)) {\n        var msg = \"This method only supports 0x-prefixed hex strings but input was: \".concat(input);\n        throw new Error(msg);\n    }\n};\nexports.assertIsHexString = assertIsHexString;\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nvar assertIsBuffer = function (input) {\n    if (!Buffer.isBuffer(input)) {\n        var msg = \"This method only supports Buffer but input was: \".concat(input);\n        throw new Error(msg);\n    }\n};\nexports.assertIsBuffer = assertIsBuffer;\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nvar assertIsArray = function (input) {\n    if (!Array.isArray(input)) {\n        var msg = \"This method only supports number arrays but input was: \".concat(input);\n        throw new Error(msg);\n    }\n};\nexports.assertIsArray = assertIsArray;\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nvar assertIsString = function (input) {\n    if (typeof input !== 'string') {\n        var msg = \"This method only supports strings but input was: \".concat(input);\n        throw new Error(msg);\n    }\n};\nexports.assertIsString = assertIsString;\n//# sourceMappingURL=helpers.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Object","defineProperty","value","assertIsString","assertIsArray","assertIsBuffer","assertIsHexString","internal_1","input","isHexString","msg","concat","Error","isBuffer","Array","isArray"]
}
