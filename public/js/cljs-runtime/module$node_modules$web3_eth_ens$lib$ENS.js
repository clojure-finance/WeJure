shadow$provide.module$node_modules$web3_eth_ens$lib$ENS=function(global,require,module,exports){function ENS(eth){this.eth=eth;var registryAddress=null;this._lastSyncCheck=this._detectedAddress=null;Object.defineProperty(this,"registry",{get:function(){return new Registry(this)},enumerable:!0});Object.defineProperty(this,"resolverMethodHandler",{get:function(){return new ResolverMethodHandler(this.registry)},enumerable:!0});Object.defineProperty(this,"registryAddress",{get:function(){return registryAddress},
set:function(value){registryAddress=null===value?value:formatters.inputAddressFormatter(value)},enumerable:!0})}var config=require("module$node_modules$web3_eth_ens$lib$config"),formatters=require("module$node_modules$web3_core_helpers$lib$index").formatters,utils=require("module$node_modules$web3_utils$lib$index"),Registry=require("module$node_modules$web3_eth_ens$lib$contracts$Registry"),ResolverMethodHandler=require("module$node_modules$web3_eth_ens$lib$lib$ResolverMethodHandler"),contenthash=
require("module$node_modules$web3_eth_ens$lib$lib$contentHash");ENS.prototype.supportsInterface=function(name,interfaceId,callback){return this.getResolver(name).then(function(resolver){utils.isHexStrict(interfaceId)||(interfaceId=utils.sha3(interfaceId).slice(0,10));return resolver.methods.supportsInterface(interfaceId).call(callback)}).catch(function(error){if("function"===typeof callback)callback(error,null);else throw error;})};ENS.prototype.resolver=function(name,callback){return this.registry.resolver(name,
callback)};ENS.prototype.getResolver=function(name,callback){return this.registry.getResolver(name,callback)};ENS.prototype.setResolver=function(name,address,txConfig,callback){return this.registry.setResolver(name,address,txConfig,callback)};ENS.prototype.setRecord=function(name,owner,resolver,ttl,txConfig,callback){return this.registry.setRecord(name,owner,resolver,ttl,txConfig,callback)};ENS.prototype.setSubnodeRecord=function(name,label,owner,resolver,ttl,txConfig,callback){return this.registry.setSubnodeRecord(name,
label,owner,resolver,ttl,txConfig,callback)};ENS.prototype.setApprovalForAll=function(operator,approved,txConfig,callback){return this.registry.setApprovalForAll(operator,approved,txConfig,callback)};ENS.prototype.isApprovedForAll=function(owner,operator,callback){return this.registry.isApprovedForAll(owner,operator,callback)};ENS.prototype.recordExists=function(name,callback){return this.registry.recordExists(name,callback)};ENS.prototype.setSubnodeOwner=function(name,label,address,txConfig,callback){return this.registry.setSubnodeOwner(name,
label,address,txConfig,callback)};ENS.prototype.getTTL=function(name,callback){return this.registry.getTTL(name,callback)};ENS.prototype.setTTL=function(name,ttl,txConfig,callback){return this.registry.setTTL(name,ttl,txConfig,callback)};ENS.prototype.getOwner=function(name,callback){return this.registry.getOwner(name,callback)};ENS.prototype.setOwner=function(name,address,txConfig,callback){return this.registry.setOwner(name,address,txConfig,callback)};ENS.prototype.getAddress=function(name,callback){return this.resolverMethodHandler.method(name,
"addr",[]).call(callback)};ENS.prototype.setAddress=function(name,address,txConfig,callback){return this.resolverMethodHandler.method(name,"setAddr",[address]).send(txConfig,callback)};ENS.prototype.getPubkey=function(name,callback){return this.resolverMethodHandler.method(name,"pubkey",[],null,callback).call(callback)};ENS.prototype.setPubkey=function(name,x,y,txConfig,callback){return this.resolverMethodHandler.method(name,"setPubkey",[x,y]).send(txConfig,callback)};ENS.prototype.getContent=function(name,
callback){return this.resolverMethodHandler.method(name,"content",[]).call(callback)};ENS.prototype.setContent=function(name,hash,txConfig,callback){return this.resolverMethodHandler.method(name,"setContent",[hash]).send(txConfig,callback)};ENS.prototype.getContenthash=function(name,callback){return this.resolverMethodHandler.method(name,"contenthash",[],contenthash.decode).call(callback)};ENS.prototype.setContenthash=function(name,hash,txConfig,callback){try{var encoded=contenthash.encode(hash)}catch(err){name=
Error("Could not encode "+hash+". See docs for supported hash protocols.");if("function"===typeof callback){callback(name,null);return}throw name;}return this.resolverMethodHandler.method(name,"setContenthash",[encoded]).send(txConfig,callback)};ENS.prototype.getMultihash=function(name,callback){return this.resolverMethodHandler.method(name,"multihash",[]).call(callback)};ENS.prototype.setMultihash=function(name,hash,txConfig,callback){return this.resolverMethodHandler.method(name,"multihash",[hash]).send(txConfig,
callback)};ENS.prototype.checkNetwork=async function(){var now=new Date/1E3;if(!this._lastSyncCheck||3600<now-this._lastSyncCheck){var block=await this.eth.getBlock("latest");block=now-block.timestamp;if(3600<block)throw Error("Network not synced; last block was "+block+" seconds ago");this._lastSyncCheck=now}if(this.registryAddress)return this.registryAddress;if(!this._detectedAddress){now=await this.eth.net.getNetworkType();block=config.addresses[now];if("undefined"===typeof block)throw Error("ENS is not supported on network "+
now);this._detectedAddress=block}return this._detectedAddress};module.exports=ENS}
//# sourceMappingURL=module$node_modules$web3_eth_ens$lib$ENS.js.map
