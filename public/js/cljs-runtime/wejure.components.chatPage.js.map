{"version":3,"sources":["wejure/components/chatPage.cljs"],"mappings":"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","names":["wejure.components.chatPage/recipient-list","reagent.core.atom","wejure.components.chatPage/selected-recipient","wejure.components.chatPage/message","wejure.components.chatPage/message-list","wejure.components.chatPage/username","cljs.core.atom","wejure.components.chatPage/atom-reset","target-atom","value","cljs.core/reset!","wejure.components.chatPage/atom-conj","cljs.core.swap_BANG_","cljs.core/conj","wejure.components.chatPage/add-message","sender","cljs.core.get","cljs.core.js__GT_clj","cljs.core.not_EQ_","cljs.core/deref","cljs.core/last","cljs.core._EQ_","p__12395","map__12396","cljs.core/--destructure-map","wejure.components.chatPage/chat-page","details","step","cljs.core/count","js/module$wejure$js$chatSystem.init","reagent-mui.material.typography/typography","event","js/module$wejure$js$chatSystem.displayMessage","iter__5523__auto__","s__12398","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__12400","cljs.core/chunk-buffer","i__12399","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__12397","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","recipient","s__12402","b__12404","i__12403","iter__12401","message-line","reagent-mui.material.button/button","js/module$wejure$js$chatSystem.storeMessage","cljs.core/chunk-first"],"sourcesContent":["(ns wejure.components.chatPage\r\n  (:require [reagent.core :as r] \r\n            [reagent-mui.material.text-field :refer [text-field]]\r\n            [reagent-mui.material.button :refer [button]]\r\n            [reagent-mui.material.typography :refer [typography]]\r\n            [reagent-mui.material.select :refer [select]]\r\n            [\"../js/chatSystem\" :as chat]))\r\n\r\n(def recipient-list (r/atom [\"Select recipient\"]))\r\n\r\n(def selected-recipient (r/atom \"\"))\r\n\r\n(def message (r/atom \"\"))\r\n\r\n(def message-list (r/atom []))\r\n\r\n(def username (atom \"\"))\r\n\r\n;; used in chatSystem.js, replicate the reset! function in clojure\r\n(defn ^:export atom-reset [target-atom value]\r\n  (reset! target-atom value)\r\n  target-atom)\r\n\r\n;; used in chatSystem.js, replicate the conj function used with swap! in clojure\r\n(defn ^:export atom-conj [target-atom value]                  \r\n  (swap! target-atom conj value)\r\n  target-atom)\r\n\r\n;; used in chatSystem.js, show the updated messages in chatbox\r\n(defn ^:export add-message [target-atom value] \r\n  (let [sender (get (js->clj value :keywordize-keys true) :sender)]\r\n  (when (and (not= (get (js->clj value :keywordize-keys true) :timestamp) (get (js->clj (last @target-atom) :keywordize-keys true) :timestamp))\r\n             (or (= sender @username) (= sender @selected-recipient)))\r\n    (swap! target-atom conj value)\r\n    target-atom)))\r\n\r\n(defn chat-page [{:keys [details step]}]\r\n  (reset! username (get @details :name))\r\n  (when (= 1 (count @recipient-list))\r\n    (chat/init @username))\r\n  [:div\r\n   [typography\r\n    {:variant \"h4\"\r\n     :component \"div\"}\r\n    \"Direct Messages\"]\r\n   [:div\r\n    [:label \"Send to: \"]\r\n    [:select {:value @selected-recipient\r\n              :on-change (fn [event]\r\n                           (reset! selected-recipient (-> event .-target .-value))                ;; perform peer selection\r\n                           (reset! message-list [])                                               ;; clear the previous message output\r\n                           (chat/displayMessage @selected-recipient))}                            ;; display all the stored messages between the user and the peer\r\n     (for [recipient @recipient-list]                                                             ;; retrieve the user list and add them in the peer selection box\r\n       (when (not= recipient @username)\r\n         [:option {:key recipient :value recipient} recipient]))]]\r\n\r\n   [:div\r\n    {:style {:height \"600px\"\r\n             :border \"2px solid #ccc\"\r\n             :display \"flex\"\r\n             :flex-direction \"column\"}}\r\n    (for [message-line (js->clj @message-list :keywordize-keys true)]                             ;; show all the messages in the message list in the chatbox\r\n      ^{:key message-line} [:p (get message-line :timestamp) \" \" [:span {:style {:color \"red\"}} (get message-line :sender) \":\"] \" \" (get message-line :content)])]\r\n\r\n   [:div\r\n    [:input {:style {:width \"100%\"}\r\n             :id \"message\"\r\n             :type \"text\"\r\n             :placeholder \"Send message here\"\r\n             :value @message\r\n             :on-change (fn [event]\r\n                          (reset! message (-> event .-target .-value)))}]]\r\n\r\n   [:div\r\n    [button\r\n     {:variant \"contained\"\r\n      :disable-elevation true\r\n      :size \"small\"\r\n      :on-click #(chat/storeMessage @selected-recipient @message)}\r\n     \"send\"]]])\r\n\r\n\r\n"]}