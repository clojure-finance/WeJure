{"version":3,"sources":["wejure/components/testPage.cljs"],"mappings":";AAYA,AAAKA,wCAAW,gDAAA,hDAACC;AAEjB,wCAAA,xCAAMC,wFAAYC;AAAlB,AACE,QAAA,AAAAC,0BAAA,VAAOD;;AAET,4CAAA,5CAAME,gGAAgBC,SAASC;AAA/B,AACE,IAAMC,OAAK,KAAAC,gIAAA,UAAA,rIAAU,qBAAA,rBAACC,wGAASH;AAA/B,AACE,kEAAA,2CAAA,tGAACI,sDAAWH,qGAAYF,iBACZ,WAAKM,IAAIC;AAAT,AACE,gHAAA,zGAACC,4LAASF,IAAIC;;;AAEhC,2CAAA,3CAAME,8FAAeC,KAAKb,MAAMc;AAAhC,AACI,AAACH,yGAAQ,AAAA,AAAAV,gBAASD;;AAClB,IAAMK,OAAK,KAAAC,6IAAA,UAAA,lJAAU,qBAAA,mFAAA,AAAAL,xGAACM,wHAAUP;AAAhC,AACE,kEAAA,2CAAA,tGAACQ,sDAAWH,qGAAY,AAAA,AAAAJ,gBAASD,oBACrB,WAAKS,IAAIC;AAAT,AACE,oBAAID;AACF,OAACE,yGAAQ,CAAA,oDAAaF;;AACtB,IAAMM,OAAK,AAAG,AAAGC,WAAcN;AAA/B,AACE,yGAAA,zGAACC,mHAAkBD;;AACnB,gHAAA,zGAACC,kHAAiBI;;;;AAqB1C,sCAAA,8CAAAE,pFAAMK;AAAN,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;cAAA,AAAAE,4CAAAF,eAAA,rEAAwBJ;WAAxB,AAAAM,4CAAAF,eAAA,lEAAgCK;AAAhC,AACE,2DAAA,2CAAA,sDAAA,5JAACC;;AADH,0FAAA,mDAAA,mFAAA,mDAAA,8HAAA,2CAAA,2DAAA,KAAA,+DAAA,cAAA,sCAAA,mFAAA,uDAAA,2CAAA,4DAAA,eAAA,uDAAA,2CAAA,yDAAA,yBAAA,mFAAA,sDAAA,2CAAA,yDAAA,UAAA,kDAAA,eAAA,qDAAA,OAAA,uDAAA,2CAAA,0DAAA,eAAA,+DAAA,WAAAH,tyCAIKI;AAJL,AAgBmB,IAAMC,WAAgC,CAAA,AAAA,AAAAL,8BAAA;AAAtC,AAAiD,OAACM,sBAAO9B,sCAAW6B;mBAhBvF,gIAAA,2CAAA,+DAAA,eAAA,iKAAA,8HAAA,2CAAA,2DAAA,KAAA,+DAAA,MAAA,iDAAA,2CAAA,4JAAA,gEAAA,OAAA,mEAAA,uMAAA,mFAAA,mDAAA,sHAAA,2CAAA,2DAAA,YAAA,+EAAA,KAAA,6DAAA,7rDAiBME,yPAECC,iKAEFJ,8WAGa,gFAAA,UAAA,xFAAI,AAAC1B,sCAAWF,6NAG7B,gFAAA,9EAAI,AAACE,sCAAWF,4DAAgC,AAAA,AAAAI,gBAASJ,sRAGzDiC;AA9BL,AAiCiB,OAAClB,yCAAcmB,eAAKlC,sCAAWiB;WAjChD","names":["wejure.components.testPage/profilePic","reagent.core.atom","wejure.components.testPage/emptyPhoto","photo","cljs.core/deref","wejure.components.testPage/ipfs-add-image","filename","file-data","blob","js/Blob","cljs.core/clj->js","cljs_ipfs_api.files.add","err","files","cljs.core.println","wejure.components.testPage/submitProfile","name","details","hash","js/JSON","p__11912","map__11913","cljs.core/--destructure-map","cljs.core.get","p1__11911#","wejure.components.testPage/testPage","step","cljs_ipfs_api.core.init_ipfs","reagent-mui.material.typography/typography","uploaded","cljs.core/reset!","reagent-mui.material.icon-button/icon-button","reagent-mui.icons.add-a-photo-sharp/add-a-photo-sharp","reagent-mui.material.button/button","cljs.core/name"],"sourcesContent":["(ns wejure.components.testPage\r\n  (:require [reagent.core :as r]\r\n            [reagent-mui.material.text-field :refer [text-field]]\r\n            [reagent-mui.material.button :refer [button]]\r\n            [reagent-mui.material.typography :refer [typography]]\r\n            [reagent-mui.material.box :refer [box]]\r\n            [reagent-mui.material.icon-button :refer [icon-button]]\r\n            [reagent-mui.icons.add-a-photo-sharp :refer [add-a-photo-sharp]]\r\n            [cljs-ipfs-api.core :as icore :refer [init-ipfs]]\r\n            [cljs-ipfs-api.files :as ifiles]\r\n            [\"../js/test\" :as jsTest]))\r\n\r\n(def profilePic (r/atom nil))\r\n\r\n(defn emptyPhoto [photo]\r\n  (nil? @photo))\r\n\r\n(defn ipfs-add-image [filename file-data]\r\n  (let [blob (js/Blob. (clj->js [file-data]) #js {:type \"image/*\"})]\r\n    (ifiles/add blob {:path filename}\r\n                (fn [err files]\r\n                  (println [err files])))))\r\n\r\n(defn submitProfile [name photo details]\r\n    (println (.-name @photo))\r\n    (let [blob (js/Blob. (clj->js [@photo]) #js {:type \"image/*\"})]\r\n      (ifiles/add blob {:path (.-name @photo)}\r\n                  (fn [err files]\r\n                    (if err\r\n                      (println (str \"err: \" err))\r\n                      (let [hash (. (. js/JSON parse files) -Hash)]\r\n                        (println \"files: \" files)\r\n                        (println \"hash: \" hash)))))))\r\n    \"\"\"\r\n    (ifiles/add @photo\r\n                (fn [err files]\r\n                  (if err\r\n                    (println (str \"\"err: \"\" err))\r\n                    (let [hash (. (. js/JSON parse files) -Hash)]\r\n                      (println \"\"files: \"\" files)\r\n                      (println \"\"hash: \"\" hash)\r\n    \"\"\"\r\n                      \"\"\"\r\n                      (. ^js (. (. contractInstance -methods) setProfile @name hash) send (js-obj \"\"from\"\" (:account @details))\r\n                         (fn [error txHash] ;; callback\r\n                           (if error\r\n                             (println error)\r\n                             (do\r\n                               (swap! details assoc :name @name)\r\n                               (swap! details assoc :profileHash hash)))))\r\n                      \"\"\"\r\n\r\n\r\n(defn testPage [{:keys [details step]}]\r\n  (init-ipfs {:host \"http://127.0.0.1:5001\"})\r\n  [:div\r\n   [:div\r\n    [typography\r\n     {:variant \"h6\"\r\n      :component \"div\"}\r\n     \"3. Upload a profile picture\"]\r\n\r\n    [:label\r\n     {:html-for \"upload-image\" :style {:margin \"0 auto\"}}\r\n     [:input\r\n      {:accept \"image/*\"\r\n       :id \"upload-image\"\r\n       :type \"file\"\r\n       :style {:display \"none\"}\r\n       :on-change #(let [uploaded (-> % .-target .-files (aget 0))] (reset! profilePic uploaded))}]\r\n     [icon-button\r\n      {:component \"span\"}\r\n      [add-a-photo-sharp]]]\r\n\r\n    [typography\r\n     {:variant \"h6\"\r\n      :component \"div\"\r\n      :sx {:color (if (emptyPhoto profilePic)  \"#d32f2f\" \"#070707\")\r\n           :font-size \"12px\"\r\n           :font-weight \"500\"}}\r\n     (if (emptyPhoto profilePic) \"no photo uploaded\" (.-name @profilePic))]]\r\n\r\n   [:div\r\n    [button\r\n     {:variant \"contained\"\r\n      :disable-elevation true\r\n      :on-click #(submitProfile name profilePic details)}\r\n     \"Submit\"]]])\r\n\r\n"]}