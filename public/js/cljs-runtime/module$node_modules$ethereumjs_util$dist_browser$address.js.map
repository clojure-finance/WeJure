{
"version":3,
"file":"module$node_modules$ethereumjs_util$dist_browser$address.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/ethereumjs-util/dist.browser/address.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethereumjs_util$dist_browser$address\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Address = void 0;\nvar assert_1 = __importDefault(require(\"assert\"));\nvar externals_1 = require(\"./externals\");\nvar bytes_1 = require(\"./bytes\");\nvar account_1 = require(\"./account\");\nvar Address = /** @class */ (function () {\n    function Address(buf) {\n        (0, assert_1.default)(buf.length === 20, 'Invalid address length');\n        this.buf = buf;\n    }\n    /**\n     * Returns the zero address.\n     */\n    Address.zero = function () {\n        return new Address((0, bytes_1.zeros)(20));\n    };\n    /**\n     * Returns an Address object from a hex-encoded string.\n     * @param str - Hex-encoded address\n     */\n    Address.fromString = function (str) {\n        (0, assert_1.default)((0, account_1.isValidAddress)(str), 'Invalid address');\n        return new Address((0, bytes_1.toBuffer)(str));\n    };\n    /**\n     * Returns an address for a given public key.\n     * @param pubKey The two points of an uncompressed key\n     */\n    Address.fromPublicKey = function (pubKey) {\n        (0, assert_1.default)(Buffer.isBuffer(pubKey), 'Public key should be Buffer');\n        var buf = (0, account_1.pubToAddress)(pubKey);\n        return new Address(buf);\n    };\n    /**\n     * Returns an address for a given private key.\n     * @param privateKey A private key must be 256 bits wide\n     */\n    Address.fromPrivateKey = function (privateKey) {\n        (0, assert_1.default)(Buffer.isBuffer(privateKey), 'Private key should be Buffer');\n        var buf = (0, account_1.privateToAddress)(privateKey);\n        return new Address(buf);\n    };\n    /**\n     * Generates an address for a newly created contract.\n     * @param from The address which is creating this new address\n     * @param nonce The nonce of the from account\n     */\n    Address.generate = function (from, nonce) {\n        (0, assert_1.default)(externals_1.BN.isBN(nonce));\n        return new Address((0, account_1.generateAddress)(from.buf, nonce.toArrayLike(Buffer)));\n    };\n    /**\n     * Generates an address for a contract created using CREATE2.\n     * @param from The address which is creating this new address\n     * @param salt A salt\n     * @param initCode The init code of the contract being created\n     */\n    Address.generate2 = function (from, salt, initCode) {\n        (0, assert_1.default)(Buffer.isBuffer(salt));\n        (0, assert_1.default)(Buffer.isBuffer(initCode));\n        return new Address((0, account_1.generateAddress2)(from.buf, salt, initCode));\n    };\n    /**\n     * Is address equal to another.\n     */\n    Address.prototype.equals = function (address) {\n        return this.buf.equals(address.buf);\n    };\n    /**\n     * Is address zero.\n     */\n    Address.prototype.isZero = function () {\n        return this.equals(Address.zero());\n    };\n    /**\n     * True if address is in the address range defined\n     * by EIP-1352\n     */\n    Address.prototype.isPrecompileOrSystemAddress = function () {\n        var addressBN = new externals_1.BN(this.buf);\n        var rangeMin = new externals_1.BN(0);\n        var rangeMax = new externals_1.BN('ffff', 'hex');\n        return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);\n    };\n    /**\n     * Returns hex encoding of address.\n     */\n    Address.prototype.toString = function () {\n        return '0x' + this.buf.toString('hex');\n    };\n    /**\n     * Returns Buffer representation of address.\n     */\n    Address.prototype.toBuffer = function () {\n        return Buffer.from(this.buf);\n    };\n    return Address;\n}());\nexports.Address = Address;\n//# sourceMappingURL=address.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","__importDefault","mod","__esModule","Object","defineProperty","value","Address","assert_1","externals_1","bytes_1","account_1","buf","default","length","zero","Address.zero","zeros","fromString","Address.fromString","str","isValidAddress","toBuffer","fromPublicKey","Address.fromPublicKey","pubKey","isBuffer","pubToAddress","fromPrivateKey","Address.fromPrivateKey","privateKey","privateToAddress","generate","Address.generate","from","nonce","BN","isBN","generateAddress","toArrayLike","generate2","Address.generate2","salt","initCode","generateAddress2","prototype","equals","Address.prototype.equals","address","isZero","Address.prototype.isZero","isPrecompileOrSystemAddress","Address.prototype.isPrecompileOrSystemAddress","addressBN","rangeMin","rangeMax","gte","lte","toString","Address.prototype.toString","Address.prototype.toBuffer"]
}
