{
"version":3,
"file":"module$node_modules$eth_lib$lib$rlp.js",
"lineCount":2,
"mappings":"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",
"sources":["node_modules/eth-lib/lib/rlp.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$eth_lib$lib$rlp\"] = function(global,require,module,exports) {\n// The RLP format\n// Serialization and deserialization for the BytesTree type, under the following grammar:\n// | First byte | Meaning                                                                    |\n// | ---------- | -------------------------------------------------------------------------- |\n// | 0   to 127 | HEX(leaf)                                                                  |\n// | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |\n// | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |\n// | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |\n// | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |\n\nconst encode = tree => {\n  const padEven = str => str.length % 2 === 0 ? str : \"0\" + str;\n\n  const uint = num => padEven(num.toString(16));\n\n  const length = (len, add) => len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);\n\n  const dataTree = tree => {\n    if (typeof tree === \"string\") {\n      const hex = tree.slice(2);\n      const pre = hex.length != 2 || hex >= \"80\" ? length(hex.length / 2, 128) : \"\";\n      return pre + hex;\n    } else {\n      const hex = tree.map(dataTree).join(\"\");\n      const pre = length(hex.length / 2, 192);\n      return pre + hex;\n    }\n  };\n\n  return \"0x\" + dataTree(tree);\n};\n\nconst decode = hex => {\n  let i = 2;\n\n  const parseTree = () => {\n    if (i >= hex.length) throw \"\";\n    const head = hex.slice(i, i + 2);\n    return head < \"80\" ? (i += 2, \"0x\" + head) : head < \"c0\" ? parseHex() : parseList();\n  };\n\n  const parseLength = () => {\n    const len = parseInt(hex.slice(i, i += 2), 16) % 64;\n    return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);\n  };\n\n  const parseHex = () => {\n    const len = parseLength();\n    return \"0x\" + hex.slice(i, i += len * 2);\n  };\n\n  const parseList = () => {\n    const lim = parseLength() * 2 + i;\n    let list = [];\n    while (i < lim) list.push(parseTree());\n    return list;\n  };\n\n  try {\n    return parseTree();\n  } catch (e) {\n    return [];\n  }\n};\n\nmodule.exports = { encode, decode };\n};"],
"names":["shadow$provide","global","require","module","exports","encode","tree","padEven","str","length","len","add","toString","dataTree","hex","slice","pre","map","join","decode","i","parseTree","head","parseLength","lim","list","push","parseInt","e"]
}
