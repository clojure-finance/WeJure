shadow$provide.module$node_modules$ethereumjs_util$dist_browser$internal=function(global,require,module,exports){function isHexPrefixed(str){if("string"!==typeof str)throw Error("[isHexPrefixed] input must be type 'string', received type ".concat(typeof str));return"0"===str[0]&&"x"===str[1]}function padToEven(value){if("string"!==typeof value)throw Error("[padToEven] value must be type 'string', received ".concat(typeof value));value.length%2&&(value="0".concat(value));return value}var Buffer=require("module$node_modules$buffer$index").Buffer;
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});exports.isHexString=exports.getKeys=exports.fromAscii=exports.fromUtf8=exports.toAscii=exports.arrayContainsArray=exports.getBinarySize=exports.padToEven=exports.stripHexPrefix=exports.isHexPrefixed=void 0;exports.isHexPrefixed=isHexPrefixed;exports.stripHexPrefix=function(str){if("string"!==typeof str)throw Error("[stripHexPrefix] input must be type 'string', received ".concat(typeof str));return isHexPrefixed(str)?str.slice(2):
str};exports.padToEven=padToEven;exports.getBinarySize=function(str){if("string"!==typeof str)throw Error("[getBinarySize] method requires input type 'string', recieved ".concat(typeof str));return Buffer.byteLength(str,"utf8")};exports.arrayContainsArray=function(superset,subset,some){if(!0!==Array.isArray(superset))throw Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(typeof superset,"'"));if(!0!==Array.isArray(subset))throw Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(typeof subset,
"'"));return subset[some?"some":"every"](function(value){return 0<=superset.indexOf(value)})};exports.toAscii=function(hex){var str="",i=0,l=hex.length;for("0x"===hex.substring(0,2)&&(i=2);i<l;i+=2){var code=parseInt(hex.substr(i,2),16);str+=String.fromCharCode(code)}return str};exports.fromUtf8=function(stringValue){stringValue=Buffer.from(stringValue,"utf8");return"0x".concat(padToEven(stringValue.toString("hex")).replace(/^0+|0+$/g,""))};exports.fromAscii=function(stringValue){for(var hex="",i=
0;i<stringValue.length;i++){var n=stringValue.charCodeAt(i).toString(16);hex+=2>n.length?"0".concat(n):n}return"0x".concat(hex)};exports.getKeys=function(params,key,allowEmpty){if(!Array.isArray(params))throw Error("[getKeys] method expects input 'params' to be an array, got ".concat(typeof params));if("string"!==typeof key)throw Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(typeof params));for(var result=[],i=0;i<params.length;i++){var value=params[i][key];if(allowEmpty&&
!value)value="";else if("string"!==typeof value)throw Error("invalid abi - expected type 'string', received ".concat(typeof value));result.push(value)}return result};exports.isHexString=function(value,length){return"string"!==typeof value||!value.match(/^0x[0-9A-Fa-f]*$/)||length&&value.length!==2+2*length?!1:!0}}
//# sourceMappingURL=module$node_modules$ethereumjs_util$dist_browser$internal.js.map
