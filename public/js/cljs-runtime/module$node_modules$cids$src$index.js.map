{
"version":3,
"file":"module$node_modules$cids$src$index.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/cids/src/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$cids$src$index\"] = function(global,require,module,exports) {\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst mh = require('multihashes')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst codecs = require('multicodec/src/base-table.json')\nconst CIDUtil = require('./cid-util')\nconst withIs = require('class-is')\n\n/**\n * @typedef {Object} SerializedCID\n * @param {string} codec\n * @param {number} version\n * @param {Buffer} multihash\n */\n\n/**\n * Test if the given input is a CID.\n * @function isCID\n * @memberof CID\n * @static\n * @param {any} other\n * @returns {bool}\n */\n\n/**\n * Class representing a CID `<mbase><version><mcodec><mhash>`\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\n * @class CID\n */\nclass CID {\n  /**\n   * Create a new CID.\n   *\n   * The algorithm for argument input is roughly:\n   * ```\n   * if (cid)\n   *   -> create a copy\n   * else if (str)\n   *   if (1st char is on multibase table) -> CID String\n   *   else -> bs58 encoded multihash\n   * else if (Buffer)\n   *   if (1st byte is 0 or 1) -> CID\n   *   else -> multihash\n   * else if (Number)\n   *   -> construct CID by parts\n   * ```\n   *\n   * @param {string|Buffer|CID} version\n   * @param {string} [codec]\n   * @param {Buffer} [multihash]\n   * @param {string} [multibaseName]\n   *\n   * @example\n   * new CID(<version>, <codec>, <multihash>, <multibaseName>)\n   * new CID(<cidStr>)\n   * new CID(<cid.buffer>)\n   * new CID(<multihash>)\n   * new CID(<bs58 encoded multihash>)\n   * new CID(<cid>)\n   */\n  constructor (version, codec, multihash, multibaseName) {\n    if (_CID.isCID(version)) {\n      // version is an exising CID instance\n      const cid = version\n      this.version = cid.version\n      this.codec = cid.codec\n      this.multihash = Buffer.from(cid.multihash)\n      // Default guard for when a CID < 0.7 is passed with no multibaseName\n      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32')\n      return\n    }\n\n    if (typeof version === 'string') {\n      // e.g. 'base32' or false\n      const baseName = multibase.isEncoded(version)\n      if (baseName) {\n        // version is a CID String encoded with multibase, so v1\n        const cid = multibase.decode(version)\n        this.version = parseInt(cid.slice(0, 1).toString('hex'), 16)\n        this.codec = multicodec.getCodec(cid.slice(1))\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\n        this.multibaseName = baseName\n      } else {\n        // version is a base58btc string multihash, so v0\n        this.version = 0\n        this.codec = 'dag-pb'\n        this.multihash = mh.fromB58String(version)\n        this.multibaseName = 'base58btc'\n      }\n      CID.validateCID(this)\n      Object.defineProperty(this, 'string', { value: version })\n      return\n    }\n\n    if (Buffer.isBuffer(version)) {\n      const firstByte = version.slice(0, 1)\n      const v = parseInt(firstByte.toString('hex'), 16)\n      if (v === 1) {\n        // version is a CID buffer\n        const cid = version\n        this.version = v\n        this.codec = multicodec.getCodec(cid.slice(1))\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\n        this.multibaseName = 'base32'\n      } else {\n        // version is a raw multihash buffer, so v0\n        this.version = 0\n        this.codec = 'dag-pb'\n        this.multihash = version\n        this.multibaseName = 'base58btc'\n      }\n      CID.validateCID(this)\n      return\n    }\n\n    // otherwise, assemble the CID from the parameters\n\n    /**\n     * @type {number}\n     */\n    this.version = version\n\n    /**\n     * @type {string}\n     */\n    this.codec = codec\n\n    /**\n     * @type {Buffer}\n     */\n    this.multihash = multihash\n\n    /**\n     * @type {string}\n     */\n    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32')\n\n    CID.validateCID(this)\n  }\n\n  /**\n   * The CID as a `Buffer`\n   *\n   * @return {Buffer}\n   * @readonly\n   *\n   * @memberOf CID\n   */\n  get buffer () {\n    let buffer = this._buffer\n\n    if (!buffer) {\n      if (this.version === 0) {\n        buffer = this.multihash\n      } else if (this.version === 1) {\n        buffer = Buffer.concat([\n          Buffer.from('01', 'hex'),\n          multicodec.getCodeVarint(this.codec),\n          this.multihash\n        ])\n      } else {\n        throw new Error('unsupported version')\n      }\n\n      // Cache this buffer so it doesn't have to be recreated\n      Object.defineProperty(this, '_buffer', { value: buffer })\n    }\n\n    return buffer\n  }\n\n  /**\n   * Get the prefix of the CID.\n   *\n   * @returns {Buffer}\n   * @readonly\n   */\n  get prefix () {\n    return Buffer.concat([\n      Buffer.from(`0${this.version}`, 'hex'),\n      multicodec.getCodeVarint(this.codec),\n      mh.prefix(this.multihash)\n    ])\n  }\n\n  /**\n   * Convert to a CID of version `0`.\n   *\n   * @returns {CID}\n   */\n  toV0 () {\n    if (this.codec !== 'dag-pb') {\n      throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n    }\n\n    const { name, length } = mh.decode(this.multihash)\n\n    if (name !== 'sha2-256') {\n      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n    }\n\n    if (length !== 32) {\n      throw new Error('Cannot convert non 32 byte multihash CID to CIDv0')\n    }\n\n    return new _CID(0, this.codec, this.multihash)\n  }\n\n  /**\n   * Convert to a CID of version `1`.\n   *\n   * @returns {CID}\n   */\n  toV1 () {\n    return new _CID(1, this.codec, this.multihash)\n  }\n\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {string} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */\n  toBaseEncodedString (base = this.multibaseName) {\n    if (this.string && base === this.multibaseName) {\n      return this.string\n    }\n    let str = null\n    if (this.version === 0) {\n      if (base !== 'base58btc') {\n        throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()')\n      }\n      str = mh.toB58String(this.multihash)\n    } else if (this.version === 1) {\n      str = multibase.encode(base, this.buffer).toString()\n    } else {\n      throw new Error('unsupported version')\n    }\n    if (base === this.multibaseName) {\n      // cache the string value\n      Object.defineProperty(this, 'string', { value: str })\n    }\n    return str\n  }\n\n  /**\n   * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)\n   *\n   * @returns {String}\n   */\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return 'CID(' + this.toString() + ')'\n  }\n\n  toString (base) {\n    return this.toBaseEncodedString(base)\n  }\n\n  /**\n   * Serialize to a plain object.\n   *\n   * @returns {SerializedCID}\n   */\n  toJSON () {\n    return {\n      codec: this.codec,\n      version: this.version,\n      hash: this.multihash\n    }\n  }\n\n  /**\n   * Compare equality with another CID.\n   *\n   * @param {CID} other\n   * @returns {bool}\n   */\n  equals (other) {\n    return this.codec === other.codec &&\n      this.version === other.version &&\n      this.multihash.equals(other.multihash)\n  }\n\n  /**\n   * Test if the given input is a valid CID object.\n   * Throws if it is not.\n   *\n   * @param {any} other\n   * @returns {void}\n   */\n  static validateCID (other) {\n    const errorMsg = CIDUtil.checkCIDComponents(other)\n    if (errorMsg) {\n      throw new Error(errorMsg)\n    }\n  }\n}\n\nconst _CID = withIs(CID, {\n  className: 'CID',\n  symbolName: '@ipld/js-cid/CID'\n})\n\n_CID.codecs = codecs\n\nmodule.exports = _CID\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","mh","multibase","multicodec","codecs","CIDUtil","withIs","CID","constructor","version","codec","multihash","multibaseName","_CID","isCID","from","baseName","isEncoded","cid","decode","parseInt","slice","toString","getCodec","rmPrefix","fromB58String","validateCID","Object","defineProperty","value","isBuffer","firstByte","v","buffer","_buffer","concat","getCodeVarint","Error","prefix","toV0","name","length","toV1","toBaseEncodedString","base","string","str","toB58String","encode","Symbol","for","toJSON","hash","equals","other","errorMsg","checkCIDComponents","className","symbolName"]
}
