shadow$provide.module$node_modules$multibase$src$index=function(global,require,module,exports){function multibase(nameOrCode,buf){if(!buf)throw Error("requires an encoded buffer");nameOrCode=getBase(nameOrCode);const codeBuf=Buffer.from(nameOrCode.code);getBase(nameOrCode.name).decode(buf.toString());return Buffer.concat([codeBuf,buf])}function getBase(nameOrCode){let base;if(constants.names[nameOrCode])base=constants.names[nameOrCode];else if(constants.codes[nameOrCode])base=constants.codes[nameOrCode];
else throw Error("Unsupported encoding");if(!base.isImplemented())throw Error("Base "+nameOrCode+" is not implemented yet");return base}const {Buffer}=require("module$node_modules$buffer$index"),constants=require("module$node_modules$multibase$src$constants");exports=module.exports=multibase;exports.encode=function(nameOrCode,buf){nameOrCode=getBase(nameOrCode);return multibase(nameOrCode.name,Buffer.from(nameOrCode.encode(buf)))};exports.decode=function(bufOrString){Buffer.isBuffer(bufOrString)&&
(bufOrString=bufOrString.toString());var code=bufOrString.substring(0,1);bufOrString=bufOrString.substring(1,bufOrString.length);"string"===typeof bufOrString&&(bufOrString=Buffer.from(bufOrString));code=getBase(code);return Buffer.from(code.decode(bufOrString.toString()))};exports.isEncoded=function(bufOrString){Buffer.isBuffer(bufOrString)&&(bufOrString=bufOrString.toString());if("[object String]"!==Object.prototype.toString.call(bufOrString))return!1;bufOrString=bufOrString.substring(0,1);try{return getBase(bufOrString).name}catch(err){return!1}};
exports.names=Object.freeze(Object.keys(constants.names));exports.codes=Object.freeze(Object.keys(constants.codes))}
//# sourceMappingURL=module$node_modules$multibase$src$index.js.map
