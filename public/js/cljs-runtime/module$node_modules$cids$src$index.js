shadow$provide.module$node_modules$cids$src$index=function(global,require,module,exports){const {Buffer}=require("module$node_modules$buffer$index"),mh=require("module$node_modules$multihashes$src$index"),multibase=require("module$node_modules$cids$node_modules$multibase$src$index"),multicodec=require("module$node_modules$cids$node_modules$multicodec$src$index");global=require("module$node_modules$cids$node_modules$multicodec$src$base_table_json");const CIDUtil=require("module$node_modules$cids$src$cid_util");
require=require("module$node_modules$class_is$index");class CID{constructor(version,codec,multihash,multibaseName){_CID.isCID(version)?(this.version=version.version,this.codec=version.codec,this.multihash=Buffer.from(version.multihash),this.multibaseName=version.multibaseName||(0===version.version?"base58btc":"base32")):"string"===typeof version?((codec=multibase.isEncoded(version))?(multihash=multibase.decode(version),this.version=parseInt(multihash.slice(0,1).toString("hex"),16),this.codec=multicodec.getCodec(multihash.slice(1)),
this.multihash=multicodec.rmPrefix(multihash.slice(1)),this.multibaseName=codec):(this.version=0,this.codec="dag-pb",this.multihash=mh.fromB58String(version),this.multibaseName="base58btc"),CID.validateCID(this),Object.defineProperty(this,"string",{value:version})):(Buffer.isBuffer(version)?(codec=version.slice(0,1),codec=parseInt(codec.toString("hex"),16),1===codec?(this.version=codec,this.codec=multicodec.getCodec(version.slice(1)),this.multihash=multicodec.rmPrefix(version.slice(1)),this.multibaseName=
"base32"):(this.version=0,this.codec="dag-pb",this.multihash=version,this.multibaseName="base58btc")):(this.version=version,this.codec=codec,this.multihash=multihash,this.multibaseName=multibaseName||(0===version?"base58btc":"base32")),CID.validateCID(this))}get buffer(){let buffer=this._buffer;if(!buffer){if(0===this.version)buffer=this.multihash;else if(1===this.version)buffer=Buffer.concat([Buffer.from("01","hex"),multicodec.getCodeVarint(this.codec),this.multihash]);else throw Error("unsupported version");
Object.defineProperty(this,"_buffer",{value:buffer})}return buffer}get prefix(){return Buffer.concat([Buffer.from(`0${this.version}`,"hex"),multicodec.getCodeVarint(this.codec),mh.prefix(this.multihash)])}toV0(){if("dag-pb"!==this.codec)throw Error("Cannot convert a non dag-pb CID to CIDv0");const {name,length}=mh.decode(this.multihash);if("sha2-256"!==name)throw Error("Cannot convert non sha2-256 multihash CID to CIDv0");if(32!==length)throw Error("Cannot convert non 32 byte multihash CID to CIDv0");
return new _CID(0,this.codec,this.multihash)}toV1(){return new _CID(1,this.codec,this.multihash)}toBaseEncodedString(base=this.multibaseName){if(this.string&&base===this.multibaseName)return this.string;let str;if(0===this.version){if("base58btc"!==base)throw Error("not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()");str=mh.toB58String(this.multihash)}else if(1===this.version)str=multibase.encode(base,this.buffer).toString();
else throw Error("unsupported version");base===this.multibaseName&&Object.defineProperty(this,"string",{value:str});return str}[Symbol.for("nodejs.util.inspect.custom")](){return"CID("+this.toString()+")"}toString(base){return this.toBaseEncodedString(base)}toJSON(){return{codec:this.codec,version:this.version,hash:this.multihash}}equals(other){return this.codec===other.codec&&this.version===other.version&&this.multihash.equals(other.multihash)}static validateCID(other){if(other=CIDUtil.checkCIDComponents(other))throw Error(other);
}}const _CID=require(CID,{className:"CID",symbolName:"@ipld/js-cid/CID"});_CID.codecs=global;module.exports=_CID}
//# sourceMappingURL=module$node_modules$cids$src$index.js.map
