{
"version":3,
"file":"module$node_modules$$ethereumjs$tx$dist_browser$transactionFactory.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@ethereumjs/tx/dist.browser/transactionFactory.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$ethereumjs$tx$dist_browser$transactionFactory\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar _1 = require(\".\");\nvar TransactionFactory = /** @class */ (function () {\n    // It is not possible to instantiate a TransactionFactory object.\n    function TransactionFactory() {\n    }\n    /**\n     * Create a transaction from a `txData` object\n     *\n     * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n     * @param txOptions - Options to pass on to the constructor of the transaction\n     */\n    TransactionFactory.fromTxData = function (txData, txOptions) {\n        if (txOptions === void 0) { txOptions = {}; }\n        if (!('type' in txData) || txData.type === undefined) {\n            // Assume legacy transaction\n            return _1.Transaction.fromTxData(txData, txOptions);\n        }\n        else {\n            var txType = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.type)).toNumber();\n            if (txType === 0) {\n                return _1.Transaction.fromTxData(txData, txOptions);\n            }\n            else if (txType === 1) {\n                return _1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);\n            }\n            else if (txType === 2) {\n                return _1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);\n            }\n            else {\n                throw new Error(\"Tx instantiation with type \".concat(txType, \" not supported\"));\n            }\n        }\n    };\n    /**\n     * This method tries to decode serialized data.\n     *\n     * @param data - The data Buffer\n     * @param txOptions - The transaction options\n     */\n    TransactionFactory.fromSerializedData = function (data, txOptions) {\n        if (txOptions === void 0) { txOptions = {}; }\n        if (data[0] <= 0x7f) {\n            // Determine the type.\n            var EIP = void 0;\n            switch (data[0]) {\n                case 1:\n                    EIP = 2930;\n                    break;\n                case 2:\n                    EIP = 1559;\n                    break;\n                default:\n                    throw new Error(\"TypedTransaction with ID \".concat(data[0], \" unknown\"));\n            }\n            if (EIP === 1559) {\n                return _1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n            }\n            else {\n                // EIP === 2930\n                return _1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n            }\n        }\n        else {\n            return _1.Transaction.fromSerializedTx(data, txOptions);\n        }\n    };\n    /**\n     * When decoding a BlockBody, in the transactions field, a field is either:\n     * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n     * A Buffer[] (Legacy Transaction)\n     * This method returns the right transaction.\n     *\n     * @param data - A Buffer or Buffer[]\n     * @param txOptions - The transaction options\n     */\n    TransactionFactory.fromBlockBodyData = function (data, txOptions) {\n        if (txOptions === void 0) { txOptions = {}; }\n        if (Buffer.isBuffer(data)) {\n            return this.fromSerializedData(data, txOptions);\n        }\n        else if (Array.isArray(data)) {\n            // It is a legacy transaction\n            return _1.Transaction.fromValuesArray(data, txOptions);\n        }\n        else {\n            throw new Error('Cannot decode transaction: unknown type input');\n        }\n    };\n    /**\n     * This helper method allows one to retrieve the class which matches the transactionID\n     * If transactionID is undefined, returns the legacy transaction class.\n     * @deprecated - This method is deprecated and will be removed on the next major release\n     * @param transactionID\n     * @param _common - This option is not used\n     */\n    TransactionFactory.getTransactionClass = function (transactionID, _common) {\n        if (transactionID === void 0) { transactionID = 0; }\n        var legacyTxn = transactionID == 0 || (transactionID >= 0x80 && transactionID <= 0xff);\n        if (legacyTxn) {\n            return _1.Transaction;\n        }\n        switch (transactionID) {\n            case 1:\n                return _1.AccessListEIP2930Transaction;\n            case 2:\n                return _1.FeeMarketEIP1559Transaction;\n            default:\n                throw new Error(\"TypedTransaction with ID \".concat(transactionID, \" unknown\"));\n        }\n    };\n    return TransactionFactory;\n}());\nexports.default = TransactionFactory;\n//# sourceMappingURL=transactionFactory.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Object","defineProperty","value","ethereumjs_util_1","_1","TransactionFactory","fromTxData","TransactionFactory.fromTxData","txData","txOptions","undefined","type","txType","toNumber","BN","toBuffer","Transaction","AccessListEIP2930Transaction","FeeMarketEIP1559Transaction","Error","concat","fromSerializedData","TransactionFactory.fromSerializedData","data","EIP","fromSerializedTx","fromBlockBodyData","TransactionFactory.fromBlockBodyData","isBuffer","Array","isArray","fromValuesArray","getTransactionClass","TransactionFactory.getTransactionClass","transactionID","_common","default"]
}
