{
"version":3,
"file":"module$node_modules$cids$node_modules$multibase$src$base32.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA0BvHC,QAASA,OAAO,CAACC,MAAD,CAASC,QAAT,CAAmB,CACjC,MAAMC,OAASF,MAAOG,CAAAA,UAChBC,OAAAA,CAAO,IAAIC,UAAJ,CAAeL,MAAf,CACb,OAAMM,QAAUL,QAASM,CAAAA,OAAT,CAAiB,MAAjB,CAAVD,GAAoCL,QAASC,CAAAA,MAA7CI,CAAsD,CAExDA,QAAJ,GACEL,QADF,CACaA,QAASO,CAAAA,SAAT,CAAmB,CAAnB,CAAsBP,QAASC,CAAAA,MAA/B,CAAwC,CAAxC,CADb,CAIA,KAAIO,KAAO,CAAX,CACIC,MAAQ,CADZ,CAEIC,OAAS,EAEb,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBV,MAApB,CAA4BU,CAAA,EAA5B,CAIE,IAHAF,KACA,CADSA,KACT,EADkB,CAClB,CADuBN,MAAA,CAAKQ,CAAL,CACvB,CAAAH,IAAA,EAAQ,CAER,CAAe,CAAf,EAAOA,IAAP,CAAA,CACEE,MACA,EADUV,QAAA,CAAUS,KAAV,GAAqBD,IAArB,CAA4B,CAA5B,CAAkC,EAAlC,CACV,CAAAA,IAAA,EAAQ,CAID,EAAX,CAAIA,IAAJ,GACEE,MADF,EACYV,QAAA,CAAUS,KAAV;AAAoB,CAApB,CAAwBD,IAAxB,CAAiC,EAAjC,CADZ,CAIA,IAAIH,OAAJ,CACE,IAAA,CAA+B,CAA/B,GAAQK,MAAOT,CAAAA,MAAf,CAAwB,CAAxB,CAAA,CACES,MAAA,EAAU,MAId,OAAOA,OAjC0B,CAoCnCd,MAAOC,CAAAA,OAAP,CAAiBe,QAAgB,CAACZ,QAAD,CAAW,CAC1C,MAAO,CACLF,MAAO,CAACe,KAAD,CAAQ,CACb,MAAqB,QAArB,GAAI,MAAOA,MAAX,CACSf,MAAA,CAAOM,UAAWU,CAAAA,IAAX,CAAgBD,KAAhB,CAAP,CAA+Bb,QAA/B,CADT,CAIOF,MAAA,CAAOe,KAAP,CAAcb,QAAd,CALM,CADV,CAQLe,MAAO,CAACF,KAAD,CAAQ,CACb,IAAK,IAAMG,IAAX,GAAmBH,MAAnB,CACE,GAA6B,CAA7B,CAAIb,QAASM,CAAAA,OAAT,CAAiBU,IAAjB,CAAJ,CACE,KAAUC,MAAJ,CAAU,0BAAV,CAAN,CAtERJ,KAAA,CA0EkBA,KA1EJK,CAAAA,OAAN,CAAkBC,MAAJ,CAAW,MAAX,CAAgB,GAAhB,CAAd,CAAoC,EAApC,CACFlB,KAAAA,CAASY,KAAMZ,CAAAA,MAErB,KAAIO,KAAO,CAAX,CACIC,MAAQ,CADZ,CAGIW,MAAQ,CACZ,OAAMV,OAAS,IAAIN,UAAJ,CAAyB,CAAzB,CAAgBH,IAAhB,CAA6B,CAA7B,CAAkC,CAAlC,CAEf,KAAK,IAAIU,EAAI,CAAb,CAAgBA,CAAhB,CAAoBV,IAApB,CAA4BU,CAAA,EAA5B,CACEF,KAGA,CAHSA,KAGT,EAHkB,CAGlB,CA6DuBT,QAhESM,CAAAA,OAAT,CAAiBO,KAAA,CAAMF,CAAN,CAAjB,CAGvB;AAFAH,IAEA,EAFQ,CAER,CAAY,CAAZ,EAAIA,IAAJ,GACEE,MAAA,CAAOU,KAAA,EAAP,CACA,CADmBX,KACnB,GAD8BD,IAC9B,CADqC,CACrC,CAD2C,GAC3C,CAAAA,IAAA,EAAQ,CAFV,CA6DE,OAvDGE,OAAOX,CAAAA,MAgDG,CARV,CADmC,CA9D2E;",
"sources":["node_modules/cids/node_modules/multibase/src/base32.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$cids$node_modules$multibase$src$base32\"] = function(global,require,module,exports) {\n'use strict'\n\nfunction decode (input, alphabet) {\n  input = input.replace(new RegExp('=', 'g'), '')\n  const length = input.length\n\n  let bits = 0\n  let value = 0\n\n  let index = 0\n  const output = new Uint8Array((length * 5 / 8) | 0)\n\n  for (let i = 0; i < length; i++) {\n    value = (value << 5) | alphabet.indexOf(input[i])\n    bits += 5\n\n    if (bits >= 8) {\n      output[index++] = (value >>> (bits - 8)) & 255\n      bits -= 8\n    }\n  }\n\n  return output.buffer\n}\n\nfunction encode (buffer, alphabet) {\n  const length = buffer.byteLength\n  const view = new Uint8Array(buffer)\n  const padding = alphabet.indexOf('=') === alphabet.length - 1\n\n  if (padding) {\n    alphabet = alphabet.substring(0, alphabet.length - 1)\n  }\n\n  let bits = 0\n  let value = 0\n  let output = ''\n\n  for (let i = 0; i < length; i++) {\n    value = (value << 8) | view[i]\n    bits += 8\n\n    while (bits >= 5) {\n      output += alphabet[(value >>> (bits - 5)) & 31]\n      bits -= 5\n    }\n  }\n\n  if (bits > 0) {\n    output += alphabet[(value << (5 - bits)) & 31]\n  }\n\n  if (padding) {\n    while ((output.length % 8) !== 0) {\n      output += '='\n    }\n  }\n\n  return output\n}\n\nmodule.exports = function base32 (alphabet) {\n  return {\n    encode (input) {\n      if (typeof input === 'string') {\n        return encode(Uint8Array.from(input), alphabet)\n      }\n\n      return encode(input, alphabet)\n    },\n    decode (input) {\n      for (const char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base32 character')\n        }\n      }\n\n      return decode(input, alphabet)\n    }\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","encode","buffer","alphabet","length","byteLength","view","Uint8Array","padding","indexOf","substring","bits","value","output","i","module.exports","input","from","decode","char","Error","replace","RegExp","index"]
}
