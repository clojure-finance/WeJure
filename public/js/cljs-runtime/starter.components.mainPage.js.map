{"version":3,"sources":["starter/components/mainPage.cljs"],"mappings":";AAQA,sCAAA,tCAAKA;AAEL,uCAAA,+CAAAC,tFAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;cAAA,AAAAE,4CAAAF,eAAA,rEAAwBI;AAAxB,AACE,IAAMC,SAAO,gDAAA,hDAACC;AAAd,AACE,AAEE,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAP,4BAAAO;kBAAA,AAAAN,4CAAAM,eAAA,zEAAaJ;AAAb,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,OAAA,wEAAA,SAAA,mEAAA","names":["starter.components.mainPage/ipfsUrl","p__12181","map__12182","cljs.core/--destructure-map","cljs.core.get","starter.components.mainPage/mainPage","details","length","reagent.core.atom","p__12183","map__12184"],"sourcesContent":["(ns starter.components.mainPage\r\n  (:require\r\n    [reagent.core :as r]\r\n    [reagent-mui.material.box :refer [box]]\r\n    ;;[starter.components.photos :refer [photos]]\r\n  )\r\n)\r\n\r\n(def ipfsUrl \"https://ipfs.infura.io/ipfs/\")\r\n\r\n(defn mainPage [{:keys [details]}]\r\n  (let [length (r/atom 0)]\r\n    (do\r\n      ;;(. (. ^js (. contractInstance -methods) picsLength) call (fn [error result] (if error (println error) (reset! length result))))\r\n      (fn [{:keys [details]}]\r\n        [:div \r\n          {:style {:display \"flex\" \r\n                    :flex-direction \"column\" \r\n                    :align-items \"center\"}}\r\n          ;;(for [id (reverse (range @length))]\r\n          ;;  ^{:key id}\r\n          ;;  [photos {:id id}]\r\n          ;;)\r\n        ]\r\n      )\r\n    )\r\n  )\r\n)"]}