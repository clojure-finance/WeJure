{"version":3,"sources":["emotion/core.cljs"],"mappings":"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","names":["emotion.core/create-element","js/module$node_modules$react$index.createElement","emotion.core/forward-ref","js/module$node_modules$react$index.forwardRef","emotion.core/styled-component","js/module$node_modules$$emotion$styled$dist$emotion_styled_browser_cjs","emotion.core/prop-valid?","js/module$node_modules$$emotion$is_prop_valid$dist$emotion_is_prop_valid_browser_cjs","emotion.core/valid-class-props","emotion.core/emotion-class-prop","emotion.core/default-class-prop","emotion.core/html-tag?","component","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/type","js/String","emotion.core/emotion?","emotion.core/object->camel-props","props","js/Object","acc","prop-name","new-prop-name","emotion.props/camel-props","emotion.util/string->camel-case","prop-value","var_args","G__20344","emotion.core/create-forwarded-element","js/Error","fn-convert","emotion.core.create_forwarded_element.cljs$core$IFn$_invoke$arity$3","display-name","p1__20339#","p2__20340#","component-wrapper","G__20345","G__20346","G__20348","emotion.core/convert-class-name","emotion.core.convert_class_name.cljs$core$IFn$_invoke$arity$2","class-name-prop","temp__5718__auto__","current-class-name","emotion.core/create-styled","options","styles","wrap","cljs.core.get.cljs$core$IFn$_invoke$arity$2","camel-casing-props?","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/name","wrapper-component","cljs.core/not","emotion.core.create_forwarded_element.cljs$core$IFn$_invoke$arity$2","p1__20350#","result","G__20354","fexpr__20353","G__20355","G__20356","cljs-bean.core/->js","emotion.core/create-css","G__20357","js/module$node_modules$$emotion$react$dist$emotion_react_browser_cjs.css","emotion.core/keyframes","js/module$node_modules$$emotion$react$dist$emotion_react_browser_cjs.keyframes","G__20359","emotion.core/with-component","p__20360","map__20361","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","styled-component","new-component","emotion.core.with_component.cljs$core$IFn$_invoke$arity$3","emotion.util/convert-component-name","html-tag?","or__4131__auto__","emotion.core/Global","js/module$node_modules$$emotion$react$dist$emotion_react_browser_cjs.Global"],"sourcesContent":["(ns emotion.core\n  (:require-macros [emotion.core])\n  (:require\n   [cljs-bean.core :refer [->js]]\n   [\"react\" :as react]\n   [\"@emotion/react\" :as emotion-react]\n   [\"@emotion/styled\" :as styled]\n   [\"@emotion/is-prop-valid\" :as is-prop-valid]\n   [emotion.props :as p]\n   [emotion.util :as util]))\n\n(def ^:private create-element react/createElement)\n(def ^:private forward-ref react/forwardRef)\n(def ^:private styled-component (.-default styled))\n(def ^:private prop-valid? (.-default is-prop-valid))\n\n(def ^:private valid-class-props #{\"class-name\" \"className\" \"class\"})\n(def ^:private emotion-class-prop \"className\")\n(def ^:private default-class-prop \"class-name\")\n\n(defn- html-tag?\n  \"Simple check that component which we need to styled is a simple html tag.\"\n  [component]\n  (= (type component) js/String))\n\n(defn- emotion?\n  \"Check that component is emotion component.\"\n  [component]\n  (some? (.-__emotion_base component)))\n\n(defn- object->camel-props\n  \"Convert keys of js object to camel case react props.\"\n  [props]\n  (.reduce (.keys js/Object props)\n           (fn [acc prop-name]\n             (let [new-prop-name (cond\n                                   ;; class props\n                                   (valid-class-props prop-name)\n                                   emotion-class-prop\n                                   ;; camelCase props\n                                   (.includes p/camel-props prop-name)\n                                   (util/string->camel-case prop-name)\n                                   :else prop-name)]\n               (when (prop-valid? new-prop-name)\n                 (let [prop-value (aget props prop-name)\n                       prop-value (if (and (= new-prop-name emotion-class-prop)\n                                           (some? (aget acc emotion-class-prop)))\n                                    (str (aget acc emotion-class-prop) \" \" prop-value)\n                                    prop-value)]\n                   (aset acc new-prop-name prop-value))))\n             acc) #js{}))\n\n(defn- create-forwarded-element\n  \"Create React component wrapped with React.forwardRef\"\n  ([component fn-convert]\n   (create-forwarded-element component fn-convert component))\n  ([component fn-convert display-name]\n   (let [component-wrapper\n         #(create-element\n           component\n           (.assign js/Object\n                    (fn-convert %1)\n                    #js {:ref %2}))]\n     (aset component-wrapper \"displayName\" display-name)\n     (forward-ref component-wrapper))))\n\n(defn- convert-class-name\n  \"Convert component properties with `className` or `class` which\n  will converted to `class-name` kebab-case style.\"\n  ([props]\n   (convert-class-name props default-class-prop))\n  ([props class-name-prop]\n   (.reduce\n    (.keys js/Object props)\n    (fn [acc prop-name]\n      (if (valid-class-props prop-name)\n        (aset acc class-name-prop\n              (if-let [current-class-name (aget acc class-name-prop)]\n                (str current-class-name \" \" (aget props prop-name))\n                (aget props prop-name)))\n        (aset acc prop-name (aget props prop-name)))\n      acc) #js {})))\n\n(defn- create-styled\n  \"Create styled component.\"\n  [display-name component options styles]\n  (let [wrap                (get options \"wrap\")\n        camel-casing-props? (get options \"camelCasingProps?\" true)\n        class-name-prop     (name (get options \"classNameProp\"\n                                       default-class-prop))\n        wrapper-component\n        (cond\n          (not camel-casing-props?) component\n          (emotion? component)      component\n          (html-tag? component)     (create-forwarded-element\n                                     component\n                                     object->camel-props)\n          (= class-name-prop\n             emotion-class-prop)    component\n          :else                     (create-forwarded-element\n                                     component\n                                     #(convert-class-name % class-name-prop)))]\n    (aset wrapper-component \"displayName\" display-name)\n    (let [result ((styled-component wrapper-component (->js options))\n                  (fn [props]\n                    (.concat (->js styles) (.-css props))))]\n      (if wrap\n        (wrap result)\n        result))))\n\n(defn create-css\n  \"Create Emotion css.\"\n  [styles]\n  (emotion-react/css (->js styles)))\n\n(def keyframes emotion-react/keyframes)\n\n(defn with-component\n  \"Change component/tag in styled component with help of `withComponent`.\"\n  ([styled-component new-component]\n   (with-component styled-component new-component nil))\n  ([styled-component new-component {:keys [display-name]}]\n   (let [new-component     (util/convert-component-name new-component)\n         html-tag?         (html-tag? new-component)\n         component-wrapper (create-forwarded-element\n                            new-component\n                            (if html-tag?\n                              object->camel-props\n                              convert-class-name)\n                            display-name)]\n     (when-not html-tag?\n       (aset component-wrapper \"defaultProps\"\n             (.-defaultProps new-component))\n       (aset component-wrapper \"displayName\"\n             (or display-name (.-displayName new-component))))\n     (.withComponent styled-component component-wrapper))))\n\n(defn Global\n  \"Add global css.\"\n  [props]\n  (.render emotion-react/Global\n           #js {:styles (.-children props)}))\n(set! (.-displayName Global) \"GlobalStyled\")\n"]}