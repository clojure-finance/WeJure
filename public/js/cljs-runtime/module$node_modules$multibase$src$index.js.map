{
"version":3,
"file":"module$node_modules$multibase$src$index.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,uCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAyBpGC,QAASA,UAAU,CAACC,UAAD,CAAaC,GAAb,CAAkB,CACnC,GAAI,CAACA,GAAL,CACE,KAAUC,MAAJ,CAAU,4BAAV,CAAN,CAEIC,UAAAA,CAAOC,OAAA,CAAQJ,UAAR,CACb,OAAMK,QAAUC,MAAOC,CAAAA,IAAP,CAAYJ,UAAKK,CAAAA,IAAjB,CAgFHJ,QAAAD,CA9EAA,UAAKM,CAAAA,IA8ELN,CACRO,CAAAA,MAAL,CA9EkBT,GA8EFU,CAAAA,QAAJ,EAAZ,CA7EA,OAAOL,OAAOM,CAAAA,MAAP,CAAc,CAACP,OAAD,CAAUJ,GAAV,CAAd,CAT4B,CAyFrCG,QAASA,QAAQ,CAACJ,UAAD,CAAa,CAC5B,IAAIG,IAEJ,IAAIU,SAAUC,CAAAA,KAAV,CAAgBd,UAAhB,CAAJ,CACEG,IAAA,CAAOU,SAAUC,CAAAA,KAAV,CAAgBd,UAAhB,CADT,KAEO,IAAIa,SAAUE,CAAAA,KAAV,CAAgBf,UAAhB,CAAJ,CACLG,IAAA,CAAOU,SAAUE,CAAAA,KAAV,CAAgBf,UAAhB,CADF;IAGL,MAAUE,MAAJ,CAAU,sBAAV,CAAN,CAGF,GAAI,CAACC,IAAKa,CAAAA,aAAL,EAAL,CACE,KAAUd,MAAJ,CAAU,OAAV,CAAoBF,UAApB,CAAiC,yBAAjC,CAAN,CAGF,MAAOG,KAfqB,CA3G9B,MAAM,CAAEG,MAAF,CAAA,CAAaV,OAAA,CAAQ,kCAAR,CAAnB,CACMiB,UAAYjB,OAAA,CAAQ,6CAAR,CAElBE,QAAA,CAAUD,MAAOC,CAAAA,OAAjB,CAA2BC,SAC3BD,QAAQmB,CAAAA,MAAR,CAkCAA,QAAgB,CAACjB,UAAD,CAAaC,GAAb,CAAkB,CAC1BE,UAAAA,CAAOC,OAAA,CAAQJ,UAAR,CAGb,OAAOD,UAAA,CAFMI,UAAKM,CAAAA,IAEX,CAAgBH,MAAOC,CAAAA,IAAP,CAAYJ,UAAKc,CAAAA,MAAL,CAAYhB,GAAZ,CAAZ,CAAhB,CAJyB,CAjClCH,QAAQY,CAAAA,MAAR,CAiDAA,QAAgB,CAACQ,WAAD,CAAc,CACxBZ,MAAOa,CAAAA,QAAP,CAAgBD,WAAhB,CAAJ;CACEA,WADF,CACgBA,WAAYP,CAAAA,QAAZ,EADhB,CAIA,KAAMH,KAAOU,WAAYE,CAAAA,SAAZ,CAAsB,CAAtB,CAAyB,CAAzB,CACbF,YAAA,CAAcA,WAAYE,CAAAA,SAAZ,CAAsB,CAAtB,CAAyBF,WAAYG,CAAAA,MAArC,CAEa,SAA3B,GAAI,MAAOH,YAAX,GACEA,WADF,CACgBZ,MAAOC,CAAAA,IAAP,CAAYW,WAAZ,CADhB,CAIMf,KAAAA,CAAOC,OAAA,CAAQI,IAAR,CACb,OAAOF,OAAOC,CAAAA,IAAP,CAAYJ,IAAKO,CAAAA,MAAL,CAAYQ,WAAYP,CAAAA,QAAZ,EAAZ,CAAZ,CAbqB,CAhD9Bb,QAAQwB,CAAAA,SAAR,CAuEAA,QAAmB,CAACJ,WAAD,CAAc,CAC3BZ,MAAOa,CAAAA,QAAP,CAAgBD,WAAhB,CAAJ,GACEA,WADF,CACgBA,WAAYP,CAAAA,QAAZ,EADhB,CAKA,IAAoD,iBAApD,GAAIY,MAAOC,CAAAA,SAAUb,CAAAA,QAASc,CAAAA,IAA1B,CAA+BP,WAA/B,CAAJ,CACE,MAAO,CAAA,CAGHV,YAAAA,CAAOU,WAAYE,CAAAA,SAAZ,CAAsB,CAAtB,CAAyB,CAAzB,CACb,IAAI,CAEF,MADahB,QAAAD,CAAQK,WAARL,CACDM,CAAAA,IAFV,CAGF,MAAOiB,GAAP,CAAY,CACZ,MAAO,CAAA,CADK,CAdiB,CAtEjC5B;OAAQgB,CAAAA,KAAR,CAAgBS,MAAOI,CAAAA,MAAP,CAAcJ,MAAOK,CAAAA,IAAP,CAAYf,SAAUC,CAAAA,KAAtB,CAAd,CAChBhB,QAAQiB,CAAAA,KAAR,CAAgBQ,MAAOI,CAAAA,MAAP,CAAcJ,MAAOK,CAAAA,IAAP,CAAYf,SAAUE,CAAAA,KAAtB,CAAd,CAfoF;",
"sources":["node_modules/multibase/src/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$multibase$src$index\"] = function(global,require,module,exports) {\n/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n * @module Multibase\n */\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst constants = require('./constants')\n\nexports = module.exports = multibase\nexports.encode = encode\nexports.decode = decode\nexports.isEncoded = isEncoded\nexports.names = Object.freeze(Object.keys(constants.names))\nexports.codes = Object.freeze(Object.keys(constants.codes))\n\n/**\n * Create a new buffer with the multibase varint+code.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be prefixed with multibase.\n * @memberof Multibase\n * @returns {Buffer}\n */\nfunction multibase (nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded buffer')\n  }\n  const base = getBase(nameOrCode)\n  const codeBuf = Buffer.from(base.code)\n\n  const name = base.name\n  validEncode(name, buf)\n  return Buffer.concat([codeBuf, buf])\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be encoded.\n * @returns {Buffer}\n * @memberof Multibase\n */\nfunction encode (nameOrCode, buf) {\n  const base = getBase(nameOrCode)\n  const name = base.name\n\n  return multibase(name, Buffer.from(base.encode(buf)))\n}\n\n/**\n * Takes a buffer or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Buffer|string} bufOrString\n * @returns {Buffer}\n * @memberof Multibase\n *\n */\nfunction decode (bufOrString) {\n  if (Buffer.isBuffer(bufOrString)) {\n    bufOrString = bufOrString.toString()\n  }\n\n  const code = bufOrString.substring(0, 1)\n  bufOrString = bufOrString.substring(1, bufOrString.length)\n\n  if (typeof bufOrString === 'string') {\n    bufOrString = Buffer.from(bufOrString)\n  }\n\n  const base = getBase(code)\n  return Buffer.from(base.decode(bufOrString.toString()))\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Buffer|string} bufOrString\n * @returns {boolean}\n * @memberof Multibase\n */\nfunction isEncoded (bufOrString) {\n  if (Buffer.isBuffer(bufOrString)) {\n    bufOrString = bufOrString.toString()\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(bufOrString) !== '[object String]') {\n    return false\n  }\n\n  const code = bufOrString.substring(0, 1)\n  try {\n    const base = getBase(code)\n    return base.name\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * @param {string} name\n * @param {Buffer} buf\n * @private\n * @returns {undefined}\n */\nfunction validEncode (name, buf) {\n  const base = getBase(name)\n  base.decode(buf.toString())\n}\n\nfunction getBase (nameOrCode) {\n  let base\n\n  if (constants.names[nameOrCode]) {\n    base = constants.names[nameOrCode]\n  } else if (constants.codes[nameOrCode]) {\n    base = constants.codes[nameOrCode]\n  } else {\n    throw new Error('Unsupported encoding')\n  }\n\n  if (!base.isImplemented()) {\n    throw new Error('Base ' + nameOrCode + ' is not implemented yet')\n  }\n\n  return base\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","multibase","nameOrCode","buf","Error","base","getBase","codeBuf","Buffer","from","code","name","decode","toString","concat","constants","names","codes","isImplemented","encode","bufOrString","isBuffer","substring","length","isEncoded","Object","prototype","call","err","freeze","keys"]
}
