{
"version":3,
"file":"module$node_modules$keccak$lib$api$keccak.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/keccak/lib/api/keccak.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$keccak$lib$api$keccak\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\nconst { Transform } = require('readable-stream')\n\nmodule.exports = (KeccakState) => class Keccak extends Transform {\n  constructor (rate, capacity, delimitedSuffix, hashBitLength, options) {\n    super(options)\n\n    this._rate = rate\n    this._capacity = capacity\n    this._delimitedSuffix = delimitedSuffix\n    this._hashBitLength = hashBitLength\n    this._options = options\n\n    this._state = new KeccakState()\n    this._state.initialize(rate, capacity)\n    this._finalized = false\n  }\n\n  _transform (chunk, encoding, callback) {\n    let error = null\n    try {\n      this.update(chunk, encoding)\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  _flush (callback) {\n    let error = null\n    try {\n      this.push(this.digest())\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  update (data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\n    if (this._finalized) throw new Error('Digest already called')\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n    this._state.absorb(data)\n\n    return this\n  }\n\n  digest (encoding) {\n    if (this._finalized) throw new Error('Digest already called')\n    this._finalized = true\n\n    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)\n    let digest = this._state.squeeze(this._hashBitLength / 8)\n    if (encoding !== undefined) digest = digest.toString(encoding)\n\n    this._resetState()\n\n    return digest\n  }\n\n  // remove result from memory\n  _resetState () {\n    this._state.initialize(this._rate, this._capacity)\n    return this\n  }\n\n  // because sometimes we need hash right now and little later\n  _clone () {\n    const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)\n    this._state.copy(clone._state)\n    clone._finalized = this._finalized\n\n    return clone\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Transform","KeccakState","module.exports","Keccak","constructor","rate","capacity","delimitedSuffix","hashBitLength","options","_rate","_capacity","_delimitedSuffix","_hashBitLength","_options","_state","initialize","_finalized","_transform","chunk","encoding","callback","error","update","err","_flush","push","digest","data","isBuffer","TypeError","Error","from","absorb","absorbLastFewBits","squeeze","undefined","toString","_resetState","_clone","clone","copy"]
}
