shadow$provide.module$node_modules$multihashes$src$index=function(global,require,module,exports){function validate(multihash){exports.decode(multihash)}const {Buffer}=require("module$node_modules$buffer$index"),multibase=require("module$node_modules$multibase$src$index"),varint=require("module$node_modules$varint$index"),cs=require("module$node_modules$multihashes$src$constants");exports.names=cs.names;exports.codes=cs.codes;exports.defaultLengths=cs.defaultLengths;exports.toHexString=function(hash){if(!Buffer.isBuffer(hash))throw Error("must be passed a buffer");
return hash.toString("hex")};exports.fromHexString=function(hash){return Buffer.from(hash,"hex")};exports.toB58String=function(hash){if(!Buffer.isBuffer(hash))throw Error("must be passed a buffer");return multibase.encode("base58btc",hash).toString().slice(1)};exports.fromB58String=function(hash){let encoded=hash;Buffer.isBuffer(hash)&&(encoded=hash.toString());return multibase.decode("z"+encoded)};exports.decode=function(buf){if(!Buffer.isBuffer(buf))throw Error("multihash must be a Buffer");if(2>
buf.length)throw Error("multihash too short. must be \x3e 2 bytes.");const code=varint.decode(buf);if(!exports.isValidCode(code))throw Error(`multihash unknown function code: 0x${code.toString(16)}`);buf=buf.slice(varint.decode.bytes);const len=varint.decode(buf);if(0>len)throw Error(`multihash invalid length: ${len}`);buf=buf.slice(varint.decode.bytes);if(buf.length!==len)throw Error(`multihash length inconsistent: 0x${buf.toString("hex")}`);return{code,name:cs.codes[code],length:len,digest:buf}};
exports.encode=function(digest,code,length){if(!digest||void 0===code)throw Error("multihash encode requires at least two args: digest, code");code=exports.coerceCode(code);if(!Buffer.isBuffer(digest))throw Error("digest should be a Buffer");null==length&&(length=digest.length);if(length&&digest.length!==length)throw Error("digest length should be equal to specified length.");return Buffer.concat([Buffer.from(varint.encode(code)),Buffer.from(varint.encode(length)),digest])};exports.coerceCode=function(name){let code=
name;if("string"===typeof name){if(void 0===cs.names[name])throw Error(`Unrecognized hash function named: ${name}`);code=cs.names[name]}if("number"!==typeof code)throw Error(`Hash function code should be a number. Got: ${code}`);if(void 0===cs.codes[code]&&!exports.isAppCode(code))throw Error(`Unrecognized function code: ${code}`);return code};exports.isAppCode=function(code){return 0<code&&16>code};exports.isValidCode=function(code){return exports.isAppCode(code)||cs.codes[code]?!0:!1};exports.validate=
validate;exports.prefix=function(multihash){validate(multihash);return multihash.slice(0,2)}}
//# sourceMappingURL=module$node_modules$multihashes$src$index.js.map
