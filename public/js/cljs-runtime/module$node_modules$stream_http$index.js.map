{
"version":3,
"file":"module$node_modules$stream_http$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,qCAAA,CAA0D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAClG,IAAIC,cAAgBH,OAAA,CAAQ,6CAAR,CAChBI,OAAAA,CAAWJ,OAAA,CAAQ,8CAAR,CACf,KAAIK,OAASL,OAAA,CAAQ,qCAAR,CAAb,CACIM,YAAcN,OAAA,CAAQ,kDAAR,CADlB,CAEIO,IAAMP,OAAA,CAAQ,6BAAR,CAECE,QAENM,CAAAA,OAAL,CAAeC,QAAS,CAACC,IAAD,CAAOC,EAAP,CAAW,CAEjCD,IAAA,CADmB,QAApB,GAAI,MAAOA,KAAX,CACQH,GAAIK,CAAAA,KAAJ,CAAUF,IAAV,CADR,CAGQL,MAAA,CAAOK,IAAP,CAKR,KAAIG;AAAmE,CAAC,CAAlD,GAAAd,MAAOe,CAAAA,QAASC,CAAAA,QAASC,CAAAA,MAAzB,CAAgC,WAAhC,CAAA,CAAsD,OAAtD,CAAgE,EAElFD,gBAAAA,CAAWL,IAAKK,CAAAA,QAAhBA,EAA4BF,eAChC,KAAII,KAAOP,IAAKQ,CAAAA,QAAZD,EAAwBP,IAAKO,CAAAA,IAAjC,CACIE,KAAOT,IAAKS,CAAAA,IADhB,CAEIC,KAAOV,IAAKU,CAAAA,IAAZA,EAAoB,GAGpBH,KAAJ,EAAkC,CAAC,CAAnC,GAAYA,IAAKI,CAAAA,OAAL,CAAa,GAAb,CAAZ,GACCJ,IADD,CACQ,GADR,CACcA,IADd,CACqB,GADrB,CAIAP,KAAKH,CAAAA,GAAL,EAAYU,IAAA,CAAQF,eAAR,CAAmB,IAAnB,CAA0BE,IAA1B,CAAkC,EAA9C,GAAqDE,IAAA,CAAO,GAAP,CAAaA,IAAb,CAAoB,EAAzE,EAA+EC,IAC/EV,KAAKY,CAAAA,MAAL,CAAqCC,CAAtBb,IAAKY,CAAAA,MAAiBC,EAAP,KAAOA,EAAAA,WAAvB,EACdb,KAAKc,CAAAA,OAAL,CAAed,IAAKc,CAAAA,OAApB,EAA+B,EAI3BC,KAAAA,CAAM,IAAItB,aAAJ,CAAkBO,IAAlB,CACV,IAAIC,EAAJ,CACCc,IAAIC,CAAAA,EAAJ,CAAO,UAAP,CAAmBf,EAAnB,CACD,OAAOc,KA9B2B,CAFxBvB,QAmCNyB,CAAAA,GAAL,CAAWC,QAAa,CAAClB,IAAD,CAAOC,EAAP,CAAW,CAC9Bc,IAAAA,CApCMvB,OAoCKM,CAAAA,OAAL,CAAaE,IAAb,CAAmBC,EAAnB,CACVc;IAAII,CAAAA,GAAJ,EACA,OAAOJ,KAH2B,CAnCxBvB,QAyCNC,CAAAA,aAAL,CAAqBA,aAzCVD,QA0CN4B,CAAAA,eAAL,CAAuB1B,MAAS0B,CAAAA,eA1CrB5B,QA4CN6B,CAAAA,KAAL,CAAaC,QAAS,EAAG,EA5Cd9B,QA6CN6B,CAAAA,KAAME,CAAAA,iBAAX,CAA+B,CA7CpB/B,QA+CNgC,CAAAA,WAAL,CAAmB,IA/CRhC,OA+CiB6B,CAAAA,KA/CjB7B,QAiDNiC,CAAAA,YAAL,CAAoB7B,WAjDTJ,QAmDNkC,CAAAA,OAAL,CAAe,yLAAA,CAAA,KAAA,CAAA,GAAA,CA1DmF;",
"sources":["node_modules/stream-http/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$stream_http$index\"] = function(global,require,module,exports) {\nvar ClientRequest = require('./lib/request')\nvar response = require('./lib/response')\nvar extend = require('xtend')\nvar statusCodes = require('builtin-status-codes')\nvar url = require('url')\n\nvar http = exports\n\nhttp.request = function (opts, cb) {\n\tif (typeof opts === 'string')\n\t\topts = url.parse(opts)\n\telse\n\t\topts = extend(opts)\n\n\t// Normally, the page is loaded from http or https, so not specifying a protocol\n\t// will result in a (valid) protocol-relative url. However, this won't work if\n\t// the protocol is something else, like 'file:'\n\tvar defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''\n\n\tvar protocol = opts.protocol || defaultProtocol\n\tvar host = opts.hostname || opts.host\n\tvar port = opts.port\n\tvar path = opts.path || '/'\n\n\t// Necessary for IPv6 addresses\n\tif (host && host.indexOf(':') !== -1)\n\t\thost = '[' + host + ']'\n\n\t// This may be a relative url. The browser should always be able to interpret it correctly.\n\topts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path\n\topts.method = (opts.method || 'GET').toUpperCase()\n\topts.headers = opts.headers || {}\n\n\t// Also valid opts.auth, opts.mode\n\n\tvar req = new ClientRequest(opts)\n\tif (cb)\n\t\treq.on('response', cb)\n\treturn req\n}\n\nhttp.get = function get (opts, cb) {\n\tvar req = http.request(opts, cb)\n\treq.end()\n\treturn req\n}\n\nhttp.ClientRequest = ClientRequest\nhttp.IncomingMessage = response.IncomingMessage\n\nhttp.Agent = function () {}\nhttp.Agent.defaultMaxSockets = 4\n\nhttp.globalAgent = new http.Agent()\n\nhttp.STATUS_CODES = statusCodes\n\nhttp.METHODS = [\n\t'CHECKOUT',\n\t'CONNECT',\n\t'COPY',\n\t'DELETE',\n\t'GET',\n\t'HEAD',\n\t'LOCK',\n\t'M-SEARCH',\n\t'MERGE',\n\t'MKACTIVITY',\n\t'MKCOL',\n\t'MOVE',\n\t'NOTIFY',\n\t'OPTIONS',\n\t'PATCH',\n\t'POST',\n\t'PROPFIND',\n\t'PROPPATCH',\n\t'PURGE',\n\t'PUT',\n\t'REPORT',\n\t'SEARCH',\n\t'SUBSCRIBE',\n\t'TRACE',\n\t'UNLOCK',\n\t'UNSUBSCRIBE'\n]\n};"],
"names":["shadow$provide","global","require","module","exports","ClientRequest","response","extend","statusCodes","url","request","http.request","opts","cb","parse","defaultProtocol","location","protocol","search","host","hostname","port","path","indexOf","method","toUpperCase","headers","req","on","get","http.get","end","IncomingMessage","Agent","http.Agent","defaultMaxSockets","globalAgent","STATUS_CODES","METHODS"]
}
